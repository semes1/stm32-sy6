
F407VET6_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad44  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b70  0800aed8  0800aed8  0000bed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba48  0800ba48  0000d1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba48  0800ba48  0000ca48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba50  0800ba50  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba50  0800ba50  0000ca50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba54  0800ba54  0000ca54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800ba58  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1e0  2**0
                  CONTENTS
 10 .bss          0000032c  200001e0  200001e0  0000d1e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000050c  2000050c  0000d1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011c85  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cf8  00000000  00000000  0001ee95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001008  00000000  00000000  00021b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c68  00000000  00000000  00022b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024316  00000000  00000000  00023800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b74  00000000  00000000  00047b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da422  00000000  00000000  0005c68a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00136aac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000576c  00000000  00000000  00136af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0013c25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aebc 	.word	0x0800aebc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800aebc 	.word	0x0800aebc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <LCD_Fill>:
                xend,yend   终止坐标
                                color       要填充的颜色
      返回值：  无
******************************************************************************/
void LCD_Fill(u16 xsta,u16 ysta,u16 xend,u16 yend,u16 color)
{          
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4604      	mov	r4, r0
 8000fec:	4608      	mov	r0, r1
 8000fee:	4611      	mov	r1, r2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	80fb      	strh	r3, [r7, #6]
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80bb      	strh	r3, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	807b      	strh	r3, [r7, #2]
 8000ffe:	4613      	mov	r3, r2
 8001000:	803b      	strh	r3, [r7, #0]
    u16 i,j; 
    LCD_Address_Set(xsta,ysta,xend-1,yend-1);//设置显示范围
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	3b01      	subs	r3, #1
 8001006:	b29a      	uxth	r2, r3
 8001008:	883b      	ldrh	r3, [r7, #0]
 800100a:	3b01      	subs	r3, #1
 800100c:	b29b      	uxth	r3, r3
 800100e:	88b9      	ldrh	r1, [r7, #4]
 8001010:	88f8      	ldrh	r0, [r7, #6]
 8001012:	f000 fc27 	bl	8001864 <LCD_Address_Set>
    for(i=ysta;i<yend;i++)
 8001016:	88bb      	ldrh	r3, [r7, #4]
 8001018:	81fb      	strh	r3, [r7, #14]
 800101a:	e010      	b.n	800103e <LCD_Fill+0x5a>
    {                                                                
        for(j=xsta;j<xend;j++)
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	81bb      	strh	r3, [r7, #12]
 8001020:	e006      	b.n	8001030 <LCD_Fill+0x4c>
        {
            LCD_WR_DATA(color);
 8001022:	8c3b      	ldrh	r3, [r7, #32]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fbee 	bl	8001806 <LCD_WR_DATA>
        for(j=xsta;j<xend;j++)
 800102a:	89bb      	ldrh	r3, [r7, #12]
 800102c:	3301      	adds	r3, #1
 800102e:	81bb      	strh	r3, [r7, #12]
 8001030:	89ba      	ldrh	r2, [r7, #12]
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	429a      	cmp	r2, r3
 8001036:	d3f4      	bcc.n	8001022 <LCD_Fill+0x3e>
    for(i=ysta;i<yend;i++)
 8001038:	89fb      	ldrh	r3, [r7, #14]
 800103a:	3301      	adds	r3, #1
 800103c:	81fb      	strh	r3, [r7, #14]
 800103e:	89fa      	ldrh	r2, [r7, #14]
 8001040:	883b      	ldrh	r3, [r7, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	d3ea      	bcc.n	800101c <LCD_Fill+0x38>
        }
    }                               
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bd90      	pop	{r4, r7, pc}

08001050 <LCD_DrawPoint>:
      入口数据：x,y 画点坐标
                color 点的颜色
      返回值：  无
******************************************************************************/
void LCD_DrawPoint(u16 x,u16 y,u16 color)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	80fb      	strh	r3, [r7, #6]
 800105a:	460b      	mov	r3, r1
 800105c:	80bb      	strh	r3, [r7, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	807b      	strh	r3, [r7, #2]
    LCD_Address_Set(x,y,x,y);//设置光标位置 
 8001062:	88bb      	ldrh	r3, [r7, #4]
 8001064:	88fa      	ldrh	r2, [r7, #6]
 8001066:	88b9      	ldrh	r1, [r7, #4]
 8001068:	88f8      	ldrh	r0, [r7, #6]
 800106a:	f000 fbfb 	bl	8001864 <LCD_Address_Set>
    LCD_WR_DATA(color);
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fbc8 	bl	8001806 <LCD_WR_DATA>
} 
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <LCD_DrawLine>:
                x2,y2   终止坐标
                color   线的颜色
      返回值：  无
******************************************************************************/
void LCD_DrawLine(u16 x1,u16 y1,u16 x2,u16 y2,u16 color)
{
 800107e:	b590      	push	{r4, r7, lr}
 8001080:	b08d      	sub	sp, #52	@ 0x34
 8001082:	af00      	add	r7, sp, #0
 8001084:	4604      	mov	r4, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4611      	mov	r1, r2
 800108a:	461a      	mov	r2, r3
 800108c:	4623      	mov	r3, r4
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	4603      	mov	r3, r0
 8001092:	80bb      	strh	r3, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	803b      	strh	r3, [r7, #0]
    u16 t; 
    int xerr=0,yerr=0,delta_x,delta_y,distance;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
    int incx,incy,uRow,uCol;
    delta_x=x2-x1; //计算坐标增量 
 80010a4:	887a      	ldrh	r2, [r7, #2]
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	623b      	str	r3, [r7, #32]
    delta_y=y2-y1;
 80010ac:	883a      	ldrh	r2, [r7, #0]
 80010ae:	88bb      	ldrh	r3, [r7, #4]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	61fb      	str	r3, [r7, #28]
    uRow=x1;//画线起点坐标
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	60fb      	str	r3, [r7, #12]
    uCol=y1;
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	60bb      	str	r3, [r7, #8]
    if(delta_x>0)incx=1; //设置单步方向 
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	dd02      	ble.n	80010c8 <LCD_DrawLine+0x4a>
 80010c2:	2301      	movs	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	e00b      	b.n	80010e0 <LCD_DrawLine+0x62>
    else if (delta_x==0)incx=0;//垂直线 
 80010c8:	6a3b      	ldr	r3, [r7, #32]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d102      	bne.n	80010d4 <LCD_DrawLine+0x56>
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e005      	b.n	80010e0 <LCD_DrawLine+0x62>
    else {incx=-1;delta_x=-delta_x;}
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	425b      	negs	r3, r3
 80010de:	623b      	str	r3, [r7, #32]
    if(delta_y>0)incy=1;
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	dd02      	ble.n	80010ec <LCD_DrawLine+0x6e>
 80010e6:	2301      	movs	r3, #1
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	e00b      	b.n	8001104 <LCD_DrawLine+0x86>
    else if (delta_y==0)incy=0;//水平线 
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d102      	bne.n	80010f8 <LCD_DrawLine+0x7a>
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	e005      	b.n	8001104 <LCD_DrawLine+0x86>
    else {incy=-1;delta_y=-delta_y;}
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	425b      	negs	r3, r3
 8001102:	61fb      	str	r3, [r7, #28]
    if(delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
 8001104:	6a3a      	ldr	r2, [r7, #32]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	429a      	cmp	r2, r3
 800110a:	dd02      	ble.n	8001112 <LCD_DrawLine+0x94>
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	e001      	b.n	8001116 <LCD_DrawLine+0x98>
    else distance=delta_y;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	61bb      	str	r3, [r7, #24]
    for(t=0;t<distance+1;t++)
 8001116:	2300      	movs	r3, #0
 8001118:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800111a:	e02b      	b.n	8001174 <LCD_DrawLine+0xf6>
    {
        LCD_DrawPoint(uRow,uCol,color);//画点
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	b29b      	uxth	r3, r3
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	b291      	uxth	r1, r2
 8001124:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff91 	bl	8001050 <LCD_DrawPoint>
        xerr+=delta_x;
 800112e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	4413      	add	r3, r2
 8001134:	62bb      	str	r3, [r7, #40]	@ 0x28
        yerr+=delta_y;
 8001136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	4413      	add	r3, r2
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
        if(xerr>distance)
 800113e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	429a      	cmp	r2, r3
 8001144:	dd07      	ble.n	8001156 <LCD_DrawLine+0xd8>
        {
            xerr-=distance;
 8001146:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
            uRow+=incx;
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
        }
        if(yerr>distance)
 8001156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	429a      	cmp	r2, r3
 800115c:	dd07      	ble.n	800116e <LCD_DrawLine+0xf0>
        {
            yerr-=distance;
 800115e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
            uCol+=incy;
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4413      	add	r3, r2
 800116c:	60bb      	str	r3, [r7, #8]
    for(t=0;t<distance+1;t++)
 800116e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001170:	3301      	adds	r3, #1
 8001172:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001174:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	429a      	cmp	r2, r3
 800117a:	dacf      	bge.n	800111c <LCD_DrawLine+0x9e>
        }
    }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3734      	adds	r7, #52	@ 0x34
 8001182:	46bd      	mov	sp, r7
 8001184:	bd90      	pop	{r4, r7, pc}

08001186 <LCD_DrawRectangle>:
                x2,y2   终止坐标
                color   矩形的颜色
      返回值：  无
******************************************************************************/
void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2,u16 color)
{
 8001186:	b590      	push	{r4, r7, lr}
 8001188:	b085      	sub	sp, #20
 800118a:	af02      	add	r7, sp, #8
 800118c:	4604      	mov	r4, r0
 800118e:	4608      	mov	r0, r1
 8001190:	4611      	mov	r1, r2
 8001192:	461a      	mov	r2, r3
 8001194:	4623      	mov	r3, r4
 8001196:	80fb      	strh	r3, [r7, #6]
 8001198:	4603      	mov	r3, r0
 800119a:	80bb      	strh	r3, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]
 80011a0:	4613      	mov	r3, r2
 80011a2:	803b      	strh	r3, [r7, #0]
    LCD_DrawLine(x1,y1,x2,y1,color);
 80011a4:	88bc      	ldrh	r4, [r7, #4]
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	88b9      	ldrh	r1, [r7, #4]
 80011aa:	88f8      	ldrh	r0, [r7, #6]
 80011ac:	8b3b      	ldrh	r3, [r7, #24]
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	4623      	mov	r3, r4
 80011b2:	f7ff ff64 	bl	800107e <LCD_DrawLine>
    LCD_DrawLine(x1,y1,x1,y2,color);
 80011b6:	883c      	ldrh	r4, [r7, #0]
 80011b8:	88fa      	ldrh	r2, [r7, #6]
 80011ba:	88b9      	ldrh	r1, [r7, #4]
 80011bc:	88f8      	ldrh	r0, [r7, #6]
 80011be:	8b3b      	ldrh	r3, [r7, #24]
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	4623      	mov	r3, r4
 80011c4:	f7ff ff5b 	bl	800107e <LCD_DrawLine>
    LCD_DrawLine(x1,y2,x2,y2,color);
 80011c8:	883c      	ldrh	r4, [r7, #0]
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	8839      	ldrh	r1, [r7, #0]
 80011ce:	88f8      	ldrh	r0, [r7, #6]
 80011d0:	8b3b      	ldrh	r3, [r7, #24]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	4623      	mov	r3, r4
 80011d6:	f7ff ff52 	bl	800107e <LCD_DrawLine>
    LCD_DrawLine(x2,y1,x2,y2,color);
 80011da:	883c      	ldrh	r4, [r7, #0]
 80011dc:	887a      	ldrh	r2, [r7, #2]
 80011de:	88b9      	ldrh	r1, [r7, #4]
 80011e0:	8878      	ldrh	r0, [r7, #2]
 80011e2:	8b3b      	ldrh	r3, [r7, #24]
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	4623      	mov	r3, r4
 80011e8:	f7ff ff49 	bl	800107e <LCD_DrawLine>
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}

080011f4 <Draw_Circle>:
                r       半径
                color   圆的颜色
      返回值：  无
******************************************************************************/
void Draw_Circle(u16 x0,u16 y0,u8 r,u16 color)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4604      	mov	r4, r0
 80011fc:	4608      	mov	r0, r1
 80011fe:	4611      	mov	r1, r2
 8001200:	461a      	mov	r2, r3
 8001202:	4623      	mov	r3, r4
 8001204:	80fb      	strh	r3, [r7, #6]
 8001206:	4603      	mov	r3, r0
 8001208:	80bb      	strh	r3, [r7, #4]
 800120a:	460b      	mov	r3, r1
 800120c:	70fb      	strb	r3, [r7, #3]
 800120e:	4613      	mov	r3, r2
 8001210:	803b      	strh	r3, [r7, #0]
    int a,b;
    a=0;b=r;      
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	60bb      	str	r3, [r7, #8]
    while(a<=b)
 800121a:	e082      	b.n	8001322 <Draw_Circle+0x12e>
    {
        LCD_DrawPoint(x0-b,y0-a,color);             //3           
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	b29b      	uxth	r3, r3
 8001220:	88fa      	ldrh	r2, [r7, #6]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	b298      	uxth	r0, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	b29b      	uxth	r3, r3
 800122a:	88ba      	ldrh	r2, [r7, #4]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	b29b      	uxth	r3, r3
 8001230:	883a      	ldrh	r2, [r7, #0]
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff ff0c 	bl	8001050 <LCD_DrawPoint>
        LCD_DrawPoint(x0+b,y0-a,color);             //0           
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	b29a      	uxth	r2, r3
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	4413      	add	r3, r2
 8001240:	b298      	uxth	r0, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	b29b      	uxth	r3, r3
 8001246:	88ba      	ldrh	r2, [r7, #4]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	b29b      	uxth	r3, r3
 800124c:	883a      	ldrh	r2, [r7, #0]
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fefe 	bl	8001050 <LCD_DrawPoint>
        LCD_DrawPoint(x0-a,y0+b,color);             //1                
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	b29b      	uxth	r3, r3
 8001258:	88fa      	ldrh	r2, [r7, #6]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	b298      	uxth	r0, r3
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	b29a      	uxth	r2, r3
 8001262:	88bb      	ldrh	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	883a      	ldrh	r2, [r7, #0]
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fef0 	bl	8001050 <LCD_DrawPoint>
        LCD_DrawPoint(x0-a,y0-b,color);             //2             
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	b29b      	uxth	r3, r3
 8001274:	88fa      	ldrh	r2, [r7, #6]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	b298      	uxth	r0, r3
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	b29b      	uxth	r3, r3
 800127e:	88ba      	ldrh	r2, [r7, #4]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	b29b      	uxth	r3, r3
 8001284:	883a      	ldrh	r2, [r7, #0]
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fee2 	bl	8001050 <LCD_DrawPoint>
        LCD_DrawPoint(x0+b,y0+a,color);             //4               
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	b29a      	uxth	r2, r3
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	4413      	add	r3, r2
 8001294:	b298      	uxth	r0, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	b29a      	uxth	r2, r3
 800129a:	88bb      	ldrh	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	b29b      	uxth	r3, r3
 80012a0:	883a      	ldrh	r2, [r7, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	f7ff fed4 	bl	8001050 <LCD_DrawPoint>
        LCD_DrawPoint(x0+a,y0-b,color);             //5
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	4413      	add	r3, r2
 80012b0:	b298      	uxth	r0, r3
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	88ba      	ldrh	r2, [r7, #4]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	883a      	ldrh	r2, [r7, #0]
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fec6 	bl	8001050 <LCD_DrawPoint>
        LCD_DrawPoint(x0+a,y0+b,color);             //6 
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	4413      	add	r3, r2
 80012cc:	b298      	uxth	r0, r3
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	88bb      	ldrh	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	883a      	ldrh	r2, [r7, #0]
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff feb8 	bl	8001050 <LCD_DrawPoint>
        LCD_DrawPoint(x0-b,y0+a,color);             //7
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	88fa      	ldrh	r2, [r7, #6]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	b298      	uxth	r0, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	88bb      	ldrh	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	883a      	ldrh	r2, [r7, #0]
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff feaa 	bl	8001050 <LCD_DrawPoint>
        a++;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3301      	adds	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
        if((a*a+b*b)>(r*r))//判断要画的点是否过远
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	fb03 f203 	mul.w	r2, r3, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	fb03 f303 	mul.w	r3, r3, r3
 800130e:	441a      	add	r2, r3
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	78f9      	ldrb	r1, [r7, #3]
 8001314:	fb01 f303 	mul.w	r3, r1, r3
 8001318:	429a      	cmp	r2, r3
 800131a:	dd02      	ble.n	8001322 <Draw_Circle+0x12e>
        {
            b--;
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	3b01      	subs	r3, #1
 8001320:	60bb      	str	r3, [r7, #8]
    while(a<=b)
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	429a      	cmp	r2, r3
 8001328:	f77f af78 	ble.w	800121c <Draw_Circle+0x28>
        }
    }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bd90      	pop	{r4, r7, pc}
	...

08001338 <LCD_ShowChar>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowChar(u16 x,u16 y,u8 num,u16 font_color,u16 back_color,u8 sizey,u8 mode)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	4604      	mov	r4, r0
 8001340:	4608      	mov	r0, r1
 8001342:	4611      	mov	r1, r2
 8001344:	461a      	mov	r2, r3
 8001346:	4623      	mov	r3, r4
 8001348:	80fb      	strh	r3, [r7, #6]
 800134a:	4603      	mov	r3, r0
 800134c:	80bb      	strh	r3, [r7, #4]
 800134e:	460b      	mov	r3, r1
 8001350:	70fb      	strb	r3, [r7, #3]
 8001352:	4613      	mov	r3, r2
 8001354:	803b      	strh	r3, [r7, #0]
    u8 temp,sizex,t,m=0;
 8001356:	2300      	movs	r3, #0
 8001358:	75bb      	strb	r3, [r7, #22]
    u16 i,TypefaceNum;//一个字符所占字节大小
    u16 x0=x;
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	827b      	strh	r3, [r7, #18]
    sizex=sizey/2;
 800135e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001362:	085b      	lsrs	r3, r3, #1
 8001364:	747b      	strb	r3, [r7, #17]
    TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001366:	7c7b      	ldrb	r3, [r7, #17]
 8001368:	08db      	lsrs	r3, r3, #3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	7c7b      	ldrb	r3, [r7, #17]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	bf14      	ite	ne
 800137a:	2301      	movne	r3, #1
 800137c:	2300      	moveq	r3, #0
 800137e:	b2db      	uxtb	r3, r3
 8001380:	4413      	add	r3, r2
 8001382:	b29a      	uxth	r2, r3
 8001384:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001388:	b29b      	uxth	r3, r3
 800138a:	fb12 f303 	smulbb	r3, r2, r3
 800138e:	81fb      	strh	r3, [r7, #14]
    num=num-' ';    //得到偏移后的值
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	3b20      	subs	r3, #32
 8001394:	70fb      	strb	r3, [r7, #3]
    LCD_Address_Set(x,y,x+sizex-1,y+sizey-1);  //设置光标位置 
 8001396:	7c7b      	ldrb	r3, [r7, #17]
 8001398:	b29a      	uxth	r2, r3
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	4413      	add	r3, r2
 800139e:	b29b      	uxth	r3, r3
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b29c      	uxth	r4, r3
 80013a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	3b01      	subs	r3, #1
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	88b9      	ldrh	r1, [r7, #4]
 80013b6:	88f8      	ldrh	r0, [r7, #6]
 80013b8:	4622      	mov	r2, r4
 80013ba:	f000 fa53 	bl	8001864 <LCD_Address_Set>
    for(i=0;i<TypefaceNum;i++)
 80013be:	2300      	movs	r3, #0
 80013c0:	82bb      	strh	r3, [r7, #20]
 80013c2:	e05c      	b.n	800147e <LCD_ShowChar+0x146>
    { 
        if(sizey==12)temp=ascii_1206[num][i];               //调用6x12字体
 80013c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013c8:	2b0c      	cmp	r3, #12
 80013ca:	d15d      	bne.n	8001488 <LCD_ShowChar+0x150>
 80013cc:	78fa      	ldrb	r2, [r7, #3]
 80013ce:	8ab9      	ldrh	r1, [r7, #20]
 80013d0:	482f      	ldr	r0, [pc, #188]	@ (8001490 <LCD_ShowChar+0x158>)
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4403      	add	r3, r0
 80013dc:	440b      	add	r3, r1
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	737b      	strb	r3, [r7, #13]
//        else if(sizey==16)temp=ascii_1608[num][i];         //调用8x16字体
//        else if(sizey==24)temp=ascii_2412[num][i];         //调用12x24字体
//        else if(sizey==32)temp=ascii_3216[num][i];         //调用16x32字体
        else return;
        for(t=0;t<8;t++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	75fb      	strb	r3, [r7, #23]
 80013e6:	e044      	b.n	8001472 <LCD_ShowChar+0x13a>
        {
            if(!mode)//非叠加模式
 80013e8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d120      	bne.n	8001432 <LCD_ShowChar+0xfa>
            {
                if(temp&(0x01<<t))LCD_WR_DATA(font_color);
 80013f0:	7b7a      	ldrb	r2, [r7, #13]
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
 80013f4:	fa42 f303 	asr.w	r3, r2, r3
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d004      	beq.n	800140a <LCD_ShowChar+0xd2>
 8001400:	883b      	ldrh	r3, [r7, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f9ff 	bl	8001806 <LCD_WR_DATA>
 8001408:	e003      	b.n	8001412 <LCD_ShowChar+0xda>
                else LCD_WR_DATA(back_color);
 800140a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f9fa 	bl	8001806 <LCD_WR_DATA>
                m++;
 8001412:	7dbb      	ldrb	r3, [r7, #22]
 8001414:	3301      	adds	r3, #1
 8001416:	75bb      	strb	r3, [r7, #22]
                if(m%sizex==0)
 8001418:	7dbb      	ldrb	r3, [r7, #22]
 800141a:	7c7a      	ldrb	r2, [r7, #17]
 800141c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001420:	fb01 f202 	mul.w	r2, r1, r2
 8001424:	1a9b      	subs	r3, r3, r2
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d11f      	bne.n	800146c <LCD_ShowChar+0x134>
                {
                    m=0;
 800142c:	2300      	movs	r3, #0
 800142e:	75bb      	strb	r3, [r7, #22]
                    break;
 8001430:	e022      	b.n	8001478 <LCD_ShowChar+0x140>
                }
            }
            else//叠加模式
            {
                if(temp&(0x01<<t))LCD_DrawPoint(x,y,font_color);//画一个点
 8001432:	7b7a      	ldrb	r2, [r7, #13]
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	fa42 f303 	asr.w	r3, r2, r3
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <LCD_ShowChar+0x116>
 8001442:	883a      	ldrh	r2, [r7, #0]
 8001444:	88b9      	ldrh	r1, [r7, #4]
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fe01 	bl	8001050 <LCD_DrawPoint>
                x++;
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	3301      	adds	r3, #1
 8001452:	80fb      	strh	r3, [r7, #6]
                if((x-x0)==sizex)
 8001454:	88fa      	ldrh	r2, [r7, #6]
 8001456:	8a7b      	ldrh	r3, [r7, #18]
 8001458:	1ad2      	subs	r2, r2, r3
 800145a:	7c7b      	ldrb	r3, [r7, #17]
 800145c:	429a      	cmp	r2, r3
 800145e:	d105      	bne.n	800146c <LCD_ShowChar+0x134>
                {
                    x=x0;
 8001460:	8a7b      	ldrh	r3, [r7, #18]
 8001462:	80fb      	strh	r3, [r7, #6]
                    y++;
 8001464:	88bb      	ldrh	r3, [r7, #4]
 8001466:	3301      	adds	r3, #1
 8001468:	80bb      	strh	r3, [r7, #4]
                    break;
 800146a:	e005      	b.n	8001478 <LCD_ShowChar+0x140>
        for(t=0;t<8;t++)
 800146c:	7dfb      	ldrb	r3, [r7, #23]
 800146e:	3301      	adds	r3, #1
 8001470:	75fb      	strb	r3, [r7, #23]
 8001472:	7dfb      	ldrb	r3, [r7, #23]
 8001474:	2b07      	cmp	r3, #7
 8001476:	d9b7      	bls.n	80013e8 <LCD_ShowChar+0xb0>
    for(i=0;i<TypefaceNum;i++)
 8001478:	8abb      	ldrh	r3, [r7, #20]
 800147a:	3301      	adds	r3, #1
 800147c:	82bb      	strh	r3, [r7, #20]
 800147e:	8aba      	ldrh	r2, [r7, #20]
 8001480:	89fb      	ldrh	r3, [r7, #14]
 8001482:	429a      	cmp	r2, r3
 8001484:	d39e      	bcc.n	80013c4 <LCD_ShowChar+0x8c>
 8001486:	e000      	b.n	800148a <LCD_ShowChar+0x152>
        else return;
 8001488:	bf00      	nop
                }
            }
        }
    }              
}
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd90      	pop	{r4, r7, pc}
 8001490:	0800b03c 	.word	0x0800b03c

08001494 <LCD_ShowString>:
                sizey 字号
                mode:  0非叠加模式  1叠加模式
      返回值：  无
******************************************************************************/
void LCD_ShowString(u16 x,u16 y,const u8 *p,u16 font_color,u16 back_color,u8 sizey,u8 mode)
{         
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b089      	sub	sp, #36	@ 0x24
 8001498:	af04      	add	r7, sp, #16
 800149a:	60ba      	str	r2, [r7, #8]
 800149c:	461a      	mov	r2, r3
 800149e:	4603      	mov	r3, r0
 80014a0:	81fb      	strh	r3, [r7, #14]
 80014a2:	460b      	mov	r3, r1
 80014a4:	81bb      	strh	r3, [r7, #12]
 80014a6:	4613      	mov	r3, r2
 80014a8:	80fb      	strh	r3, [r7, #6]
    while(*p!='\0')
 80014aa:	e01a      	b.n	80014e2 <LCD_ShowString+0x4e>
    {       
        LCD_ShowChar(x,y,*p,font_color,back_color,sizey,mode);
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	781a      	ldrb	r2, [r3, #0]
 80014b0:	88fc      	ldrh	r4, [r7, #6]
 80014b2:	89b9      	ldrh	r1, [r7, #12]
 80014b4:	89f8      	ldrh	r0, [r7, #14]
 80014b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80014ba:	9302      	str	r3, [sp, #8]
 80014bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	8c3b      	ldrh	r3, [r7, #32]
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	4623      	mov	r3, r4
 80014c8:	f7ff ff36 	bl	8001338 <LCD_ShowChar>
        x+=sizey/2;
 80014cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80014d0:	085b      	lsrs	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	89fb      	ldrh	r3, [r7, #14]
 80014d8:	4413      	add	r3, r2
 80014da:	81fb      	strh	r3, [r7, #14]
        p++;
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	3301      	adds	r3, #1
 80014e0:	60bb      	str	r3, [r7, #8]
    while(*p!='\0')
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1e0      	bne.n	80014ac <LCD_ShowString+0x18>
    }  
}
 80014ea:	bf00      	nop
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd90      	pop	{r4, r7, pc}

080014f4 <mypow>:
      函数说明：显示数字
      入口数据：m底数，n指数
      返回值：  无
******************************************************************************/
u32 mypow(u8 m,u8 n)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	460a      	mov	r2, r1
 80014fe:	71fb      	strb	r3, [r7, #7]
 8001500:	4613      	mov	r3, r2
 8001502:	71bb      	strb	r3, [r7, #6]
    u32 result=1;     
 8001504:	2301      	movs	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
    while(n--)result*=m;
 8001508:	e004      	b.n	8001514 <mypow+0x20>
 800150a:	79fa      	ldrb	r2, [r7, #7]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	1e5a      	subs	r2, r3, #1
 8001518:	71ba      	strb	r2, [r7, #6]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f5      	bne.n	800150a <mypow+0x16>
    return result;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LCD_ShowFloatNum1>:
                bc 字的背景色
                sizey 字号
      返回值：  无
******************************************************************************/
void LCD_ShowFloatNum1(u16 x,u16 y,float num,u8 len,u16 font_color,u16 back_color,u8 sizey)
{             
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b08b      	sub	sp, #44	@ 0x2c
 8001530:	af04      	add	r7, sp, #16
 8001532:	4604      	mov	r4, r0
 8001534:	4608      	mov	r0, r1
 8001536:	ed87 0a02 	vstr	s0, [r7, #8]
 800153a:	4611      	mov	r1, r2
 800153c:	461a      	mov	r2, r3
 800153e:	4623      	mov	r3, r4
 8001540:	81fb      	strh	r3, [r7, #14]
 8001542:	4603      	mov	r3, r0
 8001544:	81bb      	strh	r3, [r7, #12]
 8001546:	460b      	mov	r3, r1
 8001548:	71fb      	strb	r3, [r7, #7]
 800154a:	4613      	mov	r3, r2
 800154c:	80bb      	strh	r3, [r7, #4]
    u8 t,temp,sizex;
    u16 num1;
    sizex=sizey/2;
 800154e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001552:	085b      	lsrs	r3, r3, #1
 8001554:	75bb      	strb	r3, [r7, #22]
    num1=num*100;
 8001556:	edd7 7a02 	vldr	s15, [r7, #8]
 800155a:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001634 <LCD_ShowFloatNum1+0x108>
 800155e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001566:	ee17 3a90 	vmov	r3, s15
 800156a:	82bb      	strh	r3, [r7, #20]
    for(t=0;t<len;t++)
 800156c:	2300      	movs	r3, #0
 800156e:	75fb      	strb	r3, [r7, #23]
 8001570:	e057      	b.n	8001622 <LCD_ShowFloatNum1+0xf6>
    {
        temp=(num1/mypow(10,len-t-1))%10;
 8001572:	8abc      	ldrh	r4, [r7, #20]
 8001574:	79fa      	ldrb	r2, [r7, #7]
 8001576:	7dfb      	ldrb	r3, [r7, #23]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3b01      	subs	r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4619      	mov	r1, r3
 8001582:	200a      	movs	r0, #10
 8001584:	f7ff ffb6 	bl	80014f4 <mypow>
 8001588:	4603      	mov	r3, r0
 800158a:	fbb4 f1f3 	udiv	r1, r4, r3
 800158e:	4b2a      	ldr	r3, [pc, #168]	@ (8001638 <LCD_ShowFloatNum1+0x10c>)
 8001590:	fba3 2301 	umull	r2, r3, r3, r1
 8001594:	08da      	lsrs	r2, r3, #3
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	1aca      	subs	r2, r1, r3
 80015a0:	4613      	mov	r3, r2
 80015a2:	74fb      	strb	r3, [r7, #19]
        if(t==(len-2))
 80015a4:	7dfa      	ldrb	r2, [r7, #23]
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	3b02      	subs	r3, #2
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d11d      	bne.n	80015ea <LCD_ShowFloatNum1+0xbe>
        {
            LCD_ShowChar(x+(len-2)*sizex,y,'.',font_color,back_color,sizey,0);
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	3b02      	subs	r3, #2
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	7dbb      	ldrb	r3, [r7, #22]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	fb12 f303 	smulbb	r3, r2, r3
 80015bc:	b29a      	uxth	r2, r3
 80015be:	89fb      	ldrh	r3, [r7, #14]
 80015c0:	4413      	add	r3, r2
 80015c2:	b298      	uxth	r0, r3
 80015c4:	88ba      	ldrh	r2, [r7, #4]
 80015c6:	89b9      	ldrh	r1, [r7, #12]
 80015c8:	2300      	movs	r3, #0
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	4613      	mov	r3, r2
 80015d8:	222e      	movs	r2, #46	@ 0x2e
 80015da:	f7ff fead 	bl	8001338 <LCD_ShowChar>
            t++;
 80015de:	7dfb      	ldrb	r3, [r7, #23]
 80015e0:	3301      	adds	r3, #1
 80015e2:	75fb      	strb	r3, [r7, #23]
            len+=1;
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	3301      	adds	r3, #1
 80015e8:	71fb      	strb	r3, [r7, #7]
        }
         LCD_ShowChar(x+t*sizex,y,temp+48,font_color,back_color,sizey,0);
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	7dbb      	ldrb	r3, [r7, #22]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	fb12 f303 	smulbb	r3, r2, r3
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	89fb      	ldrh	r3, [r7, #14]
 80015fa:	4413      	add	r3, r2
 80015fc:	b298      	uxth	r0, r3
 80015fe:	7cfb      	ldrb	r3, [r7, #19]
 8001600:	3330      	adds	r3, #48	@ 0x30
 8001602:	b2da      	uxtb	r2, r3
 8001604:	88bc      	ldrh	r4, [r7, #4]
 8001606:	89b9      	ldrh	r1, [r7, #12]
 8001608:	2300      	movs	r3, #0
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	4623      	mov	r3, r4
 8001618:	f7ff fe8e 	bl	8001338 <LCD_ShowChar>
    for(t=0;t<len;t++)
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	3301      	adds	r3, #1
 8001620:	75fb      	strb	r3, [r7, #23]
 8001622:	7dfa      	ldrb	r2, [r7, #23]
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	429a      	cmp	r2, r3
 8001628:	d3a3      	bcc.n	8001572 <LCD_ShowFloatNum1+0x46>
    }
}
 800162a:	bf00      	nop
 800162c:	bf00      	nop
 800162e:	371c      	adds	r7, #28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd90      	pop	{r4, r7, pc}
 8001634:	42c80000 	.word	0x42c80000
 8001638:	cccccccd 	.word	0xcccccccd

0800163c <LCD_ShowChinese>:
 * @param   ch —— 汉字编号
 * @param   size —— 汉字大小，支持16、24、32（可在font字库中自由添加）
 * @return  none
 */
void LCD_ShowChinese(u16 x, u16 y, char ch, u16 font_color, u16 back_color, u8 font_size)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b089      	sub	sp, #36	@ 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	4604      	mov	r4, r0
 8001644:	4608      	mov	r0, r1
 8001646:	4611      	mov	r1, r2
 8001648:	461a      	mov	r2, r3
 800164a:	4623      	mov	r3, r4
 800164c:	80fb      	strh	r3, [r7, #6]
 800164e:	4603      	mov	r3, r0
 8001650:	80bb      	strh	r3, [r7, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	70fb      	strb	r3, [r7, #3]
 8001656:	4613      	mov	r3, r2
 8001658:	803b      	strh	r3, [r7, #0]
    u16 x_pos, y_pos, size, font_width, font_height;
    u8 *font_ptr;
    u8 bit_width, temp;
    
        //检查是否越界
    if((x > (LCD_W - font_size)) || (y > (LCD_H - font_size)))    
 800165a:	88fa      	ldrh	r2, [r7, #6]
 800165c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001660:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001664:	429a      	cmp	r2, r3
 8001666:	dc78      	bgt.n	800175a <LCD_ShowChinese+0x11e>
 8001668:	88ba      	ldrh	r2, [r7, #4]
 800166a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800166e:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8001672:	429a      	cmp	r2, r3
 8001674:	dc71      	bgt.n	800175a <LCD_ShowChinese+0x11e>
        {
        return;
    }
    
    x_pos = x;
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	837b      	strh	r3, [r7, #26]
    y_pos = y;
 800167a:	88bb      	ldrh	r3, [r7, #4]
 800167c:	833b      	strh	r3, [r7, #24]
    font_height = font_size;
 800167e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001682:	823b      	strh	r3, [r7, #16]
    font_width = font_size;
 8001684:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001688:	81fb      	strh	r3, [r7, #14]
    bit_width = 8;
 800168a:	2308      	movs	r3, #8
 800168c:	737b      	strb	r3, [r7, #13]
        
    size = (font_width / 8 + ((font_width % 8) ? 1 : 0)) * font_height;
 800168e:	89fb      	ldrh	r3, [r7, #14]
 8001690:	08db      	lsrs	r3, r3, #3
 8001692:	b29b      	uxth	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	89fb      	ldrh	r3, [r7, #14]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	b29b      	uxth	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	bf14      	ite	ne
 80016a2:	2301      	movne	r3, #1
 80016a4:	2300      	moveq	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	8a3a      	ldrh	r2, [r7, #16]
 80016ae:	fb12 f303 	smulbb	r3, r2, r3
 80016b2:	817b      	strh	r3, [r7, #10]
    
        switch(font_size)
 80016b4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80016b8:	2b10      	cmp	r3, #16
 80016ba:	d002      	beq.n	80016c2 <LCD_ShowChinese+0x86>
 80016bc:	2b18      	cmp	r3, #24
 80016be:	d006      	beq.n	80016ce <LCD_ShowChinese+0x92>
        {
            case 16: font_ptr = (uint8_t*)&Chinese_16word[ch]; break;
            case 24: font_ptr = (uint8_t*)&Chinese_24word[ch]; break;
//            case 32: font_ptr = (uint8_t*)&Chinese_32word[ch]; break;
            default : break;
 80016c0:	e00e      	b.n	80016e0 <LCD_ShowChinese+0xa4>
            case 16: font_ptr = (uint8_t*)&Chinese_16word[ch]; break;
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	015b      	lsls	r3, r3, #5
 80016c6:	4a27      	ldr	r2, [pc, #156]	@ (8001764 <LCD_ShowChinese+0x128>)
 80016c8:	4413      	add	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e008      	b.n	80016e0 <LCD_ShowChinese+0xa4>
            case 24: font_ptr = (uint8_t*)&Chinese_24word[ch]; break;
 80016ce:	78fa      	ldrb	r2, [r7, #3]
 80016d0:	4613      	mov	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	4413      	add	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4a23      	ldr	r2, [pc, #140]	@ (8001768 <LCD_ShowChinese+0x12c>)
 80016da:	4413      	add	r3, r2
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	bf00      	nop
        }
 
    for (i = 0; i < size; i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	83fb      	strh	r3, [r7, #30]
 80016e4:	e034      	b.n	8001750 <LCD_ShowChinese+0x114>
        {
        temp = *(font_ptr + i);
 80016e6:	8bfb      	ldrh	r3, [r7, #30]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	4413      	add	r3, r2
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	74fb      	strb	r3, [r7, #19]
        for (j = 0; j < bit_width; j++) 
 80016f0:	2300      	movs	r3, #0
 80016f2:	83bb      	strh	r3, [r7, #28]
 80016f4:	e019      	b.n	800172a <LCD_ShowChinese+0xee>
                {
            if(temp & 0x80)
 80016f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	da06      	bge.n	800170c <LCD_ShowChinese+0xd0>
                        {
                LCD_DrawPoint(x_pos, y_pos, font_color);
 80016fe:	883a      	ldrh	r2, [r7, #0]
 8001700:	8b39      	ldrh	r1, [r7, #24]
 8001702:	8b7b      	ldrh	r3, [r7, #26]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fca3 	bl	8001050 <LCD_DrawPoint>
 800170a:	e005      	b.n	8001718 <LCD_ShowChinese+0xdc>
            } 
                        else
                        {
                LCD_DrawPoint(x_pos, y_pos, back_color);
 800170c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800170e:	8b39      	ldrh	r1, [r7, #24]
 8001710:	8b7b      	ldrh	r3, [r7, #26]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fc9c 	bl	8001050 <LCD_DrawPoint>
            }
            temp <<= 1;
 8001718:	7cfb      	ldrb	r3, [r7, #19]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	74fb      	strb	r3, [r7, #19]
            x_pos++;
 800171e:	8b7b      	ldrh	r3, [r7, #26]
 8001720:	3301      	adds	r3, #1
 8001722:	837b      	strh	r3, [r7, #26]
        for (j = 0; j < bit_width; j++) 
 8001724:	8bbb      	ldrh	r3, [r7, #28]
 8001726:	3301      	adds	r3, #1
 8001728:	83bb      	strh	r3, [r7, #28]
 800172a:	7b7b      	ldrb	r3, [r7, #13]
 800172c:	b29b      	uxth	r3, r3
 800172e:	8bba      	ldrh	r2, [r7, #28]
 8001730:	429a      	cmp	r2, r3
 8001732:	d3e0      	bcc.n	80016f6 <LCD_ShowChinese+0xba>
        }
        if (x_pos >= (x + font_width)) 
 8001734:	8b7a      	ldrh	r2, [r7, #26]
 8001736:	88f9      	ldrh	r1, [r7, #6]
 8001738:	89fb      	ldrh	r3, [r7, #14]
 800173a:	440b      	add	r3, r1
 800173c:	429a      	cmp	r2, r3
 800173e:	db04      	blt.n	800174a <LCD_ShowChinese+0x10e>
                {
            y_pos++;
 8001740:	8b3b      	ldrh	r3, [r7, #24]
 8001742:	3301      	adds	r3, #1
 8001744:	833b      	strh	r3, [r7, #24]
            x_pos = x;
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < size; i++)
 800174a:	8bfb      	ldrh	r3, [r7, #30]
 800174c:	3301      	adds	r3, #1
 800174e:	83fb      	strh	r3, [r7, #30]
 8001750:	8bfa      	ldrh	r2, [r7, #30]
 8001752:	897b      	ldrh	r3, [r7, #10]
 8001754:	429a      	cmp	r2, r3
 8001756:	d3c6      	bcc.n	80016e6 <LCD_ShowChinese+0xaa>
 8001758:	e000      	b.n	800175c <LCD_ShowChinese+0x120>
        return;
 800175a:	bf00      	nop
        }
    }
}
 800175c:	3724      	adds	r7, #36	@ 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}
 8001762:	bf00      	nop
 8001764:	0800b4b0 	.word	0x0800b4b0
 8001768:	0800b570 	.word	0x0800b570

0800176c <LCD_Writ_Bus>:
      函数说明：LCD串行数据写入函数
      入口数据：dat  要写入的串行数据
      返回值：  无
******************************************************************************/
void LCD_Writ_Bus(u8 dat) 
{    
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
    u8 i;
    LCD_CS_Clr();
 8001776:	2200      	movs	r2, #0
 8001778:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800177c:	481a      	ldr	r0, [pc, #104]	@ (80017e8 <LCD_Writ_Bus+0x7c>)
 800177e:	f002 fc23 	bl	8003fc8 <HAL_GPIO_WritePin>
    for(i=0;i<8;i++)
 8001782:	2300      	movs	r3, #0
 8001784:	73fb      	strb	r3, [r7, #15]
 8001786:	e022      	b.n	80017ce <LCD_Writ_Bus+0x62>
    {              
        LCD_SCLK_Clr();
 8001788:	2200      	movs	r2, #0
 800178a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800178e:	4816      	ldr	r0, [pc, #88]	@ (80017e8 <LCD_Writ_Bus+0x7c>)
 8001790:	f002 fc1a 	bl	8003fc8 <HAL_GPIO_WritePin>
        if(dat&0x80)
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	da06      	bge.n	80017aa <LCD_Writ_Bus+0x3e>
        {
           LCD_MOSI_Set();
 800179c:	2201      	movs	r2, #1
 800179e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017a2:	4811      	ldr	r0, [pc, #68]	@ (80017e8 <LCD_Writ_Bus+0x7c>)
 80017a4:	f002 fc10 	bl	8003fc8 <HAL_GPIO_WritePin>
 80017a8:	e005      	b.n	80017b6 <LCD_Writ_Bus+0x4a>
        }
        else
        {
           LCD_MOSI_Clr();
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017b0:	480d      	ldr	r0, [pc, #52]	@ (80017e8 <LCD_Writ_Bus+0x7c>)
 80017b2:	f002 fc09 	bl	8003fc8 <HAL_GPIO_WritePin>
        }
        LCD_SCLK_Set();
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017bc:	480a      	ldr	r0, [pc, #40]	@ (80017e8 <LCD_Writ_Bus+0x7c>)
 80017be:	f002 fc03 	bl	8003fc8 <HAL_GPIO_WritePin>
        dat<<=1;
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	71fb      	strb	r3, [r7, #7]
    for(i=0;i<8;i++)
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	3301      	adds	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	2b07      	cmp	r3, #7
 80017d2:	d9d9      	bls.n	8001788 <LCD_Writ_Bus+0x1c>
    }    
  LCD_CS_Set();    
 80017d4:	2201      	movs	r2, #1
 80017d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017da:	4803      	ldr	r0, [pc, #12]	@ (80017e8 <LCD_Writ_Bus+0x7c>)
 80017dc:	f002 fbf4 	bl	8003fc8 <HAL_GPIO_WritePin>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40020400 	.word	0x40020400

080017ec <LCD_WR_DATA8>:
      函数说明：LCD写入数据
      入口数据：dat 写入的数据
      返回值：  无
******************************************************************************/
void LCD_WR_DATA8(u8 dat)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
    LCD_Writ_Bus(dat);
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ffb7 	bl	800176c <LCD_Writ_Bus>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <LCD_WR_DATA>:
      函数说明：LCD写入数据
      入口数据：dat 写入的数据
      返回值：  无
******************************************************************************/
void LCD_WR_DATA(u16 dat)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	80fb      	strh	r3, [r7, #6]
    LCD_Writ_Bus(dat>>8);
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	b29b      	uxth	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ffa7 	bl	800176c <LCD_Writ_Bus>
    LCD_Writ_Bus(dat);
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ffa2 	bl	800176c <LCD_Writ_Bus>
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <LCD_WR_REG>:
      函数说明：LCD写入命令
      入口数据：dat 写入的命令
      返回值：  无
******************************************************************************/
void LCD_WR_REG(u8 dat)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
    LCD_DC_Clr();//写命令
 800183a:	2200      	movs	r2, #0
 800183c:	2120      	movs	r1, #32
 800183e:	4808      	ldr	r0, [pc, #32]	@ (8001860 <LCD_WR_REG+0x30>)
 8001840:	f002 fbc2 	bl	8003fc8 <HAL_GPIO_WritePin>
    LCD_Writ_Bus(dat);
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff90 	bl	800176c <LCD_Writ_Bus>
    LCD_DC_Set();//写数据
 800184c:	2201      	movs	r2, #1
 800184e:	2120      	movs	r1, #32
 8001850:	4803      	ldr	r0, [pc, #12]	@ (8001860 <LCD_WR_REG+0x30>)
 8001852:	f002 fbb9 	bl	8003fc8 <HAL_GPIO_WritePin>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40020800 	.word	0x40020800

08001864 <LCD_Address_Set>:
      入口数据：x1,x2 设置列的起始和结束地址
                y1,y2 设置行的起始和结束地址
      返回值：  无
******************************************************************************/
void LCD_Address_Set(u16 x1,u16 y1,u16 x2,u16 y2)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4604      	mov	r4, r0
 800186c:	4608      	mov	r0, r1
 800186e:	4611      	mov	r1, r2
 8001870:	461a      	mov	r2, r3
 8001872:	4623      	mov	r3, r4
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	4603      	mov	r3, r0
 8001878:	80bb      	strh	r3, [r7, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	807b      	strh	r3, [r7, #2]
 800187e:	4613      	mov	r3, r2
 8001880:	803b      	strh	r3, [r7, #0]
        LCD_WR_DATA(y2);
        LCD_WR_REG(0x2c);//储存器写
    }
    else if(USE_HORIZONTAL==1)
    {
        LCD_WR_REG(0x2a);//列地址设置
 8001882:	202a      	movs	r0, #42	@ 0x2a
 8001884:	f7ff ffd4 	bl	8001830 <LCD_WR_REG>
        LCD_WR_DATA(x1);
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ffbb 	bl	8001806 <LCD_WR_DATA>
        LCD_WR_DATA(x2);
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ffb7 	bl	8001806 <LCD_WR_DATA>
        LCD_WR_REG(0x2b);//行地址设置
 8001898:	202b      	movs	r0, #43	@ 0x2b
 800189a:	f7ff ffc9 	bl	8001830 <LCD_WR_REG>
        LCD_WR_DATA(y1);
 800189e:	88bb      	ldrh	r3, [r7, #4]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ffb0 	bl	8001806 <LCD_WR_DATA>
        LCD_WR_DATA(y2);
 80018a6:	883b      	ldrh	r3, [r7, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ffac 	bl	8001806 <LCD_WR_DATA>
        LCD_WR_REG(0x2c);//储存器写
 80018ae:	202c      	movs	r0, #44	@ 0x2c
 80018b0:	f7ff ffbe 	bl	8001830 <LCD_WR_REG>
        LCD_WR_REG(0x2b);//行地址设置
        LCD_WR_DATA(y1);
        LCD_WR_DATA(y2);
        LCD_WR_REG(0x2c);//储存器写
    }
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd90      	pop	{r4, r7, pc}

080018bc <LCD_Init>:
 
void LCD_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
//    LCD_GPIO_Init();//初始化GPIO
    
    LCD_RES_Clr();//复位
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018c6:	487d      	ldr	r0, [pc, #500]	@ (8001abc <LCD_Init+0x200>)
 80018c8:	f002 fb7e 	bl	8003fc8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80018cc:	2064      	movs	r0, #100	@ 0x64
 80018ce:	f001 fae9 	bl	8002ea4 <HAL_Delay>
    LCD_RES_Set();
 80018d2:	2201      	movs	r2, #1
 80018d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018d8:	4878      	ldr	r0, [pc, #480]	@ (8001abc <LCD_Init+0x200>)
 80018da:	f002 fb75 	bl	8003fc8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80018de:	2064      	movs	r0, #100	@ 0x64
 80018e0:	f001 fae0 	bl	8002ea4 <HAL_Delay>
    
    LCD_BLK_Set();//打开背光
 80018e4:	2201      	movs	r2, #1
 80018e6:	2102      	movs	r1, #2
 80018e8:	4874      	ldr	r0, [pc, #464]	@ (8001abc <LCD_Init+0x200>)
 80018ea:	f002 fb6d 	bl	8003fc8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80018ee:	2064      	movs	r0, #100	@ 0x64
 80018f0:	f001 fad8 	bl	8002ea4 <HAL_Delay>
    
    //************* Start Initial Sequence **********//
    LCD_WR_REG(0x11); //Sleep out 
 80018f4:	2011      	movs	r0, #17
 80018f6:	f7ff ff9b 	bl	8001830 <LCD_WR_REG>
    HAL_Delay(120);              //Delay 120ms 
 80018fa:	2078      	movs	r0, #120	@ 0x78
 80018fc:	f001 fad2 	bl	8002ea4 <HAL_Delay>
    //------------------------------------ST7735S Frame Rate-----------------------------------------// 
    LCD_WR_REG(0xB1); 
 8001900:	20b1      	movs	r0, #177	@ 0xb1
 8001902:	f7ff ff95 	bl	8001830 <LCD_WR_REG>
    LCD_WR_DATA8(0x05); 
 8001906:	2005      	movs	r0, #5
 8001908:	f7ff ff70 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x3C); 
 800190c:	203c      	movs	r0, #60	@ 0x3c
 800190e:	f7ff ff6d 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x3C); 
 8001912:	203c      	movs	r0, #60	@ 0x3c
 8001914:	f7ff ff6a 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_REG(0xB2); 
 8001918:	20b2      	movs	r0, #178	@ 0xb2
 800191a:	f7ff ff89 	bl	8001830 <LCD_WR_REG>
    LCD_WR_DATA8(0x05);
 800191e:	2005      	movs	r0, #5
 8001920:	f7ff ff64 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x3C); 
 8001924:	203c      	movs	r0, #60	@ 0x3c
 8001926:	f7ff ff61 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x3C); 
 800192a:	203c      	movs	r0, #60	@ 0x3c
 800192c:	f7ff ff5e 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_REG(0xB3); 
 8001930:	20b3      	movs	r0, #179	@ 0xb3
 8001932:	f7ff ff7d 	bl	8001830 <LCD_WR_REG>
    LCD_WR_DATA8(0x05); 
 8001936:	2005      	movs	r0, #5
 8001938:	f7ff ff58 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x3C); 
 800193c:	203c      	movs	r0, #60	@ 0x3c
 800193e:	f7ff ff55 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x3C); 
 8001942:	203c      	movs	r0, #60	@ 0x3c
 8001944:	f7ff ff52 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x05); 
 8001948:	2005      	movs	r0, #5
 800194a:	f7ff ff4f 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x3C); 
 800194e:	203c      	movs	r0, #60	@ 0x3c
 8001950:	f7ff ff4c 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x3C); 
 8001954:	203c      	movs	r0, #60	@ 0x3c
 8001956:	f7ff ff49 	bl	80017ec <LCD_WR_DATA8>
    //------------------------------------End ST7735S Frame Rate---------------------------------// 
    LCD_WR_REG(0xB4); //Dot inversion 
 800195a:	20b4      	movs	r0, #180	@ 0xb4
 800195c:	f7ff ff68 	bl	8001830 <LCD_WR_REG>
    LCD_WR_DATA8(0x03); 
 8001960:	2003      	movs	r0, #3
 8001962:	f7ff ff43 	bl	80017ec <LCD_WR_DATA8>
    //------------------------------------ST7735S Power Sequence---------------------------------// 
    LCD_WR_REG(0xC0); 
 8001966:	20c0      	movs	r0, #192	@ 0xc0
 8001968:	f7ff ff62 	bl	8001830 <LCD_WR_REG>
    LCD_WR_DATA8(0x28); 
 800196c:	2028      	movs	r0, #40	@ 0x28
 800196e:	f7ff ff3d 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x08); 
 8001972:	2008      	movs	r0, #8
 8001974:	f7ff ff3a 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x04); 
 8001978:	2004      	movs	r0, #4
 800197a:	f7ff ff37 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_REG(0xC1); 
 800197e:	20c1      	movs	r0, #193	@ 0xc1
 8001980:	f7ff ff56 	bl	8001830 <LCD_WR_REG>
    LCD_WR_DATA8(0XC0); 
 8001984:	20c0      	movs	r0, #192	@ 0xc0
 8001986:	f7ff ff31 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_REG(0xC2); 
 800198a:	20c2      	movs	r0, #194	@ 0xc2
 800198c:	f7ff ff50 	bl	8001830 <LCD_WR_REG>
    LCD_WR_DATA8(0x0D); 
 8001990:	200d      	movs	r0, #13
 8001992:	f7ff ff2b 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x00); 
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff ff28 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_REG(0xC3); 
 800199c:	20c3      	movs	r0, #195	@ 0xc3
 800199e:	f7ff ff47 	bl	8001830 <LCD_WR_REG>
    LCD_WR_DATA8(0x8D); 
 80019a2:	208d      	movs	r0, #141	@ 0x8d
 80019a4:	f7ff ff22 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x2A); 
 80019a8:	202a      	movs	r0, #42	@ 0x2a
 80019aa:	f7ff ff1f 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_REG(0xC4); 
 80019ae:	20c4      	movs	r0, #196	@ 0xc4
 80019b0:	f7ff ff3e 	bl	8001830 <LCD_WR_REG>
    LCD_WR_DATA8(0x8D); 
 80019b4:	208d      	movs	r0, #141	@ 0x8d
 80019b6:	f7ff ff19 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0xEE); 
 80019ba:	20ee      	movs	r0, #238	@ 0xee
 80019bc:	f7ff ff16 	bl	80017ec <LCD_WR_DATA8>
    //---------------------------------End ST7735S Power Sequence-------------------------------------// 
    LCD_WR_REG(0xC5); //VCOM 
 80019c0:	20c5      	movs	r0, #197	@ 0xc5
 80019c2:	f7ff ff35 	bl	8001830 <LCD_WR_REG>
    LCD_WR_DATA8(0x1A); 
 80019c6:	201a      	movs	r0, #26
 80019c8:	f7ff ff10 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_REG(0x36); //MX, MY, RGB mode 
 80019cc:	2036      	movs	r0, #54	@ 0x36
 80019ce:	f7ff ff2f 	bl	8001830 <LCD_WR_REG>
    if(USE_HORIZONTAL==0)LCD_WR_DATA8(0x00);
    else if(USE_HORIZONTAL==1)LCD_WR_DATA8(0xC0);
 80019d2:	20c0      	movs	r0, #192	@ 0xc0
 80019d4:	f7ff ff0a 	bl	80017ec <LCD_WR_DATA8>
    else if(USE_HORIZONTAL==2)LCD_WR_DATA8(0x70);
    else LCD_WR_DATA8(0xA0); 
    //------------------------------------ST7735S Gamma Sequence---------------------------------// 
    LCD_WR_REG(0xE0); 
 80019d8:	20e0      	movs	r0, #224	@ 0xe0
 80019da:	f7ff ff29 	bl	8001830 <LCD_WR_REG>
    LCD_WR_DATA8(0x04); 
 80019de:	2004      	movs	r0, #4
 80019e0:	f7ff ff04 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x22); 
 80019e4:	2022      	movs	r0, #34	@ 0x22
 80019e6:	f7ff ff01 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x07); 
 80019ea:	2007      	movs	r0, #7
 80019ec:	f7ff fefe 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x0A); 
 80019f0:	200a      	movs	r0, #10
 80019f2:	f7ff fefb 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x2E); 
 80019f6:	202e      	movs	r0, #46	@ 0x2e
 80019f8:	f7ff fef8 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x30); 
 80019fc:	2030      	movs	r0, #48	@ 0x30
 80019fe:	f7ff fef5 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x25); 
 8001a02:	2025      	movs	r0, #37	@ 0x25
 8001a04:	f7ff fef2 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x2A); 
 8001a08:	202a      	movs	r0, #42	@ 0x2a
 8001a0a:	f7ff feef 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x28); 
 8001a0e:	2028      	movs	r0, #40	@ 0x28
 8001a10:	f7ff feec 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x26); 
 8001a14:	2026      	movs	r0, #38	@ 0x26
 8001a16:	f7ff fee9 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x2E); 
 8001a1a:	202e      	movs	r0, #46	@ 0x2e
 8001a1c:	f7ff fee6 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x3A); 
 8001a20:	203a      	movs	r0, #58	@ 0x3a
 8001a22:	f7ff fee3 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x00); 
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff fee0 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x01); 
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f7ff fedd 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x03); 
 8001a32:	2003      	movs	r0, #3
 8001a34:	f7ff feda 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x13); 
 8001a38:	2013      	movs	r0, #19
 8001a3a:	f7ff fed7 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_REG(0xE1); 
 8001a3e:	20e1      	movs	r0, #225	@ 0xe1
 8001a40:	f7ff fef6 	bl	8001830 <LCD_WR_REG>
    LCD_WR_DATA8(0x04); 
 8001a44:	2004      	movs	r0, #4
 8001a46:	f7ff fed1 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x16); 
 8001a4a:	2016      	movs	r0, #22
 8001a4c:	f7ff fece 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x06); 
 8001a50:	2006      	movs	r0, #6
 8001a52:	f7ff fecb 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x0D); 
 8001a56:	200d      	movs	r0, #13
 8001a58:	f7ff fec8 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x2D); 
 8001a5c:	202d      	movs	r0, #45	@ 0x2d
 8001a5e:	f7ff fec5 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x26); 
 8001a62:	2026      	movs	r0, #38	@ 0x26
 8001a64:	f7ff fec2 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x23); 
 8001a68:	2023      	movs	r0, #35	@ 0x23
 8001a6a:	f7ff febf 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x27); 
 8001a6e:	2027      	movs	r0, #39	@ 0x27
 8001a70:	f7ff febc 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x27); 
 8001a74:	2027      	movs	r0, #39	@ 0x27
 8001a76:	f7ff feb9 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x25); 
 8001a7a:	2025      	movs	r0, #37	@ 0x25
 8001a7c:	f7ff feb6 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x2D); 
 8001a80:	202d      	movs	r0, #45	@ 0x2d
 8001a82:	f7ff feb3 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x3B); 
 8001a86:	203b      	movs	r0, #59	@ 0x3b
 8001a88:	f7ff feb0 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x00); 
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f7ff fead 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x01); 
 8001a92:	2001      	movs	r0, #1
 8001a94:	f7ff feaa 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x04); 
 8001a98:	2004      	movs	r0, #4
 8001a9a:	f7ff fea7 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_DATA8(0x13); 
 8001a9e:	2013      	movs	r0, #19
 8001aa0:	f7ff fea4 	bl	80017ec <LCD_WR_DATA8>
    //------------------------------------End ST7735S Gamma Sequence-----------------------------// 
    LCD_WR_REG(0x3A); //65k mode 
 8001aa4:	203a      	movs	r0, #58	@ 0x3a
 8001aa6:	f7ff fec3 	bl	8001830 <LCD_WR_REG>
    LCD_WR_DATA8(0x05); 
 8001aaa:	2005      	movs	r0, #5
 8001aac:	f7ff fe9e 	bl	80017ec <LCD_WR_DATA8>
    LCD_WR_REG(0x29); //Display on 
 8001ab0:	2029      	movs	r0, #41	@ 0x29
 8001ab2:	f7ff febd 	bl	8001830 <LCD_WR_REG>
} 
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40020400 	.word	0x40020400

08001ac0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ad2:	4b21      	ldr	r3, [pc, #132]	@ (8001b58 <MX_ADC1_Init+0x98>)
 8001ad4:	4a21      	ldr	r2, [pc, #132]	@ (8001b5c <MX_ADC1_Init+0x9c>)
 8001ad6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b58 <MX_ADC1_Init+0x98>)
 8001ada:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ade:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b58 <MX_ADC1_Init+0x98>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b58 <MX_ADC1_Init+0x98>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001aec:	4b1a      	ldr	r3, [pc, #104]	@ (8001b58 <MX_ADC1_Init+0x98>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001af2:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <MX_ADC1_Init+0x98>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001afa:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <MX_ADC1_Init+0x98>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b00:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <MX_ADC1_Init+0x98>)
 8001b02:	4a17      	ldr	r2, [pc, #92]	@ (8001b60 <MX_ADC1_Init+0xa0>)
 8001b04:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b06:	4b14      	ldr	r3, [pc, #80]	@ (8001b58 <MX_ADC1_Init+0x98>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <MX_ADC1_Init+0x98>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b12:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <MX_ADC1_Init+0x98>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <MX_ADC1_Init+0x98>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b20:	480d      	ldr	r0, [pc, #52]	@ (8001b58 <MX_ADC1_Init+0x98>)
 8001b22:	f001 f9e3 	bl	8002eec <HAL_ADC_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b2c:	f000 fdc4 	bl	80026b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b30:	2304      	movs	r3, #4
 8001b32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b34:	2301      	movs	r3, #1
 8001b36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	@ (8001b58 <MX_ADC1_Init+0x98>)
 8001b42:	f001 fcd9 	bl	80034f8 <HAL_ADC_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b4c:	f000 fdb4 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200001fc 	.word	0x200001fc
 8001b5c:	40012000 	.word	0x40012000
 8001b60:	0f000001 	.word	0x0f000001

08001b64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	@ 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf0 <HAL_ADC_MspInit+0x8c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d12f      	bne.n	8001be6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <HAL_ADC_MspInit+0x90>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	4a19      	ldr	r2, [pc, #100]	@ (8001bf4 <HAL_ADC_MspInit+0x90>)
 8001b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b96:	4b17      	ldr	r3, [pc, #92]	@ (8001bf4 <HAL_ADC_MspInit+0x90>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <HAL_ADC_MspInit+0x90>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	4a12      	ldr	r2, [pc, #72]	@ (8001bf4 <HAL_ADC_MspInit+0x90>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb2:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <HAL_ADC_MspInit+0x90>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bbe:	2310      	movs	r3, #16
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4809      	ldr	r0, [pc, #36]	@ (8001bf8 <HAL_ADC_MspInit+0x94>)
 8001bd2:	f002 f85d 	bl	8003c90 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2012      	movs	r0, #18
 8001bdc:	f001 ff8f 	bl	8003afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001be0:	2012      	movs	r0, #18
 8001be2:	f001 ffa8 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	@ 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40012000 	.word	0x40012000
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000

08001bfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	@ 0x28
 8001c00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b4c      	ldr	r3, [pc, #304]	@ (8001d48 <MX_GPIO_Init+0x14c>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	4a4b      	ldr	r2, [pc, #300]	@ (8001d48 <MX_GPIO_Init+0x14c>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c22:	4b49      	ldr	r3, [pc, #292]	@ (8001d48 <MX_GPIO_Init+0x14c>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b45      	ldr	r3, [pc, #276]	@ (8001d48 <MX_GPIO_Init+0x14c>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	4a44      	ldr	r2, [pc, #272]	@ (8001d48 <MX_GPIO_Init+0x14c>)
 8001c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3e:	4b42      	ldr	r3, [pc, #264]	@ (8001d48 <MX_GPIO_Init+0x14c>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d48 <MX_GPIO_Init+0x14c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	4a3d      	ldr	r2, [pc, #244]	@ (8001d48 <MX_GPIO_Init+0x14c>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d48 <MX_GPIO_Init+0x14c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	4b37      	ldr	r3, [pc, #220]	@ (8001d48 <MX_GPIO_Init+0x14c>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	4a36      	ldr	r2, [pc, #216]	@ (8001d48 <MX_GPIO_Init+0x14c>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c76:	4b34      	ldr	r3, [pc, #208]	@ (8001d48 <MX_GPIO_Init+0x14c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2122      	movs	r1, #34	@ 0x22
 8001c86:	4831      	ldr	r0, [pc, #196]	@ (8001d4c <MX_GPIO_Init+0x150>)
 8001c88:	f002 f99e 	bl	8003fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2120      	movs	r1, #32
 8001c90:	482f      	ldr	r0, [pc, #188]	@ (8001d50 <MX_GPIO_Init+0x154>)
 8001c92:	f002 f999 	bl	8003fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BLK_Pin|LCD_CS_Pin|LCD_SCLK_Pin|LCD_RES_Pin
 8001c96:	2200      	movs	r2, #0
 8001c98:	f24f 0102 	movw	r1, #61442	@ 0xf002
 8001c9c:	482d      	ldr	r0, [pc, #180]	@ (8001d54 <MX_GPIO_Init+0x158>)
 8001c9e:	f002 f993 	bl	8003fc8 <HAL_GPIO_WritePin>
                          |LCD_MOSI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cac:	2302      	movs	r3, #2
 8001cae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4825      	ldr	r0, [pc, #148]	@ (8001d4c <MX_GPIO_Init+0x150>)
 8001cb8:	f001 ffea 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	481e      	ldr	r0, [pc, #120]	@ (8001d4c <MX_GPIO_Init+0x150>)
 8001cd4:	f001 ffdc 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cd8:	2320      	movs	r3, #32
 8001cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	4817      	ldr	r0, [pc, #92]	@ (8001d4c <MX_GPIO_Init+0x150>)
 8001cf0:	f001 ffce 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4811      	ldr	r0, [pc, #68]	@ (8001d50 <MX_GPIO_Init+0x154>)
 8001d0c:	f001 ffc0 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LCD_BLK_Pin|LCD_CS_Pin|LCD_SCLK_Pin|LCD_RES_Pin
 8001d10:	f24f 0302 	movw	r3, #61442	@ 0xf002
 8001d14:	617b      	str	r3, [r7, #20]
                          |LCD_MOSI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4619      	mov	r1, r3
 8001d28:	480a      	ldr	r0, [pc, #40]	@ (8001d54 <MX_GPIO_Init+0x158>)
 8001d2a:	f001 ffb1 	bl	8003c90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2101      	movs	r1, #1
 8001d32:	2006      	movs	r0, #6
 8001d34:	f001 fee3 	bl	8003afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d38:	2006      	movs	r0, #6
 8001d3a:	f001 fefc 	bl	8003b36 <HAL_NVIC_EnableIRQ>

}
 8001d3e:	bf00      	nop
 8001d40:	3728      	adds	r7, #40	@ 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020400 	.word	0x40020400

08001d58 <draw_lcd0>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void draw_lcd0()
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af04      	add	r7, sp, #16
	if(screen_num == 0 && key_change_flag==1)
 8001d5e:	4b65      	ldr	r3, [pc, #404]	@ (8001ef4 <draw_lcd0+0x19c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 80c2 	bne.w	8001eec <draw_lcd0+0x194>
 8001d68:	4b63      	ldr	r3, [pc, #396]	@ (8001ef8 <draw_lcd0+0x1a0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	f040 80bd 	bne.w	8001eec <draw_lcd0+0x194>
		{
	   LCD_Fill(0,0,128,160,WHITE);
 8001d72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	23a0      	movs	r3, #160	@ 0xa0
 8001d7a:	2280      	movs	r2, #128	@ 0x80
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f7ff f930 	bl	8000fe4 <LCD_Fill>
		sprintf((char*)str,"USER INIRFACE:%d",1);
 8001d84:	2201      	movs	r2, #1
 8001d86:	495d      	ldr	r1, [pc, #372]	@ (8001efc <draw_lcd0+0x1a4>)
 8001d88:	485d      	ldr	r0, [pc, #372]	@ (8001f00 <draw_lcd0+0x1a8>)
 8001d8a:	f005 fc5b 	bl	8007644 <siprintf>
		LCD_ShowString(20,3,str,BLACK,WHITE,12,0);
 8001d8e:	2300      	movs	r3, #0
 8001d90:	9302      	str	r3, [sp, #8]
 8001d92:	230c      	movs	r3, #12
 8001d94:	9301      	str	r3, [sp, #4]
 8001d96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	4a58      	ldr	r2, [pc, #352]	@ (8001f00 <draw_lcd0+0x1a8>)
 8001da0:	2103      	movs	r1, #3
 8001da2:	2014      	movs	r0, #20
 8001da4:	f7ff fb76 	bl	8001494 <LCD_ShowString>
		sprintf((char*)str,"level:%d",0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	4956      	ldr	r1, [pc, #344]	@ (8001f04 <draw_lcd0+0x1ac>)
 8001dac:	4854      	ldr	r0, [pc, #336]	@ (8001f00 <draw_lcd0+0x1a8>)
 8001dae:	f005 fc49 	bl	8007644 <siprintf>
		LCD_ShowString(3,15,str,BLACK,WHITE,12,0);
 8001db2:	2300      	movs	r3, #0
 8001db4:	9302      	str	r3, [sp, #8]
 8001db6:	230c      	movs	r3, #12
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	4a4f      	ldr	r2, [pc, #316]	@ (8001f00 <draw_lcd0+0x1a8>)
 8001dc4:	210f      	movs	r1, #15
 8001dc6:	2003      	movs	r0, #3
 8001dc8:	f7ff fb64 	bl	8001494 <LCD_ShowString>
		sprintf((char*)str,"PWM freq:%dKhz",pwm_freq);
 8001dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8001f08 <draw_lcd0+0x1b0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	494e      	ldr	r1, [pc, #312]	@ (8001f0c <draw_lcd0+0x1b4>)
 8001dd4:	484a      	ldr	r0, [pc, #296]	@ (8001f00 <draw_lcd0+0x1a8>)
 8001dd6:	f005 fc35 	bl	8007644 <siprintf>
		LCD_ShowString(3,27,str,BLACK,WHITE,12,0);
 8001dda:	2300      	movs	r3, #0
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	230c      	movs	r3, #12
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2300      	movs	r3, #0
 8001dea:	4a45      	ldr	r2, [pc, #276]	@ (8001f00 <draw_lcd0+0x1a8>)
 8001dec:	211b      	movs	r1, #27
 8001dee:	2003      	movs	r0, #3
 8001df0:	f7ff fb50 	bl	8001494 <LCD_ShowString>
		sprintf((char*)str,"PWM duty:%d%%",pwm_duty);
 8001df4:	4b46      	ldr	r3, [pc, #280]	@ (8001f10 <draw_lcd0+0x1b8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4946      	ldr	r1, [pc, #280]	@ (8001f14 <draw_lcd0+0x1bc>)
 8001dfc:	4840      	ldr	r0, [pc, #256]	@ (8001f00 <draw_lcd0+0x1a8>)
 8001dfe:	f005 fc21 	bl	8007644 <siprintf>
		LCD_ShowString(3,39,str,BLACK,WHITE,12,0);
 8001e02:	2300      	movs	r3, #0
 8001e04:	9302      	str	r3, [sp, #8]
 8001e06:	230c      	movs	r3, #12
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	2300      	movs	r3, #0
 8001e12:	4a3b      	ldr	r2, [pc, #236]	@ (8001f00 <draw_lcd0+0x1a8>)
 8001e14:	2127      	movs	r1, #39	@ 0x27
 8001e16:	2003      	movs	r0, #3
 8001e18:	f7ff fb3c 	bl	8001494 <LCD_ShowString>
		sprintf((char*)str,"num:%d",student);
 8001e1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f18 <draw_lcd0+0x1c0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	493e      	ldr	r1, [pc, #248]	@ (8001f1c <draw_lcd0+0x1c4>)
 8001e24:	4836      	ldr	r0, [pc, #216]	@ (8001f00 <draw_lcd0+0x1a8>)
 8001e26:	f005 fc0d 	bl	8007644 <siprintf>
		LCD_ShowString(3,51,str,BLACK,WHITE,12,0);
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	9302      	str	r3, [sp, #8]
 8001e2e:	230c      	movs	r3, #12
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	4a31      	ldr	r2, [pc, #196]	@ (8001f00 <draw_lcd0+0x1a8>)
 8001e3c:	2133      	movs	r1, #51	@ 0x33
 8001e3e:	2003      	movs	r0, #3
 8001e40:	f7ff fb28 	bl	8001494 <LCD_ShowString>
		LCD_DrawRectangle(16,63,100,100,YELLOW);
 8001e44:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2364      	movs	r3, #100	@ 0x64
 8001e4c:	2264      	movs	r2, #100	@ 0x64
 8001e4e:	213f      	movs	r1, #63	@ 0x3f
 8001e50:	2010      	movs	r0, #16
 8001e52:	f7ff f998 	bl	8001186 <LCD_DrawRectangle>
		Draw_Circle(64,80,16,MAGENTA);
 8001e56:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	2150      	movs	r1, #80	@ 0x50
 8001e5e:	2040      	movs	r0, #64	@ 0x40
 8001e60:	f7ff f9c8 	bl	80011f4 <Draw_Circle>
		LCD_ShowFloatNum1(8,108,num2,4,RED,GREEN,12);
 8001e64:	4b2e      	ldr	r3, [pc, #184]	@ (8001f20 <draw_lcd0+0x1c8>)
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	230c      	movs	r3, #12
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e78:	2204      	movs	r2, #4
 8001e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7e:	216c      	movs	r1, #108	@ 0x6c
 8001e80:	2008      	movs	r0, #8
 8001e82:	f7ff fb53 	bl	800152c <LCD_ShowFloatNum1>
		LCD_ShowChinese(64,115,2,RED,GREEN,16);
 8001e86:	2310      	movs	r3, #16
 8001e88:	9301      	str	r3, [sp, #4]
 8001e8a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001e94:	2202      	movs	r2, #2
 8001e96:	2173      	movs	r1, #115	@ 0x73
 8001e98:	2040      	movs	r0, #64	@ 0x40
 8001e9a:	f7ff fbcf 	bl	800163c <LCD_ShowChinese>
		LCD_ShowChinese(80,115,3,RED,GREEN,16);
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001eac:	2203      	movs	r2, #3
 8001eae:	2173      	movs	r1, #115	@ 0x73
 8001eb0:	2050      	movs	r0, #80	@ 0x50
 8001eb2:	f7ff fbc3 	bl	800163c <LCD_ShowChinese>
		LCD_ShowChinese(96,115,4,RED,GREEN,16);
 8001eb6:	2310      	movs	r3, #16
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	2173      	movs	r1, #115	@ 0x73
 8001ec8:	2060      	movs	r0, #96	@ 0x60
 8001eca:	f7ff fbb7 	bl	800163c <LCD_ShowChinese>
		LCD_ShowChinese(112,115,5,RED,GREEN,16);
 8001ece:	2310      	movs	r3, #16
 8001ed0:	9301      	str	r3, [sp, #4]
 8001ed2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001edc:	2205      	movs	r2, #5
 8001ede:	2173      	movs	r1, #115	@ 0x73
 8001ee0:	2070      	movs	r0, #112	@ 0x70
 8001ee2:	f7ff fbab 	bl	800163c <LCD_ShowChinese>
		key_change_flag=0;
 8001ee6:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <draw_lcd0+0x1a0>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
		}
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000244 	.word	0x20000244
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	0800aed8 	.word	0x0800aed8
 8001f00:	20000264 	.word	0x20000264
 8001f04:	0800aeec 	.word	0x0800aeec
 8001f08:	20000250 	.word	0x20000250
 8001f0c:	0800aef8 	.word	0x0800aef8
 8001f10:	20000254 	.word	0x20000254
 8001f14:	0800af08 	.word	0x0800af08
 8001f18:	20000004 	.word	0x20000004
 8001f1c:	0800af18 	.word	0x0800af18
 8001f20:	20000008 	.word	0x20000008

08001f24 <draw_lcd1>:

void draw_lcd1()
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af04      	add	r7, sp, #16
	if(screen_num == 1 && key_change_flag==1)
 8001f2a:	4b63      	ldr	r3, [pc, #396]	@ (80020b8 <draw_lcd1+0x194>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	f040 80bf 	bne.w	80020b2 <draw_lcd1+0x18e>
 8001f34:	4b61      	ldr	r3, [pc, #388]	@ (80020bc <draw_lcd1+0x198>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	f040 80ba 	bne.w	80020b2 <draw_lcd1+0x18e>
		{
		LCD_Fill(0,0,128,160,WHITE);
 8001f3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	23a0      	movs	r3, #160	@ 0xa0
 8001f46:	2280      	movs	r2, #128	@ 0x80
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f7ff f84a 	bl	8000fe4 <LCD_Fill>
		sprintf((char*)str,"USER INIRFACE: %d",2);
 8001f50:	2202      	movs	r2, #2
 8001f52:	495b      	ldr	r1, [pc, #364]	@ (80020c0 <draw_lcd1+0x19c>)
 8001f54:	485b      	ldr	r0, [pc, #364]	@ (80020c4 <draw_lcd1+0x1a0>)
 8001f56:	f005 fb75 	bl	8007644 <siprintf>
		LCD_ShowString(20,3,str,BLACK,WHITE,12,0);
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	9302      	str	r3, [sp, #8]
 8001f5e:	230c      	movs	r3, #12
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	4a56      	ldr	r2, [pc, #344]	@ (80020c4 <draw_lcd1+0x1a0>)
 8001f6c:	2103      	movs	r1, #3
 8001f6e:	2014      	movs	r0, #20
 8001f70:	f7ff fa90 	bl	8001494 <LCD_ShowString>
		sprintf((char*)str,"Engine temp: %d",engine_temp);
 8001f74:	4b54      	ldr	r3, [pc, #336]	@ (80020c8 <draw_lcd1+0x1a4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4954      	ldr	r1, [pc, #336]	@ (80020cc <draw_lcd1+0x1a8>)
 8001f7c:	4851      	ldr	r0, [pc, #324]	@ (80020c4 <draw_lcd1+0x1a0>)
 8001f7e:	f005 fb61 	bl	8007644 <siprintf>
		LCD_ShowString(3,15,str,BLACK,WHITE,12,0);
 8001f82:	2300      	movs	r3, #0
 8001f84:	9302      	str	r3, [sp, #8]
 8001f86:	230c      	movs	r3, #12
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2300      	movs	r3, #0
 8001f92:	4a4c      	ldr	r2, [pc, #304]	@ (80020c4 <draw_lcd1+0x1a0>)
 8001f94:	210f      	movs	r1, #15
 8001f96:	2003      	movs	r0, #3
 8001f98:	f7ff fa7c 	bl	8001494 <LCD_ShowString>
		sprintf((char*)str,"Alarm threshold: %d",100);
 8001f9c:	2264      	movs	r2, #100	@ 0x64
 8001f9e:	494c      	ldr	r1, [pc, #304]	@ (80020d0 <draw_lcd1+0x1ac>)
 8001fa0:	4848      	ldr	r0, [pc, #288]	@ (80020c4 <draw_lcd1+0x1a0>)
 8001fa2:	f005 fb4f 	bl	8007644 <siprintf>
		LCD_ShowString(3,27,str,BLACK,WHITE,12,0);
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	9302      	str	r3, [sp, #8]
 8001faa:	230c      	movs	r3, #12
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	4a43      	ldr	r2, [pc, #268]	@ (80020c4 <draw_lcd1+0x1a0>)
 8001fb8:	211b      	movs	r1, #27
 8001fba:	2003      	movs	r0, #3
 8001fbc:	f7ff fa6a 	bl	8001494 <LCD_ShowString>
		sprintf((char*)str,"Alarm flag: NO");
 8001fc0:	4944      	ldr	r1, [pc, #272]	@ (80020d4 <draw_lcd1+0x1b0>)
 8001fc2:	4840      	ldr	r0, [pc, #256]	@ (80020c4 <draw_lcd1+0x1a0>)
 8001fc4:	f005 fb3e 	bl	8007644 <siprintf>
		LCD_ShowString(3,39,str,BLACK,WHITE,12,0);
 8001fc8:	2300      	movs	r3, #0
 8001fca:	9302      	str	r3, [sp, #8]
 8001fcc:	230c      	movs	r3, #12
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	4a3a      	ldr	r2, [pc, #232]	@ (80020c4 <draw_lcd1+0x1a0>)
 8001fda:	2127      	movs	r1, #39	@ 0x27
 8001fdc:	2003      	movs	r0, #3
 8001fde:	f7ff fa59 	bl	8001494 <LCD_ShowString>
		sprintf((char*)str,"num:%d",student);
 8001fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80020d8 <draw_lcd1+0x1b4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	493c      	ldr	r1, [pc, #240]	@ (80020dc <draw_lcd1+0x1b8>)
 8001fea:	4836      	ldr	r0, [pc, #216]	@ (80020c4 <draw_lcd1+0x1a0>)
 8001fec:	f005 fb2a 	bl	8007644 <siprintf>
		LCD_ShowString(3,51,str,BLACK,WHITE,12,0);
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	9302      	str	r3, [sp, #8]
 8001ff4:	230c      	movs	r3, #12
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2300      	movs	r3, #0
 8002000:	4a30      	ldr	r2, [pc, #192]	@ (80020c4 <draw_lcd1+0x1a0>)
 8002002:	2133      	movs	r1, #51	@ 0x33
 8002004:	2003      	movs	r0, #3
 8002006:	f7ff fa45 	bl	8001494 <LCD_ShowString>
		LCD_DrawRectangle(16,63,100,100,YELLOW);
 800200a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2364      	movs	r3, #100	@ 0x64
 8002012:	2264      	movs	r2, #100	@ 0x64
 8002014:	213f      	movs	r1, #63	@ 0x3f
 8002016:	2010      	movs	r0, #16
 8002018:	f7ff f8b5 	bl	8001186 <LCD_DrawRectangle>
		Draw_Circle(64,80,16,MAGENTA);
 800201c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002020:	2210      	movs	r2, #16
 8002022:	2150      	movs	r1, #80	@ 0x50
 8002024:	2040      	movs	r0, #64	@ 0x40
 8002026:	f7ff f8e5 	bl	80011f4 <Draw_Circle>
		LCD_ShowFloatNum1(8,108,num2,4,RED,GREEN,12);
 800202a:	4b2d      	ldr	r3, [pc, #180]	@ (80020e0 <draw_lcd1+0x1bc>)
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	230c      	movs	r3, #12
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800203e:	2204      	movs	r2, #4
 8002040:	eeb0 0a67 	vmov.f32	s0, s15
 8002044:	216c      	movs	r1, #108	@ 0x6c
 8002046:	2008      	movs	r0, #8
 8002048:	f7ff fa70 	bl	800152c <LCD_ShowFloatNum1>
		LCD_ShowChinese(64,115,2,RED,GREEN,16);
 800204c:	2310      	movs	r3, #16
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800205a:	2202      	movs	r2, #2
 800205c:	2173      	movs	r1, #115	@ 0x73
 800205e:	2040      	movs	r0, #64	@ 0x40
 8002060:	f7ff faec 	bl	800163c <LCD_ShowChinese>
		LCD_ShowChinese(80,115,3,RED,GREEN,16);
 8002064:	2310      	movs	r3, #16
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002072:	2203      	movs	r2, #3
 8002074:	2173      	movs	r1, #115	@ 0x73
 8002076:	2050      	movs	r0, #80	@ 0x50
 8002078:	f7ff fae0 	bl	800163c <LCD_ShowChinese>
		LCD_ShowChinese(96,115,4,RED,GREEN,16);
 800207c:	2310      	movs	r3, #16
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800208a:	2204      	movs	r2, #4
 800208c:	2173      	movs	r1, #115	@ 0x73
 800208e:	2060      	movs	r0, #96	@ 0x60
 8002090:	f7ff fad4 	bl	800163c <LCD_ShowChinese>
		LCD_ShowChinese(112,115,5,RED,GREEN,16);
 8002094:	2310      	movs	r3, #16
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80020a2:	2205      	movs	r2, #5
 80020a4:	2173      	movs	r1, #115	@ 0x73
 80020a6:	2070      	movs	r0, #112	@ 0x70
 80020a8:	f7ff fac8 	bl	800163c <LCD_ShowChinese>
		key_change_flag=0;
 80020ac:	4b03      	ldr	r3, [pc, #12]	@ (80020bc <draw_lcd1+0x198>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
		}
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000244 	.word	0x20000244
 80020bc:	20000000 	.word	0x20000000
 80020c0:	0800af20 	.word	0x0800af20
 80020c4:	20000264 	.word	0x20000264
 80020c8:	20000258 	.word	0x20000258
 80020cc:	0800af34 	.word	0x0800af34
 80020d0:	0800af44 	.word	0x0800af44
 80020d4:	0800af58 	.word	0x0800af58
 80020d8:	20000004 	.word	0x20000004
 80020dc:	0800af18 	.word	0x0800af18
 80020e0:	20000008 	.word	0x20000008

080020e4 <pwm_solve>:
		key_change_flag=0;
	}
}

void pwm_solve()
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af04      	add	r7, sp, #16
	if(rx_dat1 == 48 && recive_flag == 1)   //0
 80020ea:	4b84      	ldr	r3, [pc, #528]	@ (80022fc <pwm_solve+0x218>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b30      	cmp	r3, #48	@ 0x30
 80020f0:	d11c      	bne.n	800212c <pwm_solve+0x48>
 80020f2:	4b83      	ldr	r3, [pc, #524]	@ (8002300 <pwm_solve+0x21c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d118      	bne.n	800212c <pwm_solve+0x48>
	{
		//printf("%s\r\n",&rx_dat1);
		recive_flag=0;
 80020fa:	4b81      	ldr	r3, [pc, #516]	@ (8002300 <pwm_solve+0x21c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
		pwm_lcd_flag=1;
 8002100:	4b80      	ldr	r3, [pc, #512]	@ (8002304 <pwm_solve+0x220>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]
		pwm_freq = 0;
 8002106:	4b80      	ldr	r3, [pc, #512]	@ (8002308 <pwm_solve+0x224>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
		pwm_duty = 0;
 800210c:	4b7f      	ldr	r3, [pc, #508]	@ (800230c <pwm_solve+0x228>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,499);
 8002112:	4b7f      	ldr	r3, [pc, #508]	@ (8002310 <pwm_solve+0x22c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800211a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800211c:	4b7c      	ldr	r3, [pc, #496]	@ (8002310 <pwm_solve+0x22c>)
 800211e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002122:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8002124:	4b7a      	ldr	r3, [pc, #488]	@ (8002310 <pwm_solve+0x22c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2200      	movs	r2, #0
 800212a:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	if(rx_dat1 == 49 && recive_flag == 1)   //1
 800212c:	4b73      	ldr	r3, [pc, #460]	@ (80022fc <pwm_solve+0x218>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b31      	cmp	r3, #49	@ 0x31
 8002132:	d11c      	bne.n	800216e <pwm_solve+0x8a>
 8002134:	4b72      	ldr	r3, [pc, #456]	@ (8002300 <pwm_solve+0x21c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d118      	bne.n	800216e <pwm_solve+0x8a>
	{
	//	printf("%s\r\n",&rx_dat1);
		recive_flag=0;
 800213c:	4b70      	ldr	r3, [pc, #448]	@ (8002300 <pwm_solve+0x21c>)
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
		pwm_lcd_flag=1;
 8002142:	4b70      	ldr	r3, [pc, #448]	@ (8002304 <pwm_solve+0x220>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]
		pwm_freq = 1;
 8002148:	4b6f      	ldr	r3, [pc, #444]	@ (8002308 <pwm_solve+0x224>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]
		pwm_duty = 20;
 800214e:	4b6f      	ldr	r3, [pc, #444]	@ (800230c <pwm_solve+0x228>)
 8002150:	2214      	movs	r2, #20
 8002152:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,499);		 //1kHz
 8002154:	4b6e      	ldr	r3, [pc, #440]	@ (8002310 <pwm_solve+0x22c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800215c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800215e:	4b6c      	ldr	r3, [pc, #432]	@ (8002310 <pwm_solve+0x22c>)
 8002160:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002164:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,99);		//20%
 8002166:	4b6a      	ldr	r3, [pc, #424]	@ (8002310 <pwm_solve+0x22c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2263      	movs	r2, #99	@ 0x63
 800216c:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	if(rx_dat1 == 50 && recive_flag == 1)   //2
 800216e:	4b63      	ldr	r3, [pc, #396]	@ (80022fc <pwm_solve+0x218>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b32      	cmp	r3, #50	@ 0x32
 8002174:	d11a      	bne.n	80021ac <pwm_solve+0xc8>
 8002176:	4b62      	ldr	r3, [pc, #392]	@ (8002300 <pwm_solve+0x21c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d116      	bne.n	80021ac <pwm_solve+0xc8>
	{
	//	printf("%s\r\n",&rx_dat1);;
		recive_flag=0;
 800217e:	4b60      	ldr	r3, [pc, #384]	@ (8002300 <pwm_solve+0x21c>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
		pwm_lcd_flag=1;
 8002184:	4b5f      	ldr	r3, [pc, #380]	@ (8002304 <pwm_solve+0x220>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]
		pwm_freq = 2;
 800218a:	4b5f      	ldr	r3, [pc, #380]	@ (8002308 <pwm_solve+0x224>)
 800218c:	2202      	movs	r2, #2
 800218e:	601a      	str	r2, [r3, #0]
		pwm_duty = 40;
 8002190:	4b5e      	ldr	r3, [pc, #376]	@ (800230c <pwm_solve+0x228>)
 8002192:	2228      	movs	r2, #40	@ 0x28
 8002194:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,249);		 //2kHz
 8002196:	4b5e      	ldr	r3, [pc, #376]	@ (8002310 <pwm_solve+0x22c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	22f9      	movs	r2, #249	@ 0xf9
 800219c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800219e:	4b5c      	ldr	r3, [pc, #368]	@ (8002310 <pwm_solve+0x22c>)
 80021a0:	22f9      	movs	r2, #249	@ 0xf9
 80021a2:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,99);		//40%
 80021a4:	4b5a      	ldr	r3, [pc, #360]	@ (8002310 <pwm_solve+0x22c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2263      	movs	r2, #99	@ 0x63
 80021aa:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	if(rx_dat1 == 51 && recive_flag == 1)   //3
 80021ac:	4b53      	ldr	r3, [pc, #332]	@ (80022fc <pwm_solve+0x218>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b33      	cmp	r3, #51	@ 0x33
 80021b2:	d11a      	bne.n	80021ea <pwm_solve+0x106>
 80021b4:	4b52      	ldr	r3, [pc, #328]	@ (8002300 <pwm_solve+0x21c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d116      	bne.n	80021ea <pwm_solve+0x106>
	{
	//	printf("%s\r\n",&rx_dat1);
		recive_flag=0;
 80021bc:	4b50      	ldr	r3, [pc, #320]	@ (8002300 <pwm_solve+0x21c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
		pwm_lcd_flag=1;
 80021c2:	4b50      	ldr	r3, [pc, #320]	@ (8002304 <pwm_solve+0x220>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
		pwm_freq = 5;
 80021c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002308 <pwm_solve+0x224>)
 80021ca:	2205      	movs	r2, #5
 80021cc:	601a      	str	r2, [r3, #0]
		pwm_duty = 50;
 80021ce:	4b4f      	ldr	r3, [pc, #316]	@ (800230c <pwm_solve+0x228>)
 80021d0:	2232      	movs	r2, #50	@ 0x32
 80021d2:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,99);     //5kHz
 80021d4:	4b4e      	ldr	r3, [pc, #312]	@ (8002310 <pwm_solve+0x22c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2263      	movs	r2, #99	@ 0x63
 80021da:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002310 <pwm_solve+0x22c>)
 80021de:	2263      	movs	r2, #99	@ 0x63
 80021e0:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,49);		//50%
 80021e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002310 <pwm_solve+0x22c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2231      	movs	r2, #49	@ 0x31
 80021e8:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	if(rx_dat1 == 52 && recive_flag == 1)   //4
 80021ea:	4b44      	ldr	r3, [pc, #272]	@ (80022fc <pwm_solve+0x218>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b34      	cmp	r3, #52	@ 0x34
 80021f0:	d11a      	bne.n	8002228 <pwm_solve+0x144>
 80021f2:	4b43      	ldr	r3, [pc, #268]	@ (8002300 <pwm_solve+0x21c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d116      	bne.n	8002228 <pwm_solve+0x144>
	{
	//	printf("%s\r\n",&rx_dat1);
		recive_flag=0;
 80021fa:	4b41      	ldr	r3, [pc, #260]	@ (8002300 <pwm_solve+0x21c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
		pwm_lcd_flag=1;
 8002200:	4b40      	ldr	r3, [pc, #256]	@ (8002304 <pwm_solve+0x220>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]
		pwm_freq = 10;
 8002206:	4b40      	ldr	r3, [pc, #256]	@ (8002308 <pwm_solve+0x224>)
 8002208:	220a      	movs	r2, #10
 800220a:	601a      	str	r2, [r3, #0]
		pwm_duty = 80;
 800220c:	4b3f      	ldr	r3, [pc, #252]	@ (800230c <pwm_solve+0x228>)
 800220e:	2250      	movs	r2, #80	@ 0x50
 8002210:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,49);     //10kHz
 8002212:	4b3f      	ldr	r3, [pc, #252]	@ (8002310 <pwm_solve+0x22c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2231      	movs	r2, #49	@ 0x31
 8002218:	62da      	str	r2, [r3, #44]	@ 0x2c
 800221a:	4b3d      	ldr	r3, [pc, #244]	@ (8002310 <pwm_solve+0x22c>)
 800221c:	2231      	movs	r2, #49	@ 0x31
 800221e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,39);		//80%
 8002220:	4b3b      	ldr	r3, [pc, #236]	@ (8002310 <pwm_solve+0x22c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2227      	movs	r2, #39	@ 0x27
 8002226:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	if(rx_dat1 == 53 && recive_flag == 1)   //5
 8002228:	4b34      	ldr	r3, [pc, #208]	@ (80022fc <pwm_solve+0x218>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b35      	cmp	r3, #53	@ 0x35
 800222e:	d11a      	bne.n	8002266 <pwm_solve+0x182>
 8002230:	4b33      	ldr	r3, [pc, #204]	@ (8002300 <pwm_solve+0x21c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d116      	bne.n	8002266 <pwm_solve+0x182>
	{
		//printf("%s\r\n",&rx_dat1);
		recive_flag=0;
 8002238:	4b31      	ldr	r3, [pc, #196]	@ (8002300 <pwm_solve+0x21c>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
		pwm_lcd_flag=1;
 800223e:	4b31      	ldr	r3, [pc, #196]	@ (8002304 <pwm_solve+0x220>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]
		pwm_freq = 50;
 8002244:	4b30      	ldr	r3, [pc, #192]	@ (8002308 <pwm_solve+0x224>)
 8002246:	2232      	movs	r2, #50	@ 0x32
 8002248:	601a      	str	r2, [r3, #0]
		pwm_duty = 90;
 800224a:	4b30      	ldr	r3, [pc, #192]	@ (800230c <pwm_solve+0x228>)
 800224c:	225a      	movs	r2, #90	@ 0x5a
 800224e:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,9);	 		 //50kHz
 8002250:	4b2f      	ldr	r3, [pc, #188]	@ (8002310 <pwm_solve+0x22c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2209      	movs	r2, #9
 8002256:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002258:	4b2d      	ldr	r3, [pc, #180]	@ (8002310 <pwm_solve+0x22c>)
 800225a:	2209      	movs	r2, #9
 800225c:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,9);		//90%
 800225e:	4b2c      	ldr	r3, [pc, #176]	@ (8002310 <pwm_solve+0x22c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2209      	movs	r2, #9
 8002264:	635a      	str	r2, [r3, #52]	@ 0x34
	}

		if (screen_num == 0 && pwm_lcd_flag == 1)
 8002266:	4b2b      	ldr	r3, [pc, #172]	@ (8002314 <pwm_solve+0x230>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d142      	bne.n	80022f4 <pwm_solve+0x210>
 800226e:	4b25      	ldr	r3, [pc, #148]	@ (8002304 <pwm_solve+0x220>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d13e      	bne.n	80022f4 <pwm_solve+0x210>
	{
		pwm_lcd_flag = 0;
 8002276:	4b23      	ldr	r3, [pc, #140]	@ (8002304 <pwm_solve+0x220>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
		sprintf((char*)str,"level:%c       ",rx_dat1);
 800227c:	4b1f      	ldr	r3, [pc, #124]	@ (80022fc <pwm_solve+0x218>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4925      	ldr	r1, [pc, #148]	@ (8002318 <pwm_solve+0x234>)
 8002284:	4825      	ldr	r0, [pc, #148]	@ (800231c <pwm_solve+0x238>)
 8002286:	f005 f9dd 	bl	8007644 <siprintf>
		LCD_ShowString(3, 15, str, BLACK, WHITE, 12, 0);
 800228a:	2300      	movs	r3, #0
 800228c:	9302      	str	r3, [sp, #8]
 800228e:	230c      	movs	r3, #12
 8002290:	9301      	str	r3, [sp, #4]
 8002292:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2300      	movs	r3, #0
 800229a:	4a20      	ldr	r2, [pc, #128]	@ (800231c <pwm_solve+0x238>)
 800229c:	210f      	movs	r1, #15
 800229e:	2003      	movs	r0, #3
 80022a0:	f7ff f8f8 	bl	8001494 <LCD_ShowString>
		sprintf((char*)str,"PWM freq:%dKHz    ",pwm_freq);
 80022a4:	4b18      	ldr	r3, [pc, #96]	@ (8002308 <pwm_solve+0x224>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	491d      	ldr	r1, [pc, #116]	@ (8002320 <pwm_solve+0x23c>)
 80022ac:	481b      	ldr	r0, [pc, #108]	@ (800231c <pwm_solve+0x238>)
 80022ae:	f005 f9c9 	bl	8007644 <siprintf>
		LCD_ShowString(3,27,str,BLACK,WHITE,12,0);
 80022b2:	2300      	movs	r3, #0
 80022b4:	9302      	str	r3, [sp, #8]
 80022b6:	230c      	movs	r3, #12
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2300      	movs	r3, #0
 80022c2:	4a16      	ldr	r2, [pc, #88]	@ (800231c <pwm_solve+0x238>)
 80022c4:	211b      	movs	r1, #27
 80022c6:	2003      	movs	r0, #3
 80022c8:	f7ff f8e4 	bl	8001494 <LCD_ShowString>
		sprintf((char*)str,"PWM duty:%d%%     ",pwm_duty);
 80022cc:	4b0f      	ldr	r3, [pc, #60]	@ (800230c <pwm_solve+0x228>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	4914      	ldr	r1, [pc, #80]	@ (8002324 <pwm_solve+0x240>)
 80022d4:	4811      	ldr	r0, [pc, #68]	@ (800231c <pwm_solve+0x238>)
 80022d6:	f005 f9b5 	bl	8007644 <siprintf>
		LCD_ShowString(3,39,str,BLACK,WHITE,12,0);
 80022da:	2300      	movs	r3, #0
 80022dc:	9302      	str	r3, [sp, #8]
 80022de:	230c      	movs	r3, #12
 80022e0:	9301      	str	r3, [sp, #4]
 80022e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a0c      	ldr	r2, [pc, #48]	@ (800231c <pwm_solve+0x238>)
 80022ec:	2127      	movs	r1, #39	@ 0x27
 80022ee:	2003      	movs	r0, #3
 80022f0:	f7ff f8d0 	bl	8001494 <LCD_ShowString>
	}
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000296 	.word	0x20000296
 8002300:	20000248 	.word	0x20000248
 8002304:	2000024c 	.word	0x2000024c
 8002308:	20000250 	.word	0x20000250
 800230c:	20000254 	.word	0x20000254
 8002310:	2000029c 	.word	0x2000029c
 8002314:	20000244 	.word	0x20000244
 8002318:	0800af94 	.word	0x0800af94
 800231c:	20000264 	.word	0x20000264
 8002320:	0800afa4 	.word	0x0800afa4
 8002324:	0800afb8 	.word	0x0800afb8

08002328 <adc_solve>:

void adc_solve()
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af04      	add	r7, sp, #16
	HAL_ADC_Start(&hadc1);
 800232e:	4841      	ldr	r0, [pc, #260]	@ (8002434 <adc_solve+0x10c>)
 8002330:	f000 fe20 	bl	8002f74 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1,10) == HAL_OK)
 8002334:	210a      	movs	r1, #10
 8002336:	483f      	ldr	r0, [pc, #252]	@ (8002434 <adc_solve+0x10c>)
 8002338:	f000 ff21 	bl	800317e <HAL_ADC_PollForConversion>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d171      	bne.n	8002426 <adc_solve+0xfe>
	{
		ADC_Value = HAL_ADC_GetValue(&hadc1);
 8002342:	483c      	ldr	r0, [pc, #240]	@ (8002434 <adc_solve+0x10c>)
 8002344:	f001 f8b6 	bl	80034b4 <HAL_ADC_GetValue>
 8002348:	4603      	mov	r3, r0
 800234a:	b29a      	uxth	r2, r3
 800234c:	4b3a      	ldr	r3, [pc, #232]	@ (8002438 <adc_solve+0x110>)
 800234e:	801a      	strh	r2, [r3, #0]
//		ADC_Volt = ADC_Value * 330/4096;
		engine_temp =  (ADC_Value/29)+20;
 8002350:	4b39      	ldr	r3, [pc, #228]	@ (8002438 <adc_solve+0x110>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	4a39      	ldr	r2, [pc, #228]	@ (800243c <adc_solve+0x114>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	091b      	lsrs	r3, r3, #4
 800235c:	b29b      	uxth	r3, r3
 800235e:	3314      	adds	r3, #20
 8002360:	461a      	mov	r2, r3
 8002362:	4b37      	ldr	r3, [pc, #220]	@ (8002440 <adc_solve+0x118>)
 8002364:	601a      	str	r2, [r3, #0]

			if(engine_temp>100)
 8002366:	4b36      	ldr	r3, [pc, #216]	@ (8002440 <adc_solve+0x118>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b64      	cmp	r3, #100	@ 0x64
 800236c:	d92b      	bls.n	80023c6 <adc_solve+0x9e>
			{
				Alarm_flag =1;
 800236e:	4b35      	ldr	r3, [pc, #212]	@ (8002444 <adc_solve+0x11c>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]
				if(screen_num == 1)
 8002374:	4b34      	ldr	r3, [pc, #208]	@ (8002448 <adc_solve+0x120>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d124      	bne.n	80023c6 <adc_solve+0x9e>
				{
					sprintf((char*)str,"Engine temp:%d ",engine_temp);
 800237c:	4b30      	ldr	r3, [pc, #192]	@ (8002440 <adc_solve+0x118>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4932      	ldr	r1, [pc, #200]	@ (800244c <adc_solve+0x124>)
 8002384:	4832      	ldr	r0, [pc, #200]	@ (8002450 <adc_solve+0x128>)
 8002386:	f005 f95d 	bl	8007644 <siprintf>
					LCD_ShowString(3,15,str,BLACK,WHITE,12,0);
 800238a:	2300      	movs	r3, #0
 800238c:	9302      	str	r3, [sp, #8]
 800238e:	230c      	movs	r3, #12
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2300      	movs	r3, #0
 800239a:	4a2d      	ldr	r2, [pc, #180]	@ (8002450 <adc_solve+0x128>)
 800239c:	210f      	movs	r1, #15
 800239e:	2003      	movs	r0, #3
 80023a0:	f7ff f878 	bl	8001494 <LCD_ShowString>
					sprintf((char*)str,"Alarm flag:YES");
 80023a4:	492b      	ldr	r1, [pc, #172]	@ (8002454 <adc_solve+0x12c>)
 80023a6:	482a      	ldr	r0, [pc, #168]	@ (8002450 <adc_solve+0x128>)
 80023a8:	f005 f94c 	bl	8007644 <siprintf>
					LCD_ShowString(3,39,str,BLACK,WHITE,12,0);
 80023ac:	2300      	movs	r3, #0
 80023ae:	9302      	str	r3, [sp, #8]
 80023b0:	230c      	movs	r3, #12
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2300      	movs	r3, #0
 80023bc:	4a24      	ldr	r2, [pc, #144]	@ (8002450 <adc_solve+0x128>)
 80023be:	2127      	movs	r1, #39	@ 0x27
 80023c0:	2003      	movs	r0, #3
 80023c2:	f7ff f867 	bl	8001494 <LCD_ShowString>
				}
			}
			if(engine_temp <= 100)
 80023c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002440 <adc_solve+0x118>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b64      	cmp	r3, #100	@ 0x64
 80023cc:	d82b      	bhi.n	8002426 <adc_solve+0xfe>
			{
				Alarm_flag =0;
 80023ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002444 <adc_solve+0x11c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
				if(screen_num == 1)
 80023d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002448 <adc_solve+0x120>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d124      	bne.n	8002426 <adc_solve+0xfe>
				{
					sprintf((char*)str,"Engine temp:%d ",engine_temp);
 80023dc:	4b18      	ldr	r3, [pc, #96]	@ (8002440 <adc_solve+0x118>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	491a      	ldr	r1, [pc, #104]	@ (800244c <adc_solve+0x124>)
 80023e4:	481a      	ldr	r0, [pc, #104]	@ (8002450 <adc_solve+0x128>)
 80023e6:	f005 f92d 	bl	8007644 <siprintf>
					LCD_ShowString(3,15,str,BLACK,WHITE,12,0);
 80023ea:	2300      	movs	r3, #0
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	230c      	movs	r3, #12
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2300      	movs	r3, #0
 80023fa:	4a15      	ldr	r2, [pc, #84]	@ (8002450 <adc_solve+0x128>)
 80023fc:	210f      	movs	r1, #15
 80023fe:	2003      	movs	r0, #3
 8002400:	f7ff f848 	bl	8001494 <LCD_ShowString>
					sprintf((char*)str,"Alarm flag:NO ");
 8002404:	4914      	ldr	r1, [pc, #80]	@ (8002458 <adc_solve+0x130>)
 8002406:	4812      	ldr	r0, [pc, #72]	@ (8002450 <adc_solve+0x128>)
 8002408:	f005 f91c 	bl	8007644 <siprintf>
					LCD_ShowString(3,39,str,BLACK,WHITE,12,0);
 800240c:	2300      	movs	r3, #0
 800240e:	9302      	str	r3, [sp, #8]
 8002410:	230c      	movs	r3, #12
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2300      	movs	r3, #0
 800241c:	4a0c      	ldr	r2, [pc, #48]	@ (8002450 <adc_solve+0x128>)
 800241e:	2127      	movs	r1, #39	@ 0x27
 8002420:	2003      	movs	r0, #3
 8002422:	f7ff f837 	bl	8001494 <LCD_ShowString>

	}
//	sprintf((char*)str,"Value: %d Volt: %d.%d%dV",ADC_Value,ADC_Volt/100,(ADC_Volt/100)/10,ADC_Volt%10);
//	printf("%s\r\n",str);
//	HAL_UART_Transmit(&huart1,str,sizeof(str),1000);
	HAL_ADC_Stop(&hadc1);
 8002426:	4803      	ldr	r0, [pc, #12]	@ (8002434 <adc_solve+0x10c>)
 8002428:	f000 fe76 	bl	8003118 <HAL_ADC_Stop>
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200001fc 	.word	0x200001fc
 8002438:	20000260 	.word	0x20000260
 800243c:	8d3dcb09 	.word	0x8d3dcb09
 8002440:	20000258 	.word	0x20000258
 8002444:	2000025c 	.word	0x2000025c
 8002448:	20000244 	.word	0x20000244
 800244c:	0800afcc 	.word	0x0800afcc
 8002450:	20000264 	.word	0x20000264
 8002454:	0800afdc 	.word	0x0800afdc
 8002458:	0800afec 	.word	0x0800afec

0800245c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a06      	ldr	r2, [pc, #24]	@ (8002484 <HAL_ADC_ConvCpltCallback+0x28>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d106      	bne.n	800247c <HAL_ADC_ConvCpltCallback+0x20>
	{
	ADC_Value = HAL_ADC_GetValue(&hadc1);
 800246e:	4806      	ldr	r0, [pc, #24]	@ (8002488 <HAL_ADC_ConvCpltCallback+0x2c>)
 8002470:	f001 f820 	bl	80034b4 <HAL_ADC_GetValue>
 8002474:	4603      	mov	r3, r0
 8002476:	b29a      	uxth	r2, r3
 8002478:	4b04      	ldr	r3, [pc, #16]	@ (800248c <HAL_ADC_ConvCpltCallback+0x30>)
 800247a:	801a      	strh	r2, [r3, #0]
//	ADC_Volt = ADC_Value * 330/4096;
//	sprintf((char*)str,"Value: %d Volt: %d.%d%dV",ADC_Value,ADC_Volt/100,(ADC_Volt/100)/10,ADC_Volt%10);
//	printf("%s\r\n",str);
//	HAL_UART_Transmit(&huart1,str,sizeof(str),1000);
	}
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40012000 	.word	0x40012000
 8002488:	200001fc 	.word	0x200001fc
 800248c:	20000260 	.word	0x20000260

08002490 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d10e      	bne.n	80024be <HAL_GPIO_EXTI_Callback+0x2e>
	{
			screen_num=screen_num+1;
 80024a0:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3301      	adds	r3, #1
 80024a6:	4a09      	ldr	r2, [pc, #36]	@ (80024cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80024a8:	6013      	str	r3, [r2, #0]
			key_change_flag = 1;
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <HAL_GPIO_EXTI_Callback+0x40>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
		  if(screen_num == 2)
 80024b0:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d102      	bne.n	80024be <HAL_GPIO_EXTI_Callback+0x2e>
        {
            screen_num=0;
 80024b8:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
        }
	}
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000244 	.word	0x20000244
 80024d0:	20000000 	.word	0x20000000

080024d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a07      	ldr	r2, [pc, #28]	@ (8002500 <HAL_UART_RxCpltCallback+0x2c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d107      	bne.n	80024f6 <HAL_UART_RxCpltCallback+0x22>
	{
		recive_flag=1;
 80024e6:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <HAL_UART_RxCpltCallback+0x30>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1,&rx_dat1,1);
 80024ec:	2201      	movs	r2, #1
 80024ee:	4906      	ldr	r1, [pc, #24]	@ (8002508 <HAL_UART_RxCpltCallback+0x34>)
 80024f0:	4806      	ldr	r0, [pc, #24]	@ (800250c <HAL_UART_RxCpltCallback+0x38>)
 80024f2:	f003 f9ec 	bl	80058ce <HAL_UART_Receive_IT>
	}

}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40011000 	.word	0x40011000
 8002504:	20000248 	.word	0x20000248
 8002508:	20000296 	.word	0x20000296
 800250c:	2000032c 	.word	0x2000032c

08002510 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b085      	sub	sp, #20
 8002514:	af02      	add	r7, sp, #8
 8002516:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0e      	ldr	r2, [pc, #56]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d116      	bne.n	8002550 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_1);
 8002522:	2102      	movs	r1, #2
 8002524:	480d      	ldr	r0, [pc, #52]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002526:	f001 fd68 	bl	8003ffa <HAL_GPIO_TogglePin>
		adc_solve();
 800252a:	f7ff fefd 	bl	8002328 <adc_solve>
//		printf("[%d]PWMFREQUENCE:%dKHz,duty:%d%%,ADC1IN4=%d\r\n",student,pwm_freq,pwm_duty,ADC_Value);
		printf("[%d]PWMFREQUENCE:%dKHz,duty:%d%%,Engine TEMP=%d,Alarm flag=%d\r\n",student,pwm_freq,pwm_duty,engine_temp,Alarm_flag);
 800252e:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002530:	6819      	ldr	r1, [r3, #0]
 8002532:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002538:	681c      	ldr	r4, [r3, #0]
 800253a:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a0c      	ldr	r2, [pc, #48]	@ (8002570 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	9201      	str	r2, [sp, #4]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	4623      	mov	r3, r4
 8002548:	4602      	mov	r2, r0
 800254a:	480a      	ldr	r0, [pc, #40]	@ (8002574 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800254c:	f005 f868 	bl	8007620 <iprintf>
//	printf("okrk\r\n");
	}

}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bd90      	pop	{r4, r7, pc}
 8002558:	40001000 	.word	0x40001000
 800255c:	40020000 	.word	0x40020000
 8002560:	20000004 	.word	0x20000004
 8002564:	20000250 	.word	0x20000250
 8002568:	20000254 	.word	0x20000254
 800256c:	20000258 	.word	0x20000258
 8002570:	2000025c 	.word	0x2000025c
 8002574:	0800affc 	.word	0x0800affc

08002578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800257c:	f000 fc20 	bl	8002dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002580:	f000 f830 	bl	80025e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002584:	f7ff fb3a 	bl	8001bfc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002588:	f000 fb16 	bl	8002bb8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800258c:	f7ff fa98 	bl	8001ac0 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8002590:	f000 fb3c 	bl	8002c0c <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8002594:	f000 fa44 	bl	8002a20 <MX_TIM6_Init>
  MX_TIM3_Init();
 8002598:	f000 f9e8 	bl	800296c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	LCD_Init();
 800259c:	f7ff f98e 	bl	80018bc <LCD_Init>
	HAL_TIM_Base_Start_IT(&htim6);
 80025a0:	480b      	ldr	r0, [pc, #44]	@ (80025d0 <main+0x58>)
 80025a2:	f002 fa45 	bl	8004a30 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1,&rx_dat1,1);
 80025a6:	2201      	movs	r2, #1
 80025a8:	490a      	ldr	r1, [pc, #40]	@ (80025d4 <main+0x5c>)
 80025aa:	480b      	ldr	r0, [pc, #44]	@ (80025d8 <main+0x60>)
 80025ac:	f003 f98f 	bl	80058ce <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80025b0:	2100      	movs	r1, #0
 80025b2:	480a      	ldr	r0, [pc, #40]	@ (80025dc <main+0x64>)
 80025b4:	f002 fafc 	bl	8004bb0 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
	//HAL_ADC_Start_IT(&hadc1);
	// beep_solve();
  /* USER CODE END 2 */
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80025b8:	2120      	movs	r1, #32
 80025ba:	4809      	ldr	r0, [pc, #36]	@ (80025e0 <main+0x68>)
 80025bc:	f001 fd1d 	bl	8003ffa <HAL_GPIO_TogglePin>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		draw_lcd0();
 80025c0:	f7ff fbca 	bl	8001d58 <draw_lcd0>
		draw_lcd1();
 80025c4:	f7ff fcae 	bl	8001f24 <draw_lcd1>
//  	draw_lcd2();
//		adc_solve();
		pwm_solve();
 80025c8:	f7ff fd8c 	bl	80020e4 <pwm_solve>
		draw_lcd0();
 80025cc:	bf00      	nop
 80025ce:	e7f7      	b.n	80025c0 <main+0x48>
 80025d0:	200002e4 	.word	0x200002e4
 80025d4:	20000296 	.word	0x20000296
 80025d8:	2000032c 	.word	0x2000032c
 80025dc:	2000029c 	.word	0x2000029c
 80025e0:	40020000 	.word	0x40020000

080025e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b094      	sub	sp, #80	@ 0x50
 80025e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ea:	f107 0320 	add.w	r3, r7, #32
 80025ee:	2230      	movs	r2, #48	@ 0x30
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f005 f889 	bl	800770a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025f8:	f107 030c 	add.w	r3, r7, #12
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002608:	2300      	movs	r3, #0
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	4b28      	ldr	r3, [pc, #160]	@ (80026b0 <SystemClock_Config+0xcc>)
 800260e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002610:	4a27      	ldr	r2, [pc, #156]	@ (80026b0 <SystemClock_Config+0xcc>)
 8002612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002616:	6413      	str	r3, [r2, #64]	@ 0x40
 8002618:	4b25      	ldr	r3, [pc, #148]	@ (80026b0 <SystemClock_Config+0xcc>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002624:	2300      	movs	r3, #0
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	4b22      	ldr	r3, [pc, #136]	@ (80026b4 <SystemClock_Config+0xd0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a21      	ldr	r2, [pc, #132]	@ (80026b4 <SystemClock_Config+0xd0>)
 800262e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b1f      	ldr	r3, [pc, #124]	@ (80026b4 <SystemClock_Config+0xd0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002640:	2302      	movs	r3, #2
 8002642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002644:	2301      	movs	r3, #1
 8002646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002648:	2310      	movs	r3, #16
 800264a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800264c:	2302      	movs	r3, #2
 800264e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002650:	2300      	movs	r3, #0
 8002652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002654:	2308      	movs	r3, #8
 8002656:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002658:	23a8      	movs	r3, #168	@ 0xa8
 800265a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800265c:	2302      	movs	r3, #2
 800265e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002660:	2304      	movs	r3, #4
 8002662:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002664:	f107 0320 	add.w	r3, r7, #32
 8002668:	4618      	mov	r0, r3
 800266a:	f001 fcf9 	bl	8004060 <HAL_RCC_OscConfig>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002674:	f000 f820 	bl	80026b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002678:	230f      	movs	r3, #15
 800267a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800267c:	2302      	movs	r3, #2
 800267e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002684:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800268a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800268e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	2105      	movs	r1, #5
 8002696:	4618      	mov	r0, r3
 8002698:	f001 ff5a 	bl	8004550 <HAL_RCC_ClockConfig>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80026a2:	f000 f809 	bl	80026b8 <Error_Handler>
  }
}
 80026a6:	bf00      	nop
 80026a8:	3750      	adds	r7, #80	@ 0x50
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40007000 	.word	0x40007000

080026b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026bc:	b672      	cpsid	i
}
 80026be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026c0:	bf00      	nop
 80026c2:	e7fd      	b.n	80026c0 <Error_Handler+0x8>

080026c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <HAL_MspInit+0x4c>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002710 <HAL_MspInit+0x4c>)
 80026d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026da:	4b0d      	ldr	r3, [pc, #52]	@ (8002710 <HAL_MspInit+0x4c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <HAL_MspInit+0x4c>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	4a08      	ldr	r2, [pc, #32]	@ (8002710 <HAL_MspInit+0x4c>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f6:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <HAL_MspInit+0x4c>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800

08002714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <NMI_Handler+0x4>

0800271c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <HardFault_Handler+0x4>

08002724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <MemManage_Handler+0x4>

0800272c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <BusFault_Handler+0x4>

08002734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <UsageFault_Handler+0x4>

0800273c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800276a:	f000 fb7b 	bl	8002e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}

08002772 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002776:	2001      	movs	r0, #1
 8002778:	f001 fc5a 	bl	8004030 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}

08002780 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002784:	4802      	ldr	r0, [pc, #8]	@ (8002790 <ADC_IRQHandler+0x10>)
 8002786:	f000 fd85 	bl	8003294 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200001fc 	.word	0x200001fc

08002794 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002798:	4802      	ldr	r0, [pc, #8]	@ (80027a4 <USART1_IRQHandler+0x10>)
 800279a:	f003 f8bd 	bl	8005918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	2000032c 	.word	0x2000032c

080027a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027ac:	4802      	ldr	r0, [pc, #8]	@ (80027b8 <TIM6_DAC_IRQHandler+0x10>)
 80027ae:	f002 fac7 	bl	8004d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200002e4 	.word	0x200002e4

080027bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return 1;
 80027c0:	2301      	movs	r3, #1
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <_kill>:

int _kill(int pid, int sig)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027d6:	f004 ffeb 	bl	80077b0 <__errno>
 80027da:	4603      	mov	r3, r0
 80027dc:	2216      	movs	r2, #22
 80027de:	601a      	str	r2, [r3, #0]
  return -1;
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <_exit>:

void _exit (int status)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027f4:	f04f 31ff 	mov.w	r1, #4294967295
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ffe7 	bl	80027cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80027fe:	bf00      	nop
 8002800:	e7fd      	b.n	80027fe <_exit+0x12>

08002802 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	e00a      	b.n	800282a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002814:	f3af 8000 	nop.w
 8002818:	4601      	mov	r1, r0
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	60ba      	str	r2, [r7, #8]
 8002820:	b2ca      	uxtb	r2, r1
 8002822:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	429a      	cmp	r2, r3
 8002830:	dbf0      	blt.n	8002814 <_read+0x12>
  }

  return len;
 8002832:	687b      	ldr	r3, [r7, #4]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	e009      	b.n	8002862 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	60ba      	str	r2, [r7, #8]
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f000 f99c 	bl	8002b94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3301      	adds	r3, #1
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	429a      	cmp	r2, r3
 8002868:	dbf1      	blt.n	800284e <_write+0x12>
  }
  return len;
 800286a:	687b      	ldr	r3, [r7, #4]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <_close>:

int _close(int file)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800289c:	605a      	str	r2, [r3, #4]
  return 0;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <_isatty>:

int _isatty(int file)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028b4:	2301      	movs	r3, #1
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b085      	sub	sp, #20
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e4:	4a14      	ldr	r2, [pc, #80]	@ (8002938 <_sbrk+0x5c>)
 80028e6:	4b15      	ldr	r3, [pc, #84]	@ (800293c <_sbrk+0x60>)
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f0:	4b13      	ldr	r3, [pc, #76]	@ (8002940 <_sbrk+0x64>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028f8:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <_sbrk+0x64>)
 80028fa:	4a12      	ldr	r2, [pc, #72]	@ (8002944 <_sbrk+0x68>)
 80028fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028fe:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <_sbrk+0x64>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	429a      	cmp	r2, r3
 800290a:	d207      	bcs.n	800291c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800290c:	f004 ff50 	bl	80077b0 <__errno>
 8002910:	4603      	mov	r3, r0
 8002912:	220c      	movs	r2, #12
 8002914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
 800291a:	e009      	b.n	8002930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800291c:	4b08      	ldr	r3, [pc, #32]	@ (8002940 <_sbrk+0x64>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002922:	4b07      	ldr	r3, [pc, #28]	@ (8002940 <_sbrk+0x64>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	4a05      	ldr	r2, [pc, #20]	@ (8002940 <_sbrk+0x64>)
 800292c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800292e:	68fb      	ldr	r3, [r7, #12]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20020000 	.word	0x20020000
 800293c:	00000400 	.word	0x00000400
 8002940:	20000298 	.word	0x20000298
 8002944:	20000510 	.word	0x20000510

08002948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800294c:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <SystemInit+0x20>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002952:	4a05      	ldr	r2, [pc, #20]	@ (8002968 <SystemInit+0x20>)
 8002954:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002958:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	@ 0x28
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002972:	f107 0320 	add.w	r3, r7, #32
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800297c:	1d3b      	adds	r3, r7, #4
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	60da      	str	r2, [r3, #12]
 8002988:	611a      	str	r2, [r3, #16]
 800298a:	615a      	str	r2, [r3, #20]
 800298c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800298e:	4b22      	ldr	r3, [pc, #136]	@ (8002a18 <MX_TIM3_Init+0xac>)
 8002990:	4a22      	ldr	r2, [pc, #136]	@ (8002a1c <MX_TIM3_Init+0xb0>)
 8002992:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8002994:	4b20      	ldr	r3, [pc, #128]	@ (8002a18 <MX_TIM3_Init+0xac>)
 8002996:	22a7      	movs	r2, #167	@ 0xa7
 8002998:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299a:	4b1f      	ldr	r3, [pc, #124]	@ (8002a18 <MX_TIM3_Init+0xac>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80029a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a18 <MX_TIM3_Init+0xac>)
 80029a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a18 <MX_TIM3_Init+0xac>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002a18 <MX_TIM3_Init+0xac>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029b4:	4818      	ldr	r0, [pc, #96]	@ (8002a18 <MX_TIM3_Init+0xac>)
 80029b6:	f002 f8ab 	bl	8004b10 <HAL_TIM_PWM_Init>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80029c0:	f7ff fe7a 	bl	80026b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c4:	2300      	movs	r3, #0
 80029c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029cc:	f107 0320 	add.w	r3, r7, #32
 80029d0:	4619      	mov	r1, r3
 80029d2:	4811      	ldr	r0, [pc, #68]	@ (8002a18 <MX_TIM3_Init+0xac>)
 80029d4:	f002 fe10 	bl	80055f8 <HAL_TIMEx_MasterConfigSynchronization>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80029de:	f7ff fe6b 	bl	80026b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029e2:	2360      	movs	r3, #96	@ 0x60
 80029e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	2200      	movs	r2, #0
 80029f6:	4619      	mov	r1, r3
 80029f8:	4807      	ldr	r0, [pc, #28]	@ (8002a18 <MX_TIM3_Init+0xac>)
 80029fa:	f002 fa91 	bl	8004f20 <HAL_TIM_PWM_ConfigChannel>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002a04:	f7ff fe58 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a08:	4803      	ldr	r0, [pc, #12]	@ (8002a18 <MX_TIM3_Init+0xac>)
 8002a0a:	f000 f889 	bl	8002b20 <HAL_TIM_MspPostInit>

}
 8002a0e:	bf00      	nop
 8002a10:	3728      	adds	r7, #40	@ 0x28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000029c 	.word	0x2000029c
 8002a1c:	40000400 	.word	0x40000400

08002a20 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a26:	463b      	mov	r3, r7
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a2e:	4b15      	ldr	r3, [pc, #84]	@ (8002a84 <MX_TIM6_Init+0x64>)
 8002a30:	4a15      	ldr	r2, [pc, #84]	@ (8002a88 <MX_TIM6_Init+0x68>)
 8002a32:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16799;
 8002a34:	4b13      	ldr	r3, [pc, #76]	@ (8002a84 <MX_TIM6_Init+0x64>)
 8002a36:	f244 129f 	movw	r2, #16799	@ 0x419f
 8002a3a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	@ (8002a84 <MX_TIM6_Init+0x64>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8002a42:	4b10      	ldr	r3, [pc, #64]	@ (8002a84 <MX_TIM6_Init+0x64>)
 8002a44:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002a48:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a84 <MX_TIM6_Init+0x64>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a50:	480c      	ldr	r0, [pc, #48]	@ (8002a84 <MX_TIM6_Init+0x64>)
 8002a52:	f001 ff9d 	bl	8004990 <HAL_TIM_Base_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002a5c:	f7ff fe2c 	bl	80026b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a60:	2300      	movs	r3, #0
 8002a62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a68:	463b      	mov	r3, r7
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4805      	ldr	r0, [pc, #20]	@ (8002a84 <MX_TIM6_Init+0x64>)
 8002a6e:	f002 fdc3 	bl	80055f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002a78:	f7ff fe1e 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	200002e4 	.word	0x200002e4
 8002a88:	40001000 	.word	0x40001000

08002a8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d10d      	bne.n	8002aba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <HAL_TIM_PWM_MspInit+0x40>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	4a09      	ldr	r2, [pc, #36]	@ (8002acc <HAL_TIM_PWM_MspInit+0x40>)
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aae:	4b07      	ldr	r3, [pc, #28]	@ (8002acc <HAL_TIM_PWM_MspInit+0x40>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40023800 	.word	0x40023800

08002ad0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0e      	ldr	r2, [pc, #56]	@ (8002b18 <HAL_TIM_Base_MspInit+0x48>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d115      	bne.n	8002b0e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <HAL_TIM_Base_MspInit+0x4c>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	4a0c      	ldr	r2, [pc, #48]	@ (8002b1c <HAL_TIM_Base_MspInit+0x4c>)
 8002aec:	f043 0310 	orr.w	r3, r3, #16
 8002af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002af2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b1c <HAL_TIM_Base_MspInit+0x4c>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	2036      	movs	r0, #54	@ 0x36
 8002b04:	f000 fffb 	bl	8003afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b08:	2036      	movs	r0, #54	@ 0x36
 8002b0a:	f001 f814 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40001000 	.word	0x40001000
 8002b1c:	40023800 	.word	0x40023800

08002b20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 030c 	add.w	r3, r7, #12
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a12      	ldr	r2, [pc, #72]	@ (8002b88 <HAL_TIM_MspPostInit+0x68>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d11d      	bne.n	8002b7e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <HAL_TIM_MspPostInit+0x6c>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	4a10      	ldr	r2, [pc, #64]	@ (8002b8c <HAL_TIM_MspPostInit+0x6c>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b52:	4b0e      	ldr	r3, [pc, #56]	@ (8002b8c <HAL_TIM_MspPostInit+0x6c>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	60bb      	str	r3, [r7, #8]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b5e:	2340      	movs	r3, #64	@ 0x40
 8002b60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b62:	2302      	movs	r3, #2
 8002b64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b72:	f107 030c 	add.w	r3, r7, #12
 8002b76:	4619      	mov	r1, r3
 8002b78:	4805      	ldr	r0, [pc, #20]	@ (8002b90 <HAL_TIM_MspPostInit+0x70>)
 8002b7a:	f001 f889 	bl	8003c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b7e:	bf00      	nop
 8002b80:	3720      	adds	r7, #32
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40020000 	.word	0x40020000

08002b94 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)&ch,1,0xFFFF);//阻塞方式打印,串口1
 8002b9c:	1d39      	adds	r1, r7, #4
 8002b9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4803      	ldr	r0, [pc, #12]	@ (8002bb4 <__io_putchar+0x20>)
 8002ba6:	f002 fe07 	bl	80057b8 <HAL_UART_Transmit>
  return ch;
 8002baa:	687b      	ldr	r3, [r7, #4]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	2000032c 	.word	0x2000032c

08002bb8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bbe:	4a12      	ldr	r2, [pc, #72]	@ (8002c08 <MX_USART1_UART_Init+0x50>)
 8002bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	@ (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bca:	4b0e      	ldr	r3, [pc, #56]	@ (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bde:	220c      	movs	r2, #12
 8002be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be2:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be8:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bee:	4805      	ldr	r0, [pc, #20]	@ (8002c04 <MX_USART1_UART_Init+0x4c>)
 8002bf0:	f002 fd92 	bl	8005718 <HAL_UART_Init>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bfa:	f7ff fd5d 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	2000032c 	.word	0x2000032c
 8002c08:	40011000 	.word	0x40011000

08002c0c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c12:	4a12      	ldr	r2, [pc, #72]	@ (8002c5c <MX_USART6_UART_Init+0x50>)
 8002c14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002c16:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002c30:	4b09      	ldr	r3, [pc, #36]	@ (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c32:	220c      	movs	r2, #12
 8002c34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c36:	4b08      	ldr	r3, [pc, #32]	@ (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002c42:	4805      	ldr	r0, [pc, #20]	@ (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c44:	f002 fd68 	bl	8005718 <HAL_UART_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002c4e:	f7ff fd33 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000374 	.word	0x20000374
 8002c5c:	40011400 	.word	0x40011400

08002c60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08c      	sub	sp, #48	@ 0x30
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c68:	f107 031c 	add.w	r3, r7, #28
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a36      	ldr	r2, [pc, #216]	@ (8002d58 <HAL_UART_MspInit+0xf8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d135      	bne.n	8002cee <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	4b35      	ldr	r3, [pc, #212]	@ (8002d5c <HAL_UART_MspInit+0xfc>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8a:	4a34      	ldr	r2, [pc, #208]	@ (8002d5c <HAL_UART_MspInit+0xfc>)
 8002c8c:	f043 0310 	orr.w	r3, r3, #16
 8002c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c92:	4b32      	ldr	r3, [pc, #200]	@ (8002d5c <HAL_UART_MspInit+0xfc>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8002d5c <HAL_UART_MspInit+0xfc>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d5c <HAL_UART_MspInit+0xfc>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cae:	4b2b      	ldr	r3, [pc, #172]	@ (8002d5c <HAL_UART_MspInit+0xfc>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ccc:	2307      	movs	r3, #7
 8002cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd0:	f107 031c 	add.w	r3, r7, #28
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4822      	ldr	r0, [pc, #136]	@ (8002d60 <HAL_UART_MspInit+0x100>)
 8002cd8:	f000 ffda 	bl	8003c90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2100      	movs	r1, #0
 8002ce0:	2025      	movs	r0, #37	@ 0x25
 8002ce2:	f000 ff0c 	bl	8003afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ce6:	2025      	movs	r0, #37	@ 0x25
 8002ce8:	f000 ff25 	bl	8003b36 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002cec:	e030      	b.n	8002d50 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART6)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d64 <HAL_UART_MspInit+0x104>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d12b      	bne.n	8002d50 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	4b17      	ldr	r3, [pc, #92]	@ (8002d5c <HAL_UART_MspInit+0xfc>)
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d00:	4a16      	ldr	r2, [pc, #88]	@ (8002d5c <HAL_UART_MspInit+0xfc>)
 8002d02:	f043 0320 	orr.w	r3, r3, #32
 8002d06:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d08:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <HAL_UART_MspInit+0xfc>)
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <HAL_UART_MspInit+0xfc>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	4a0f      	ldr	r2, [pc, #60]	@ (8002d5c <HAL_UART_MspInit+0xfc>)
 8002d1e:	f043 0304 	orr.w	r3, r3, #4
 8002d22:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d24:	4b0d      	ldr	r3, [pc, #52]	@ (8002d5c <HAL_UART_MspInit+0xfc>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d30:	23c0      	movs	r3, #192	@ 0xc0
 8002d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d40:	2308      	movs	r3, #8
 8002d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d44:	f107 031c 	add.w	r3, r7, #28
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4807      	ldr	r0, [pc, #28]	@ (8002d68 <HAL_UART_MspInit+0x108>)
 8002d4c:	f000 ffa0 	bl	8003c90 <HAL_GPIO_Init>
}
 8002d50:	bf00      	nop
 8002d52:	3730      	adds	r7, #48	@ 0x30
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40011000 	.word	0x40011000
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40011400 	.word	0x40011400
 8002d68:	40020800 	.word	0x40020800

08002d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002da4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d70:	f7ff fdea 	bl	8002948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d74:	480c      	ldr	r0, [pc, #48]	@ (8002da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d76:	490d      	ldr	r1, [pc, #52]	@ (8002dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d78:	4a0d      	ldr	r2, [pc, #52]	@ (8002db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d7c:	e002      	b.n	8002d84 <LoopCopyDataInit>

08002d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d82:	3304      	adds	r3, #4

08002d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d88:	d3f9      	bcc.n	8002d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d90:	e001      	b.n	8002d96 <LoopFillZerobss>

08002d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d94:	3204      	adds	r2, #4

08002d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d98:	d3fb      	bcc.n	8002d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d9a:	f004 fd0f 	bl	80077bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d9e:	f7ff fbeb 	bl	8002578 <main>
  bx  lr    
 8002da2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002da4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dac:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002db0:	0800ba58 	.word	0x0800ba58
  ldr r2, =_sbss
 8002db4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002db8:	2000050c 	.word	0x2000050c

08002dbc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dbc:	e7fe      	b.n	8002dbc <CAN1_RX0_IRQHandler>
	...

08002dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e00 <HAL_Init+0x40>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e00 <HAL_Init+0x40>)
 8002dca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <HAL_Init+0x40>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002e00 <HAL_Init+0x40>)
 8002dd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ddc:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <HAL_Init+0x40>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a07      	ldr	r2, [pc, #28]	@ (8002e00 <HAL_Init+0x40>)
 8002de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de8:	2003      	movs	r0, #3
 8002dea:	f000 fe7d 	bl	8003ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dee:	200f      	movs	r0, #15
 8002df0:	f000 f808 	bl	8002e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002df4:	f7ff fc66 	bl	80026c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023c00 	.word	0x40023c00

08002e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e0c:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <HAL_InitTick+0x54>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b12      	ldr	r3, [pc, #72]	@ (8002e5c <HAL_InitTick+0x58>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	4619      	mov	r1, r3
 8002e16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fe95 	bl	8003b52 <HAL_SYSTICK_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e00e      	b.n	8002e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b0f      	cmp	r3, #15
 8002e36:	d80a      	bhi.n	8002e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e40:	f000 fe5d 	bl	8003afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e44:	4a06      	ldr	r2, [pc, #24]	@ (8002e60 <HAL_InitTick+0x5c>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e000      	b.n	8002e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	2000000c 	.word	0x2000000c
 8002e5c:	20000014 	.word	0x20000014
 8002e60:	20000010 	.word	0x20000010

08002e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e68:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <HAL_IncTick+0x20>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_IncTick+0x24>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4413      	add	r3, r2
 8002e74:	4a04      	ldr	r2, [pc, #16]	@ (8002e88 <HAL_IncTick+0x24>)
 8002e76:	6013      	str	r3, [r2, #0]
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000014 	.word	0x20000014
 8002e88:	200003bc 	.word	0x200003bc

08002e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e90:	4b03      	ldr	r3, [pc, #12]	@ (8002ea0 <HAL_GetTick+0x14>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	200003bc 	.word	0x200003bc

08002ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eac:	f7ff ffee 	bl	8002e8c <HAL_GetTick>
 8002eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d005      	beq.n	8002eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <HAL_Delay+0x44>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eca:	bf00      	nop
 8002ecc:	f7ff ffde 	bl	8002e8c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d8f7      	bhi.n	8002ecc <HAL_Delay+0x28>
  {
  }
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000014 	.word	0x20000014

08002eec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e033      	b.n	8002f6a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fe fe2a 	bl	8001b64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d118      	bne.n	8002f5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f32:	f023 0302 	bic.w	r3, r3, #2
 8002f36:	f043 0202 	orr.w	r2, r3, #2
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fbfc 	bl	800373c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	f023 0303 	bic.w	r3, r3, #3
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f5a:	e001      	b.n	8002f60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_ADC_Start+0x1a>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e0b2      	b.n	80030f4 <HAL_ADC_Start+0x180>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d018      	beq.n	8002fd6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fb4:	4b52      	ldr	r3, [pc, #328]	@ (8003100 <HAL_ADC_Start+0x18c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a52      	ldr	r2, [pc, #328]	@ (8003104 <HAL_ADC_Start+0x190>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	0c9a      	lsrs	r2, r3, #18
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002fc8:	e002      	b.n	8002fd0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f9      	bne.n	8002fca <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d17a      	bne.n	80030da <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800300e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800301e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003022:	d106      	bne.n	8003032 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003028:	f023 0206 	bic.w	r2, r3, #6
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003030:	e002      	b.n	8003038 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003040:	4b31      	ldr	r3, [pc, #196]	@ (8003108 <HAL_ADC_Start+0x194>)
 8003042:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800304c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	2b00      	cmp	r3, #0
 8003058:	d12a      	bne.n	80030b0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a2b      	ldr	r2, [pc, #172]	@ (800310c <HAL_ADC_Start+0x198>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d015      	beq.n	8003090 <HAL_ADC_Start+0x11c>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a29      	ldr	r2, [pc, #164]	@ (8003110 <HAL_ADC_Start+0x19c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d105      	bne.n	800307a <HAL_ADC_Start+0x106>
 800306e:	4b26      	ldr	r3, [pc, #152]	@ (8003108 <HAL_ADC_Start+0x194>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a25      	ldr	r2, [pc, #148]	@ (8003114 <HAL_ADC_Start+0x1a0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d136      	bne.n	80030f2 <HAL_ADC_Start+0x17e>
 8003084:	4b20      	ldr	r3, [pc, #128]	@ (8003108 <HAL_ADC_Start+0x194>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b00      	cmp	r3, #0
 800308e:	d130      	bne.n	80030f2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d129      	bne.n	80030f2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	e020      	b.n	80030f2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a15      	ldr	r2, [pc, #84]	@ (800310c <HAL_ADC_Start+0x198>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d11b      	bne.n	80030f2 <HAL_ADC_Start+0x17e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d114      	bne.n	80030f2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	e00b      	b.n	80030f2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	f043 0210 	orr.w	r2, r3, #16
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	2000000c 	.word	0x2000000c
 8003104:	431bde83 	.word	0x431bde83
 8003108:	40012300 	.word	0x40012300
 800310c:	40012000 	.word	0x40012000
 8003110:	40012100 	.word	0x40012100
 8003114:	40012200 	.word	0x40012200

08003118 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_ADC_Stop+0x16>
 800312a:	2302      	movs	r3, #2
 800312c:	e021      	b.n	8003172 <HAL_ADC_Stop+0x5a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0201 	bic.w	r2, r2, #1
 8003144:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	f043 0201 	orr.w	r2, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800319a:	d113      	bne.n	80031c4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031aa:	d10b      	bne.n	80031c4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e063      	b.n	800328c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80031c4:	f7ff fe62 	bl	8002e8c <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031ca:	e021      	b.n	8003210 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d01d      	beq.n	8003210 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d007      	beq.n	80031ea <HAL_ADC_PollForConversion+0x6c>
 80031da:	f7ff fe57 	bl	8002e8c <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d212      	bcs.n	8003210 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d00b      	beq.n	8003210 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fc:	f043 0204 	orr.w	r2, r3, #4
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e03d      	b.n	800328c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b02      	cmp	r3, #2
 800321c:	d1d6      	bne.n	80031cc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f06f 0212 	mvn.w	r2, #18
 8003226:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d123      	bne.n	800328a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003246:	2b00      	cmp	r3, #0
 8003248:	d11f      	bne.n	800328a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003254:	2b00      	cmp	r3, #0
 8003256:	d006      	beq.n	8003266 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003262:	2b00      	cmp	r3, #0
 8003264:	d111      	bne.n	800328a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d105      	bne.n	800328a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d049      	beq.n	800335e <HAL_ADC_IRQHandler+0xca>
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d046      	beq.n	800335e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d12b      	bne.n	800334e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d127      	bne.n	800334e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003304:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003308:	2b00      	cmp	r3, #0
 800330a:	d006      	beq.n	800331a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003316:	2b00      	cmp	r3, #0
 8003318:	d119      	bne.n	800334e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0220 	bic.w	r2, r2, #32
 8003328:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d105      	bne.n	800334e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff f884 	bl	800245c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0212 	mvn.w	r2, #18
 800335c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d057      	beq.n	8003424 <HAL_ADC_IRQHandler+0x190>
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d054      	beq.n	8003424 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d139      	bne.n	8003414 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d12b      	bne.n	8003414 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d124      	bne.n	8003414 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d11d      	bne.n	8003414 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d119      	bne.n	8003414 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033ee:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d105      	bne.n	8003414 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	f043 0201 	orr.w	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fa8d 	bl	8003934 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f06f 020c 	mvn.w	r2, #12
 8003422:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003432:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d017      	beq.n	800346a <HAL_ADC_IRQHandler+0x1d6>
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d014      	beq.n	800346a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	d10d      	bne.n	800346a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f837 	bl	80034ce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0201 	mvn.w	r2, #1
 8003468:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003478:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d015      	beq.n	80034ac <HAL_ADC_IRQHandler+0x218>
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d012      	beq.n	80034ac <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348a:	f043 0202 	orr.w	r2, r3, #2
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f06f 0220 	mvn.w	r2, #32
 800349a:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f820 	bl	80034e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f06f 0220 	mvn.w	r2, #32
 80034aa:	601a      	str	r2, [r3, #0]
  }
}
 80034ac:	bf00      	nop
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x1c>
 8003510:	2302      	movs	r3, #2
 8003512:	e105      	b.n	8003720 <HAL_ADC_ConfigChannel+0x228>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b09      	cmp	r3, #9
 8003522:	d925      	bls.n	8003570 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68d9      	ldr	r1, [r3, #12]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	4613      	mov	r3, r2
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	4413      	add	r3, r2
 8003538:	3b1e      	subs	r3, #30
 800353a:	2207      	movs	r2, #7
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43da      	mvns	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	400a      	ands	r2, r1
 8003548:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68d9      	ldr	r1, [r3, #12]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	b29b      	uxth	r3, r3
 800355a:	4618      	mov	r0, r3
 800355c:	4603      	mov	r3, r0
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4403      	add	r3, r0
 8003562:	3b1e      	subs	r3, #30
 8003564:	409a      	lsls	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	e022      	b.n	80035b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6919      	ldr	r1, [r3, #16]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	b29b      	uxth	r3, r3
 800357c:	461a      	mov	r2, r3
 800357e:	4613      	mov	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	2207      	movs	r2, #7
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43da      	mvns	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	400a      	ands	r2, r1
 8003592:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6919      	ldr	r1, [r3, #16]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	4618      	mov	r0, r3
 80035a6:	4603      	mov	r3, r0
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4403      	add	r3, r0
 80035ac:	409a      	lsls	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b06      	cmp	r3, #6
 80035bc:	d824      	bhi.n	8003608 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	3b05      	subs	r3, #5
 80035d0:	221f      	movs	r2, #31
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43da      	mvns	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	400a      	ands	r2, r1
 80035de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	4618      	mov	r0, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	3b05      	subs	r3, #5
 80035fa:	fa00 f203 	lsl.w	r2, r0, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	635a      	str	r2, [r3, #52]	@ 0x34
 8003606:	e04c      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b0c      	cmp	r3, #12
 800360e:	d824      	bhi.n	800365a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	3b23      	subs	r3, #35	@ 0x23
 8003622:	221f      	movs	r2, #31
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43da      	mvns	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	400a      	ands	r2, r1
 8003630:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	b29b      	uxth	r3, r3
 800363e:	4618      	mov	r0, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	3b23      	subs	r3, #35	@ 0x23
 800364c:	fa00 f203 	lsl.w	r2, r0, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	631a      	str	r2, [r3, #48]	@ 0x30
 8003658:	e023      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	3b41      	subs	r3, #65	@ 0x41
 800366c:	221f      	movs	r2, #31
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43da      	mvns	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	400a      	ands	r2, r1
 800367a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	b29b      	uxth	r3, r3
 8003688:	4618      	mov	r0, r3
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	3b41      	subs	r3, #65	@ 0x41
 8003696:	fa00 f203 	lsl.w	r2, r0, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036a2:	4b22      	ldr	r3, [pc, #136]	@ (800372c <HAL_ADC_ConfigChannel+0x234>)
 80036a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a21      	ldr	r2, [pc, #132]	@ (8003730 <HAL_ADC_ConfigChannel+0x238>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d109      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x1cc>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b12      	cmp	r3, #18
 80036b6:	d105      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a19      	ldr	r2, [pc, #100]	@ (8003730 <HAL_ADC_ConfigChannel+0x238>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d123      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x21e>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d003      	beq.n	80036de <HAL_ADC_ConfigChannel+0x1e6>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b11      	cmp	r3, #17
 80036dc:	d11b      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d111      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036f2:	4b10      	ldr	r3, [pc, #64]	@ (8003734 <HAL_ADC_ConfigChannel+0x23c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a10      	ldr	r2, [pc, #64]	@ (8003738 <HAL_ADC_ConfigChannel+0x240>)
 80036f8:	fba2 2303 	umull	r2, r3, r2, r3
 80036fc:	0c9a      	lsrs	r2, r3, #18
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003708:	e002      	b.n	8003710 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	3b01      	subs	r3, #1
 800370e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f9      	bne.n	800370a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	40012300 	.word	0x40012300
 8003730:	40012000 	.word	0x40012000
 8003734:	2000000c 	.word	0x2000000c
 8003738:	431bde83 	.word	0x431bde83

0800373c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003744:	4b79      	ldr	r3, [pc, #484]	@ (800392c <ADC_Init+0x1f0>)
 8003746:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	431a      	orrs	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003770:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	021a      	lsls	r2, r3, #8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003794:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6899      	ldr	r1, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ce:	4a58      	ldr	r2, [pc, #352]	@ (8003930 <ADC_Init+0x1f4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d022      	beq.n	800381a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6899      	ldr	r1, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003804:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6899      	ldr	r1, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	e00f      	b.n	800383a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003828:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003838:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0202 	bic.w	r2, r2, #2
 8003848:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6899      	ldr	r1, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	7e1b      	ldrb	r3, [r3, #24]
 8003854:	005a      	lsls	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01b      	beq.n	80038a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003876:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003886:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	3b01      	subs	r3, #1
 8003894:	035a      	lsls	r2, r3, #13
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	e007      	b.n	80038b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80038be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	051a      	lsls	r2, r3, #20
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6899      	ldr	r1, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038f2:	025a      	lsls	r2, r3, #9
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800390a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6899      	ldr	r1, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	029a      	lsls	r2, r3, #10
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40012300 	.word	0x40012300
 8003930:	0f000001 	.word	0x0f000001

08003934 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003958:	4b0c      	ldr	r3, [pc, #48]	@ (800398c <__NVIC_SetPriorityGrouping+0x44>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003964:	4013      	ands	r3, r2
 8003966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003970:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800397a:	4a04      	ldr	r2, [pc, #16]	@ (800398c <__NVIC_SetPriorityGrouping+0x44>)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	60d3      	str	r3, [r2, #12]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	e000ed00 	.word	0xe000ed00

08003990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003994:	4b04      	ldr	r3, [pc, #16]	@ (80039a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	0a1b      	lsrs	r3, r3, #8
 800399a:	f003 0307 	and.w	r3, r3, #7
}
 800399e:	4618      	mov	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	db0b      	blt.n	80039d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	f003 021f 	and.w	r2, r3, #31
 80039c4:	4907      	ldr	r1, [pc, #28]	@ (80039e4 <__NVIC_EnableIRQ+0x38>)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2001      	movs	r0, #1
 80039ce:	fa00 f202 	lsl.w	r2, r0, r2
 80039d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	e000e100 	.word	0xe000e100

080039e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	6039      	str	r1, [r7, #0]
 80039f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	db0a      	blt.n	8003a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	490c      	ldr	r1, [pc, #48]	@ (8003a34 <__NVIC_SetPriority+0x4c>)
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	0112      	lsls	r2, r2, #4
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a10:	e00a      	b.n	8003a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	4908      	ldr	r1, [pc, #32]	@ (8003a38 <__NVIC_SetPriority+0x50>)
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	3b04      	subs	r3, #4
 8003a20:	0112      	lsls	r2, r2, #4
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	440b      	add	r3, r1
 8003a26:	761a      	strb	r2, [r3, #24]
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	e000e100 	.word	0xe000e100
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b089      	sub	sp, #36	@ 0x24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f1c3 0307 	rsb	r3, r3, #7
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	bf28      	it	cs
 8003a5a:	2304      	movcs	r3, #4
 8003a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	3304      	adds	r3, #4
 8003a62:	2b06      	cmp	r3, #6
 8003a64:	d902      	bls.n	8003a6c <NVIC_EncodePriority+0x30>
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	3b03      	subs	r3, #3
 8003a6a:	e000      	b.n	8003a6e <NVIC_EncodePriority+0x32>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a70:	f04f 32ff 	mov.w	r2, #4294967295
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43da      	mvns	r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	401a      	ands	r2, r3
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a84:	f04f 31ff 	mov.w	r1, #4294967295
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8e:	43d9      	mvns	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a94:	4313      	orrs	r3, r2
         );
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3724      	adds	r7, #36	@ 0x24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ab4:	d301      	bcc.n	8003aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e00f      	b.n	8003ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aba:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae4 <SysTick_Config+0x40>)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ac2:	210f      	movs	r1, #15
 8003ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac8:	f7ff ff8e 	bl	80039e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003acc:	4b05      	ldr	r3, [pc, #20]	@ (8003ae4 <SysTick_Config+0x40>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ad2:	4b04      	ldr	r3, [pc, #16]	@ (8003ae4 <SysTick_Config+0x40>)
 8003ad4:	2207      	movs	r2, #7
 8003ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	e000e010 	.word	0xe000e010

08003ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ff29 	bl	8003948 <__NVIC_SetPriorityGrouping>
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b086      	sub	sp, #24
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	4603      	mov	r3, r0
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b10:	f7ff ff3e 	bl	8003990 <__NVIC_GetPriorityGrouping>
 8003b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	6978      	ldr	r0, [r7, #20]
 8003b1c:	f7ff ff8e 	bl	8003a3c <NVIC_EncodePriority>
 8003b20:	4602      	mov	r2, r0
 8003b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b26:	4611      	mov	r1, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff5d 	bl	80039e8 <__NVIC_SetPriority>
}
 8003b2e:	bf00      	nop
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff31 	bl	80039ac <__NVIC_EnableIRQ>
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff ffa2 	bl	8003aa4 <SysTick_Config>
 8003b60:	4603      	mov	r3, r0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b78:	f7ff f988 	bl	8002e8c <HAL_GetTick>
 8003b7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d008      	beq.n	8003b9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2280      	movs	r2, #128	@ 0x80
 8003b8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e052      	b.n	8003c42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0216 	bic.w	r2, r2, #22
 8003baa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <HAL_DMA_Abort+0x62>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0208 	bic.w	r2, r2, #8
 8003bda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bec:	e013      	b.n	8003c16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bee:	f7ff f94d 	bl	8002e8c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b05      	cmp	r3, #5
 8003bfa:	d90c      	bls.n	8003c16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2203      	movs	r2, #3
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e015      	b.n	8003c42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e4      	bne.n	8003bee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c28:	223f      	movs	r2, #63	@ 0x3f
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d004      	beq.n	8003c68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2280      	movs	r2, #128	@ 0x80
 8003c62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e00c      	b.n	8003c82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2205      	movs	r2, #5
 8003c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b089      	sub	sp, #36	@ 0x24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	e16b      	b.n	8003f84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cac:	2201      	movs	r2, #1
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	f040 815a 	bne.w	8003f7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d005      	beq.n	8003ce2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d130      	bne.n	8003d44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	2203      	movs	r2, #3
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d18:	2201      	movs	r2, #1
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 0201 	and.w	r2, r3, #1
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d017      	beq.n	8003d80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d123      	bne.n	8003dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	08da      	lsrs	r2, r3, #3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3208      	adds	r2, #8
 8003d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	220f      	movs	r2, #15
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	08da      	lsrs	r2, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3208      	adds	r2, #8
 8003dce:	69b9      	ldr	r1, [r7, #24]
 8003dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	2203      	movs	r2, #3
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0203 	and.w	r2, r3, #3
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80b4 	beq.w	8003f7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	4b60      	ldr	r3, [pc, #384]	@ (8003f9c <HAL_GPIO_Init+0x30c>)
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1e:	4a5f      	ldr	r2, [pc, #380]	@ (8003f9c <HAL_GPIO_Init+0x30c>)
 8003e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e26:	4b5d      	ldr	r3, [pc, #372]	@ (8003f9c <HAL_GPIO_Init+0x30c>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e32:	4a5b      	ldr	r2, [pc, #364]	@ (8003fa0 <HAL_GPIO_Init+0x310>)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	3302      	adds	r3, #2
 8003e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	220f      	movs	r2, #15
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a52      	ldr	r2, [pc, #328]	@ (8003fa4 <HAL_GPIO_Init+0x314>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d02b      	beq.n	8003eb6 <HAL_GPIO_Init+0x226>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a51      	ldr	r2, [pc, #324]	@ (8003fa8 <HAL_GPIO_Init+0x318>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d025      	beq.n	8003eb2 <HAL_GPIO_Init+0x222>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a50      	ldr	r2, [pc, #320]	@ (8003fac <HAL_GPIO_Init+0x31c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01f      	beq.n	8003eae <HAL_GPIO_Init+0x21e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a4f      	ldr	r2, [pc, #316]	@ (8003fb0 <HAL_GPIO_Init+0x320>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d019      	beq.n	8003eaa <HAL_GPIO_Init+0x21a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a4e      	ldr	r2, [pc, #312]	@ (8003fb4 <HAL_GPIO_Init+0x324>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <HAL_GPIO_Init+0x216>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a4d      	ldr	r2, [pc, #308]	@ (8003fb8 <HAL_GPIO_Init+0x328>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00d      	beq.n	8003ea2 <HAL_GPIO_Init+0x212>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a4c      	ldr	r2, [pc, #304]	@ (8003fbc <HAL_GPIO_Init+0x32c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <HAL_GPIO_Init+0x20e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a4b      	ldr	r2, [pc, #300]	@ (8003fc0 <HAL_GPIO_Init+0x330>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d101      	bne.n	8003e9a <HAL_GPIO_Init+0x20a>
 8003e96:	2307      	movs	r3, #7
 8003e98:	e00e      	b.n	8003eb8 <HAL_GPIO_Init+0x228>
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	e00c      	b.n	8003eb8 <HAL_GPIO_Init+0x228>
 8003e9e:	2306      	movs	r3, #6
 8003ea0:	e00a      	b.n	8003eb8 <HAL_GPIO_Init+0x228>
 8003ea2:	2305      	movs	r3, #5
 8003ea4:	e008      	b.n	8003eb8 <HAL_GPIO_Init+0x228>
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	e006      	b.n	8003eb8 <HAL_GPIO_Init+0x228>
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e004      	b.n	8003eb8 <HAL_GPIO_Init+0x228>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e002      	b.n	8003eb8 <HAL_GPIO_Init+0x228>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <HAL_GPIO_Init+0x228>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	f002 0203 	and.w	r2, r2, #3
 8003ebe:	0092      	lsls	r2, r2, #2
 8003ec0:	4093      	lsls	r3, r2
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ec8:	4935      	ldr	r1, [pc, #212]	@ (8003fa0 <HAL_GPIO_Init+0x310>)
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	089b      	lsrs	r3, r3, #2
 8003ece:	3302      	adds	r3, #2
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8003fc4 <HAL_GPIO_Init+0x334>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003efa:	4a32      	ldr	r2, [pc, #200]	@ (8003fc4 <HAL_GPIO_Init+0x334>)
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f00:	4b30      	ldr	r3, [pc, #192]	@ (8003fc4 <HAL_GPIO_Init+0x334>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f24:	4a27      	ldr	r2, [pc, #156]	@ (8003fc4 <HAL_GPIO_Init+0x334>)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f2a:	4b26      	ldr	r3, [pc, #152]	@ (8003fc4 <HAL_GPIO_Init+0x334>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	43db      	mvns	r3, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4013      	ands	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fc4 <HAL_GPIO_Init+0x334>)
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f54:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc4 <HAL_GPIO_Init+0x334>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f78:	4a12      	ldr	r2, [pc, #72]	@ (8003fc4 <HAL_GPIO_Init+0x334>)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	3301      	adds	r3, #1
 8003f82:	61fb      	str	r3, [r7, #28]
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	2b0f      	cmp	r3, #15
 8003f88:	f67f ae90 	bls.w	8003cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	3724      	adds	r7, #36	@ 0x24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40013800 	.word	0x40013800
 8003fa4:	40020000 	.word	0x40020000
 8003fa8:	40020400 	.word	0x40020400
 8003fac:	40020800 	.word	0x40020800
 8003fb0:	40020c00 	.word	0x40020c00
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	40021400 	.word	0x40021400
 8003fbc:	40021800 	.word	0x40021800
 8003fc0:	40021c00 	.word	0x40021c00
 8003fc4:	40013c00 	.word	0x40013c00

08003fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	807b      	strh	r3, [r7, #2]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fd8:	787b      	ldrb	r3, [r7, #1]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fde:	887a      	ldrh	r2, [r7, #2]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fe4:	e003      	b.n	8003fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fe6:	887b      	ldrh	r3, [r7, #2]
 8003fe8:	041a      	lsls	r2, r3, #16
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	619a      	str	r2, [r3, #24]
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800400c:	887a      	ldrh	r2, [r7, #2]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4013      	ands	r3, r2
 8004012:	041a      	lsls	r2, r3, #16
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	43d9      	mvns	r1, r3
 8004018:	887b      	ldrh	r3, [r7, #2]
 800401a:	400b      	ands	r3, r1
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	619a      	str	r2, [r3, #24]
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800403a:	4b08      	ldr	r3, [pc, #32]	@ (800405c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d006      	beq.n	8004054 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004046:	4a05      	ldr	r2, [pc, #20]	@ (800405c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe fa1e 	bl	8002490 <HAL_GPIO_EXTI_Callback>
  }
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40013c00 	.word	0x40013c00

08004060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e267      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d075      	beq.n	800416a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800407e:	4b88      	ldr	r3, [pc, #544]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	2b04      	cmp	r3, #4
 8004088:	d00c      	beq.n	80040a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800408a:	4b85      	ldr	r3, [pc, #532]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004092:	2b08      	cmp	r3, #8
 8004094:	d112      	bne.n	80040bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004096:	4b82      	ldr	r3, [pc, #520]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800409e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040a2:	d10b      	bne.n	80040bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a4:	4b7e      	ldr	r3, [pc, #504]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d05b      	beq.n	8004168 <HAL_RCC_OscConfig+0x108>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d157      	bne.n	8004168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e242      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040c4:	d106      	bne.n	80040d4 <HAL_RCC_OscConfig+0x74>
 80040c6:	4b76      	ldr	r3, [pc, #472]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a75      	ldr	r2, [pc, #468]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 80040cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	e01d      	b.n	8004110 <HAL_RCC_OscConfig+0xb0>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040dc:	d10c      	bne.n	80040f8 <HAL_RCC_OscConfig+0x98>
 80040de:	4b70      	ldr	r3, [pc, #448]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a6f      	ldr	r2, [pc, #444]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 80040e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	4b6d      	ldr	r3, [pc, #436]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a6c      	ldr	r2, [pc, #432]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e00b      	b.n	8004110 <HAL_RCC_OscConfig+0xb0>
 80040f8:	4b69      	ldr	r3, [pc, #420]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a68      	ldr	r2, [pc, #416]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 80040fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	4b66      	ldr	r3, [pc, #408]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a65      	ldr	r2, [pc, #404]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 800410a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800410e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d013      	beq.n	8004140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7fe feb8 	bl	8002e8c <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004120:	f7fe feb4 	bl	8002e8c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b64      	cmp	r3, #100	@ 0x64
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e207      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004132:	4b5b      	ldr	r3, [pc, #364]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0xc0>
 800413e:	e014      	b.n	800416a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004140:	f7fe fea4 	bl	8002e8c <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004148:	f7fe fea0 	bl	8002e8c <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	@ 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e1f3      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800415a:	4b51      	ldr	r3, [pc, #324]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_OscConfig+0xe8>
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d063      	beq.n	800423e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004176:	4b4a      	ldr	r3, [pc, #296]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 030c 	and.w	r3, r3, #12
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00b      	beq.n	800419a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004182:	4b47      	ldr	r3, [pc, #284]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800418a:	2b08      	cmp	r3, #8
 800418c:	d11c      	bne.n	80041c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800418e:	4b44      	ldr	r3, [pc, #272]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d116      	bne.n	80041c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419a:	4b41      	ldr	r3, [pc, #260]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d005      	beq.n	80041b2 <HAL_RCC_OscConfig+0x152>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d001      	beq.n	80041b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e1c7      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b2:	4b3b      	ldr	r3, [pc, #236]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4937      	ldr	r1, [pc, #220]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c6:	e03a      	b.n	800423e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d020      	beq.n	8004212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d0:	4b34      	ldr	r3, [pc, #208]	@ (80042a4 <HAL_RCC_OscConfig+0x244>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d6:	f7fe fe59 	bl	8002e8c <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041de:	f7fe fe55 	bl	8002e8c <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e1a8      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f0:	4b2b      	ldr	r3, [pc, #172]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f0      	beq.n	80041de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fc:	4b28      	ldr	r3, [pc, #160]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4925      	ldr	r1, [pc, #148]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 800420c:	4313      	orrs	r3, r2
 800420e:	600b      	str	r3, [r1, #0]
 8004210:	e015      	b.n	800423e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004212:	4b24      	ldr	r3, [pc, #144]	@ (80042a4 <HAL_RCC_OscConfig+0x244>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fe fe38 	bl	8002e8c <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004220:	f7fe fe34 	bl	8002e8c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e187      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004232:	4b1b      	ldr	r3, [pc, #108]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d036      	beq.n	80042b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004252:	4b15      	ldr	r3, [pc, #84]	@ (80042a8 <HAL_RCC_OscConfig+0x248>)
 8004254:	2201      	movs	r2, #1
 8004256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004258:	f7fe fe18 	bl	8002e8c <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004260:	f7fe fe14 	bl	8002e8c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e167      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004272:	4b0b      	ldr	r3, [pc, #44]	@ (80042a0 <HAL_RCC_OscConfig+0x240>)
 8004274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0x200>
 800427e:	e01b      	b.n	80042b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004280:	4b09      	ldr	r3, [pc, #36]	@ (80042a8 <HAL_RCC_OscConfig+0x248>)
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004286:	f7fe fe01 	bl	8002e8c <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800428c:	e00e      	b.n	80042ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800428e:	f7fe fdfd 	bl	8002e8c <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d907      	bls.n	80042ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e150      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
 80042a0:	40023800 	.word	0x40023800
 80042a4:	42470000 	.word	0x42470000
 80042a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ac:	4b88      	ldr	r3, [pc, #544]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 80042ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1ea      	bne.n	800428e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8097 	beq.w	80043f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042c6:	2300      	movs	r3, #0
 80042c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ca:	4b81      	ldr	r3, [pc, #516]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10f      	bne.n	80042f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	4b7d      	ldr	r3, [pc, #500]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	4a7c      	ldr	r2, [pc, #496]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 80042e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042e6:	4b7a      	ldr	r3, [pc, #488]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ee:	60bb      	str	r3, [r7, #8]
 80042f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f2:	2301      	movs	r3, #1
 80042f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f6:	4b77      	ldr	r3, [pc, #476]	@ (80044d4 <HAL_RCC_OscConfig+0x474>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d118      	bne.n	8004334 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004302:	4b74      	ldr	r3, [pc, #464]	@ (80044d4 <HAL_RCC_OscConfig+0x474>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a73      	ldr	r2, [pc, #460]	@ (80044d4 <HAL_RCC_OscConfig+0x474>)
 8004308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800430c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430e:	f7fe fdbd 	bl	8002e8c <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004316:	f7fe fdb9 	bl	8002e8c <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e10c      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004328:	4b6a      	ldr	r3, [pc, #424]	@ (80044d4 <HAL_RCC_OscConfig+0x474>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d106      	bne.n	800434a <HAL_RCC_OscConfig+0x2ea>
 800433c:	4b64      	ldr	r3, [pc, #400]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 800433e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004340:	4a63      	ldr	r2, [pc, #396]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	6713      	str	r3, [r2, #112]	@ 0x70
 8004348:	e01c      	b.n	8004384 <HAL_RCC_OscConfig+0x324>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b05      	cmp	r3, #5
 8004350:	d10c      	bne.n	800436c <HAL_RCC_OscConfig+0x30c>
 8004352:	4b5f      	ldr	r3, [pc, #380]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 8004354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004356:	4a5e      	ldr	r2, [pc, #376]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 8004358:	f043 0304 	orr.w	r3, r3, #4
 800435c:	6713      	str	r3, [r2, #112]	@ 0x70
 800435e:	4b5c      	ldr	r3, [pc, #368]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004362:	4a5b      	ldr	r2, [pc, #364]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	6713      	str	r3, [r2, #112]	@ 0x70
 800436a:	e00b      	b.n	8004384 <HAL_RCC_OscConfig+0x324>
 800436c:	4b58      	ldr	r3, [pc, #352]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004370:	4a57      	ldr	r2, [pc, #348]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 8004372:	f023 0301 	bic.w	r3, r3, #1
 8004376:	6713      	str	r3, [r2, #112]	@ 0x70
 8004378:	4b55      	ldr	r3, [pc, #340]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437c:	4a54      	ldr	r2, [pc, #336]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 800437e:	f023 0304 	bic.w	r3, r3, #4
 8004382:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d015      	beq.n	80043b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438c:	f7fe fd7e 	bl	8002e8c <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004392:	e00a      	b.n	80043aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004394:	f7fe fd7a 	bl	8002e8c <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e0cb      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043aa:	4b49      	ldr	r3, [pc, #292]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0ee      	beq.n	8004394 <HAL_RCC_OscConfig+0x334>
 80043b6:	e014      	b.n	80043e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b8:	f7fe fd68 	bl	8002e8c <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043be:	e00a      	b.n	80043d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c0:	f7fe fd64 	bl	8002e8c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e0b5      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043d6:	4b3e      	ldr	r3, [pc, #248]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 80043d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1ee      	bne.n	80043c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043e2:	7dfb      	ldrb	r3, [r7, #23]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d105      	bne.n	80043f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e8:	4b39      	ldr	r3, [pc, #228]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 80043ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ec:	4a38      	ldr	r2, [pc, #224]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 80043ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 80a1 	beq.w	8004540 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043fe:	4b34      	ldr	r3, [pc, #208]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
 8004406:	2b08      	cmp	r3, #8
 8004408:	d05c      	beq.n	80044c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d141      	bne.n	8004496 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004412:	4b31      	ldr	r3, [pc, #196]	@ (80044d8 <HAL_RCC_OscConfig+0x478>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004418:	f7fe fd38 	bl	8002e8c <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004420:	f7fe fd34 	bl	8002e8c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e087      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004432:	4b27      	ldr	r3, [pc, #156]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69da      	ldr	r2, [r3, #28]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444c:	019b      	lsls	r3, r3, #6
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	3b01      	subs	r3, #1
 8004458:	041b      	lsls	r3, r3, #16
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004460:	061b      	lsls	r3, r3, #24
 8004462:	491b      	ldr	r1, [pc, #108]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 8004464:	4313      	orrs	r3, r2
 8004466:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004468:	4b1b      	ldr	r3, [pc, #108]	@ (80044d8 <HAL_RCC_OscConfig+0x478>)
 800446a:	2201      	movs	r2, #1
 800446c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446e:	f7fe fd0d 	bl	8002e8c <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004476:	f7fe fd09 	bl	8002e8c <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e05c      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004488:	4b11      	ldr	r3, [pc, #68]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f0      	beq.n	8004476 <HAL_RCC_OscConfig+0x416>
 8004494:	e054      	b.n	8004540 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004496:	4b10      	ldr	r3, [pc, #64]	@ (80044d8 <HAL_RCC_OscConfig+0x478>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449c:	f7fe fcf6 	bl	8002e8c <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a4:	f7fe fcf2 	bl	8002e8c <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e045      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b6:	4b06      	ldr	r3, [pc, #24]	@ (80044d0 <HAL_RCC_OscConfig+0x470>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f0      	bne.n	80044a4 <HAL_RCC_OscConfig+0x444>
 80044c2:	e03d      	b.n	8004540 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d107      	bne.n	80044dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e038      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
 80044d0:	40023800 	.word	0x40023800
 80044d4:	40007000 	.word	0x40007000
 80044d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044dc:	4b1b      	ldr	r3, [pc, #108]	@ (800454c <HAL_RCC_OscConfig+0x4ec>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d028      	beq.n	800453c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d121      	bne.n	800453c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004502:	429a      	cmp	r2, r3
 8004504:	d11a      	bne.n	800453c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800450c:	4013      	ands	r3, r2
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004512:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004514:	4293      	cmp	r3, r2
 8004516:	d111      	bne.n	800453c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004522:	085b      	lsrs	r3, r3, #1
 8004524:	3b01      	subs	r3, #1
 8004526:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d107      	bne.n	800453c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004536:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40023800 	.word	0x40023800

08004550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0cc      	b.n	80046fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004564:	4b68      	ldr	r3, [pc, #416]	@ (8004708 <HAL_RCC_ClockConfig+0x1b8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d90c      	bls.n	800458c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b65      	ldr	r3, [pc, #404]	@ (8004708 <HAL_RCC_ClockConfig+0x1b8>)
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800457a:	4b63      	ldr	r3, [pc, #396]	@ (8004708 <HAL_RCC_ClockConfig+0x1b8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e0b8      	b.n	80046fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d020      	beq.n	80045da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045a4:	4b59      	ldr	r3, [pc, #356]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	4a58      	ldr	r2, [pc, #352]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045bc:	4b53      	ldr	r3, [pc, #332]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	4a52      	ldr	r2, [pc, #328]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c8:	4b50      	ldr	r3, [pc, #320]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	494d      	ldr	r1, [pc, #308]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d044      	beq.n	8004670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d107      	bne.n	80045fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ee:	4b47      	ldr	r3, [pc, #284]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d119      	bne.n	800462e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e07f      	b.n	80046fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d003      	beq.n	800460e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800460a:	2b03      	cmp	r3, #3
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800460e:	4b3f      	ldr	r3, [pc, #252]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e06f      	b.n	80046fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461e:	4b3b      	ldr	r3, [pc, #236]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e067      	b.n	80046fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800462e:	4b37      	ldr	r3, [pc, #220]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f023 0203 	bic.w	r2, r3, #3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	4934      	ldr	r1, [pc, #208]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	4313      	orrs	r3, r2
 800463e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004640:	f7fe fc24 	bl	8002e8c <HAL_GetTick>
 8004644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004646:	e00a      	b.n	800465e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004648:	f7fe fc20 	bl	8002e8c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e04f      	b.n	80046fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465e:	4b2b      	ldr	r3, [pc, #172]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 020c 	and.w	r2, r3, #12
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	429a      	cmp	r2, r3
 800466e:	d1eb      	bne.n	8004648 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004670:	4b25      	ldr	r3, [pc, #148]	@ (8004708 <HAL_RCC_ClockConfig+0x1b8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d20c      	bcs.n	8004698 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467e:	4b22      	ldr	r3, [pc, #136]	@ (8004708 <HAL_RCC_ClockConfig+0x1b8>)
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004686:	4b20      	ldr	r3, [pc, #128]	@ (8004708 <HAL_RCC_ClockConfig+0x1b8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	429a      	cmp	r2, r3
 8004692:	d001      	beq.n	8004698 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e032      	b.n	80046fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046a4:	4b19      	ldr	r3, [pc, #100]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4916      	ldr	r1, [pc, #88]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046c2:	4b12      	ldr	r3, [pc, #72]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	490e      	ldr	r1, [pc, #56]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046d6:	f000 f821 	bl	800471c <HAL_RCC_GetSysClockFreq>
 80046da:	4602      	mov	r2, r0
 80046dc:	4b0b      	ldr	r3, [pc, #44]	@ (800470c <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	490a      	ldr	r1, [pc, #40]	@ (8004710 <HAL_RCC_ClockConfig+0x1c0>)
 80046e8:	5ccb      	ldrb	r3, [r1, r3]
 80046ea:	fa22 f303 	lsr.w	r3, r2, r3
 80046ee:	4a09      	ldr	r2, [pc, #36]	@ (8004714 <HAL_RCC_ClockConfig+0x1c4>)
 80046f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046f2:	4b09      	ldr	r3, [pc, #36]	@ (8004718 <HAL_RCC_ClockConfig+0x1c8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fe fb84 	bl	8002e04 <HAL_InitTick>

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40023c00 	.word	0x40023c00
 800470c:	40023800 	.word	0x40023800
 8004710:	0800b600 	.word	0x0800b600
 8004714:	2000000c 	.word	0x2000000c
 8004718:	20000010 	.word	0x20000010

0800471c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800471c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004720:	b094      	sub	sp, #80	@ 0x50
 8004722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	647b      	str	r3, [r7, #68]	@ 0x44
 8004728:	2300      	movs	r3, #0
 800472a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800472c:	2300      	movs	r3, #0
 800472e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004734:	4b79      	ldr	r3, [pc, #484]	@ (800491c <HAL_RCC_GetSysClockFreq+0x200>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 030c 	and.w	r3, r3, #12
 800473c:	2b08      	cmp	r3, #8
 800473e:	d00d      	beq.n	800475c <HAL_RCC_GetSysClockFreq+0x40>
 8004740:	2b08      	cmp	r3, #8
 8004742:	f200 80e1 	bhi.w	8004908 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_RCC_GetSysClockFreq+0x34>
 800474a:	2b04      	cmp	r3, #4
 800474c:	d003      	beq.n	8004756 <HAL_RCC_GetSysClockFreq+0x3a>
 800474e:	e0db      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004750:	4b73      	ldr	r3, [pc, #460]	@ (8004920 <HAL_RCC_GetSysClockFreq+0x204>)
 8004752:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004754:	e0db      	b.n	800490e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004756:	4b73      	ldr	r3, [pc, #460]	@ (8004924 <HAL_RCC_GetSysClockFreq+0x208>)
 8004758:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800475a:	e0d8      	b.n	800490e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800475c:	4b6f      	ldr	r3, [pc, #444]	@ (800491c <HAL_RCC_GetSysClockFreq+0x200>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004764:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004766:	4b6d      	ldr	r3, [pc, #436]	@ (800491c <HAL_RCC_GetSysClockFreq+0x200>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d063      	beq.n	800483a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004772:	4b6a      	ldr	r3, [pc, #424]	@ (800491c <HAL_RCC_GetSysClockFreq+0x200>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	099b      	lsrs	r3, r3, #6
 8004778:	2200      	movs	r2, #0
 800477a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800477c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800477e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004784:	633b      	str	r3, [r7, #48]	@ 0x30
 8004786:	2300      	movs	r3, #0
 8004788:	637b      	str	r3, [r7, #52]	@ 0x34
 800478a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800478e:	4622      	mov	r2, r4
 8004790:	462b      	mov	r3, r5
 8004792:	f04f 0000 	mov.w	r0, #0
 8004796:	f04f 0100 	mov.w	r1, #0
 800479a:	0159      	lsls	r1, r3, #5
 800479c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047a0:	0150      	lsls	r0, r2, #5
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4621      	mov	r1, r4
 80047a8:	1a51      	subs	r1, r2, r1
 80047aa:	6139      	str	r1, [r7, #16]
 80047ac:	4629      	mov	r1, r5
 80047ae:	eb63 0301 	sbc.w	r3, r3, r1
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047c0:	4659      	mov	r1, fp
 80047c2:	018b      	lsls	r3, r1, #6
 80047c4:	4651      	mov	r1, sl
 80047c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ca:	4651      	mov	r1, sl
 80047cc:	018a      	lsls	r2, r1, #6
 80047ce:	4651      	mov	r1, sl
 80047d0:	ebb2 0801 	subs.w	r8, r2, r1
 80047d4:	4659      	mov	r1, fp
 80047d6:	eb63 0901 	sbc.w	r9, r3, r1
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047ee:	4690      	mov	r8, r2
 80047f0:	4699      	mov	r9, r3
 80047f2:	4623      	mov	r3, r4
 80047f4:	eb18 0303 	adds.w	r3, r8, r3
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	462b      	mov	r3, r5
 80047fc:	eb49 0303 	adc.w	r3, r9, r3
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	f04f 0200 	mov.w	r2, #0
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800480e:	4629      	mov	r1, r5
 8004810:	024b      	lsls	r3, r1, #9
 8004812:	4621      	mov	r1, r4
 8004814:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004818:	4621      	mov	r1, r4
 800481a:	024a      	lsls	r2, r1, #9
 800481c:	4610      	mov	r0, r2
 800481e:	4619      	mov	r1, r3
 8004820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004822:	2200      	movs	r2, #0
 8004824:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004826:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800482c:	f7fc fa2c 	bl	8000c88 <__aeabi_uldivmod>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4613      	mov	r3, r2
 8004836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004838:	e058      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800483a:	4b38      	ldr	r3, [pc, #224]	@ (800491c <HAL_RCC_GetSysClockFreq+0x200>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	099b      	lsrs	r3, r3, #6
 8004840:	2200      	movs	r2, #0
 8004842:	4618      	mov	r0, r3
 8004844:	4611      	mov	r1, r2
 8004846:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800484a:	623b      	str	r3, [r7, #32]
 800484c:	2300      	movs	r3, #0
 800484e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004850:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004854:	4642      	mov	r2, r8
 8004856:	464b      	mov	r3, r9
 8004858:	f04f 0000 	mov.w	r0, #0
 800485c:	f04f 0100 	mov.w	r1, #0
 8004860:	0159      	lsls	r1, r3, #5
 8004862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004866:	0150      	lsls	r0, r2, #5
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4641      	mov	r1, r8
 800486e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004872:	4649      	mov	r1, r9
 8004874:	eb63 0b01 	sbc.w	fp, r3, r1
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004884:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004888:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800488c:	ebb2 040a 	subs.w	r4, r2, sl
 8004890:	eb63 050b 	sbc.w	r5, r3, fp
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	00eb      	lsls	r3, r5, #3
 800489e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048a2:	00e2      	lsls	r2, r4, #3
 80048a4:	4614      	mov	r4, r2
 80048a6:	461d      	mov	r5, r3
 80048a8:	4643      	mov	r3, r8
 80048aa:	18e3      	adds	r3, r4, r3
 80048ac:	603b      	str	r3, [r7, #0]
 80048ae:	464b      	mov	r3, r9
 80048b0:	eb45 0303 	adc.w	r3, r5, r3
 80048b4:	607b      	str	r3, [r7, #4]
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048c2:	4629      	mov	r1, r5
 80048c4:	028b      	lsls	r3, r1, #10
 80048c6:	4621      	mov	r1, r4
 80048c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048cc:	4621      	mov	r1, r4
 80048ce:	028a      	lsls	r2, r1, #10
 80048d0:	4610      	mov	r0, r2
 80048d2:	4619      	mov	r1, r3
 80048d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048d6:	2200      	movs	r2, #0
 80048d8:	61bb      	str	r3, [r7, #24]
 80048da:	61fa      	str	r2, [r7, #28]
 80048dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048e0:	f7fc f9d2 	bl	8000c88 <__aeabi_uldivmod>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4613      	mov	r3, r2
 80048ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048ec:	4b0b      	ldr	r3, [pc, #44]	@ (800491c <HAL_RCC_GetSysClockFreq+0x200>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	0c1b      	lsrs	r3, r3, #16
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	3301      	adds	r3, #1
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80048fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004900:	fbb2 f3f3 	udiv	r3, r2, r3
 8004904:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004906:	e002      	b.n	800490e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004908:	4b05      	ldr	r3, [pc, #20]	@ (8004920 <HAL_RCC_GetSysClockFreq+0x204>)
 800490a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800490c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800490e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004910:	4618      	mov	r0, r3
 8004912:	3750      	adds	r7, #80	@ 0x50
 8004914:	46bd      	mov	sp, r7
 8004916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800491a:	bf00      	nop
 800491c:	40023800 	.word	0x40023800
 8004920:	00f42400 	.word	0x00f42400
 8004924:	007a1200 	.word	0x007a1200

08004928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800492c:	4b03      	ldr	r3, [pc, #12]	@ (800493c <HAL_RCC_GetHCLKFreq+0x14>)
 800492e:	681b      	ldr	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	2000000c 	.word	0x2000000c

08004940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004944:	f7ff fff0 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b05      	ldr	r3, [pc, #20]	@ (8004960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	0a9b      	lsrs	r3, r3, #10
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	4903      	ldr	r1, [pc, #12]	@ (8004964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004956:	5ccb      	ldrb	r3, [r1, r3]
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40023800 	.word	0x40023800
 8004964:	0800b610 	.word	0x0800b610

08004968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800496c:	f7ff ffdc 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 8004970:	4602      	mov	r2, r0
 8004972:	4b05      	ldr	r3, [pc, #20]	@ (8004988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	0b5b      	lsrs	r3, r3, #13
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	4903      	ldr	r1, [pc, #12]	@ (800498c <HAL_RCC_GetPCLK2Freq+0x24>)
 800497e:	5ccb      	ldrb	r3, [r1, r3]
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004984:	4618      	mov	r0, r3
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40023800 	.word	0x40023800
 800498c:	0800b610 	.word	0x0800b610

08004990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e041      	b.n	8004a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fe f88a 	bl	8002ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4619      	mov	r1, r3
 80049ce:	4610      	mov	r0, r2
 80049d0:	f000 fb90 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d001      	beq.n	8004a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e04e      	b.n	8004ae6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a23      	ldr	r2, [pc, #140]	@ (8004af4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d022      	beq.n	8004ab0 <HAL_TIM_Base_Start_IT+0x80>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a72:	d01d      	beq.n	8004ab0 <HAL_TIM_Base_Start_IT+0x80>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a1f      	ldr	r2, [pc, #124]	@ (8004af8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d018      	beq.n	8004ab0 <HAL_TIM_Base_Start_IT+0x80>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a1e      	ldr	r2, [pc, #120]	@ (8004afc <HAL_TIM_Base_Start_IT+0xcc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d013      	beq.n	8004ab0 <HAL_TIM_Base_Start_IT+0x80>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8004b00 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00e      	beq.n	8004ab0 <HAL_TIM_Base_Start_IT+0x80>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1b      	ldr	r2, [pc, #108]	@ (8004b04 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d009      	beq.n	8004ab0 <HAL_TIM_Base_Start_IT+0x80>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a19      	ldr	r2, [pc, #100]	@ (8004b08 <HAL_TIM_Base_Start_IT+0xd8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <HAL_TIM_Base_Start_IT+0x80>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a18      	ldr	r2, [pc, #96]	@ (8004b0c <HAL_TIM_Base_Start_IT+0xdc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d111      	bne.n	8004ad4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b06      	cmp	r3, #6
 8004ac0:	d010      	beq.n	8004ae4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0201 	orr.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad2:	e007      	b.n	8004ae4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40010000 	.word	0x40010000
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40000800 	.word	0x40000800
 8004b00:	40000c00 	.word	0x40000c00
 8004b04:	40010400 	.word	0x40010400
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	40001800 	.word	0x40001800

08004b10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e041      	b.n	8004ba6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fd ffa8 	bl	8002a8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f000 fad0 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d109      	bne.n	8004bd4 <HAL_TIM_PWM_Start+0x24>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	e022      	b.n	8004c1a <HAL_TIM_PWM_Start+0x6a>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d109      	bne.n	8004bee <HAL_TIM_PWM_Start+0x3e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	bf14      	ite	ne
 8004be6:	2301      	movne	r3, #1
 8004be8:	2300      	moveq	r3, #0
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	e015      	b.n	8004c1a <HAL_TIM_PWM_Start+0x6a>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d109      	bne.n	8004c08 <HAL_TIM_PWM_Start+0x58>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	bf14      	ite	ne
 8004c00:	2301      	movne	r3, #1
 8004c02:	2300      	moveq	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	e008      	b.n	8004c1a <HAL_TIM_PWM_Start+0x6a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	bf14      	ite	ne
 8004c14:	2301      	movne	r3, #1
 8004c16:	2300      	moveq	r3, #0
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e07c      	b.n	8004d1c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d104      	bne.n	8004c32 <HAL_TIM_PWM_Start+0x82>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c30:	e013      	b.n	8004c5a <HAL_TIM_PWM_Start+0xaa>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d104      	bne.n	8004c42 <HAL_TIM_PWM_Start+0x92>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c40:	e00b      	b.n	8004c5a <HAL_TIM_PWM_Start+0xaa>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d104      	bne.n	8004c52 <HAL_TIM_PWM_Start+0xa2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c50:	e003      	b.n	8004c5a <HAL_TIM_PWM_Start+0xaa>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2202      	movs	r2, #2
 8004c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	6839      	ldr	r1, [r7, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fca2 	bl	80055ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a2d      	ldr	r2, [pc, #180]	@ (8004d24 <HAL_TIM_PWM_Start+0x174>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <HAL_TIM_PWM_Start+0xcc>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a2c      	ldr	r2, [pc, #176]	@ (8004d28 <HAL_TIM_PWM_Start+0x178>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d101      	bne.n	8004c80 <HAL_TIM_PWM_Start+0xd0>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <HAL_TIM_PWM_Start+0xd2>
 8004c80:	2300      	movs	r3, #0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a22      	ldr	r2, [pc, #136]	@ (8004d24 <HAL_TIM_PWM_Start+0x174>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d022      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x136>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca8:	d01d      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x136>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1f      	ldr	r2, [pc, #124]	@ (8004d2c <HAL_TIM_PWM_Start+0x17c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d018      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x136>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d30 <HAL_TIM_PWM_Start+0x180>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d013      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x136>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8004d34 <HAL_TIM_PWM_Start+0x184>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00e      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x136>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a16      	ldr	r2, [pc, #88]	@ (8004d28 <HAL_TIM_PWM_Start+0x178>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d009      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x136>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a18      	ldr	r2, [pc, #96]	@ (8004d38 <HAL_TIM_PWM_Start+0x188>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d004      	beq.n	8004ce6 <HAL_TIM_PWM_Start+0x136>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a16      	ldr	r2, [pc, #88]	@ (8004d3c <HAL_TIM_PWM_Start+0x18c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d111      	bne.n	8004d0a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b06      	cmp	r3, #6
 8004cf6:	d010      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d08:	e007      	b.n	8004d1a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f042 0201 	orr.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40010000 	.word	0x40010000
 8004d28:	40010400 	.word	0x40010400
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800
 8004d34:	40000c00 	.word	0x40000c00
 8004d38:	40014000 	.word	0x40014000
 8004d3c:	40001800 	.word	0x40001800

08004d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d020      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d01b      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0202 	mvn.w	r2, #2
 8004d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f994 	bl	80050b8 <HAL_TIM_IC_CaptureCallback>
 8004d90:	e005      	b.n	8004d9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f986 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f997 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d020      	beq.n	8004df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01b      	beq.n	8004df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0204 	mvn.w	r2, #4
 8004dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f96e 	bl	80050b8 <HAL_TIM_IC_CaptureCallback>
 8004ddc:	e005      	b.n	8004dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f960 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f971 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d020      	beq.n	8004e3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01b      	beq.n	8004e3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0208 	mvn.w	r2, #8
 8004e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2204      	movs	r2, #4
 8004e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f948 	bl	80050b8 <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f93a 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f94b 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d020      	beq.n	8004e88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d01b      	beq.n	8004e88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0210 	mvn.w	r2, #16
 8004e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2208      	movs	r2, #8
 8004e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f922 	bl	80050b8 <HAL_TIM_IC_CaptureCallback>
 8004e74:	e005      	b.n	8004e82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f914 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f925 	bl	80050cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00c      	beq.n	8004eac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d007      	beq.n	8004eac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0201 	mvn.w	r2, #1
 8004ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fd fb32 	bl	8002510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00c      	beq.n	8004ed0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d007      	beq.n	8004ed0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fc1a 	bl	8005704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00c      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d007      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f8f6 	bl	80050e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00c      	beq.n	8004f18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d007      	beq.n	8004f18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0220 	mvn.w	r2, #32
 8004f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fbec 	bl	80056f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e0ae      	b.n	800509c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b0c      	cmp	r3, #12
 8004f4a:	f200 809f 	bhi.w	800508c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	08004f89 	.word	0x08004f89
 8004f58:	0800508d 	.word	0x0800508d
 8004f5c:	0800508d 	.word	0x0800508d
 8004f60:	0800508d 	.word	0x0800508d
 8004f64:	08004fc9 	.word	0x08004fc9
 8004f68:	0800508d 	.word	0x0800508d
 8004f6c:	0800508d 	.word	0x0800508d
 8004f70:	0800508d 	.word	0x0800508d
 8004f74:	0800500b 	.word	0x0800500b
 8004f78:	0800508d 	.word	0x0800508d
 8004f7c:	0800508d 	.word	0x0800508d
 8004f80:	0800508d 	.word	0x0800508d
 8004f84:	0800504b 	.word	0x0800504b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 f95c 	bl	800524c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0208 	orr.w	r2, r2, #8
 8004fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0204 	bic.w	r2, r2, #4
 8004fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6999      	ldr	r1, [r3, #24]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	619a      	str	r2, [r3, #24]
      break;
 8004fc6:	e064      	b.n	8005092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68b9      	ldr	r1, [r7, #8]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 f9ac 	bl	800532c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6999      	ldr	r1, [r3, #24]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	021a      	lsls	r2, r3, #8
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	619a      	str	r2, [r3, #24]
      break;
 8005008:	e043      	b.n	8005092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	4618      	mov	r0, r3
 8005012:	f000 fa01 	bl	8005418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69da      	ldr	r2, [r3, #28]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0208 	orr.w	r2, r2, #8
 8005024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69da      	ldr	r2, [r3, #28]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0204 	bic.w	r2, r2, #4
 8005034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69d9      	ldr	r1, [r3, #28]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	61da      	str	r2, [r3, #28]
      break;
 8005048:	e023      	b.n	8005092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fa55 	bl	8005500 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69d9      	ldr	r1, [r3, #28]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	021a      	lsls	r2, r3, #8
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	61da      	str	r2, [r3, #28]
      break;
 800508a:	e002      	b.n	8005092 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	75fb      	strb	r3, [r7, #23]
      break;
 8005090:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800509a:	7dfb      	ldrb	r3, [r7, #23]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a46      	ldr	r2, [pc, #280]	@ (8005220 <TIM_Base_SetConfig+0x12c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d013      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005112:	d00f      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a43      	ldr	r2, [pc, #268]	@ (8005224 <TIM_Base_SetConfig+0x130>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00b      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a42      	ldr	r2, [pc, #264]	@ (8005228 <TIM_Base_SetConfig+0x134>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d007      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a41      	ldr	r2, [pc, #260]	@ (800522c <TIM_Base_SetConfig+0x138>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a40      	ldr	r2, [pc, #256]	@ (8005230 <TIM_Base_SetConfig+0x13c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d108      	bne.n	8005146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800513a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a35      	ldr	r2, [pc, #212]	@ (8005220 <TIM_Base_SetConfig+0x12c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d02b      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005154:	d027      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a32      	ldr	r2, [pc, #200]	@ (8005224 <TIM_Base_SetConfig+0x130>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d023      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a31      	ldr	r2, [pc, #196]	@ (8005228 <TIM_Base_SetConfig+0x134>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d01f      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a30      	ldr	r2, [pc, #192]	@ (800522c <TIM_Base_SetConfig+0x138>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d01b      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2f      	ldr	r2, [pc, #188]	@ (8005230 <TIM_Base_SetConfig+0x13c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d017      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2e      	ldr	r2, [pc, #184]	@ (8005234 <TIM_Base_SetConfig+0x140>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a2d      	ldr	r2, [pc, #180]	@ (8005238 <TIM_Base_SetConfig+0x144>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00f      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a2c      	ldr	r2, [pc, #176]	@ (800523c <TIM_Base_SetConfig+0x148>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00b      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a2b      	ldr	r2, [pc, #172]	@ (8005240 <TIM_Base_SetConfig+0x14c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d007      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a2a      	ldr	r2, [pc, #168]	@ (8005244 <TIM_Base_SetConfig+0x150>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d003      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a29      	ldr	r2, [pc, #164]	@ (8005248 <TIM_Base_SetConfig+0x154>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d108      	bne.n	80051b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a10      	ldr	r2, [pc, #64]	@ (8005220 <TIM_Base_SetConfig+0x12c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0xf8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a12      	ldr	r2, [pc, #72]	@ (8005230 <TIM_Base_SetConfig+0x13c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d103      	bne.n	80051f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b01      	cmp	r3, #1
 8005204:	d105      	bne.n	8005212 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f023 0201 	bic.w	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	611a      	str	r2, [r3, #16]
  }
}
 8005212:	bf00      	nop
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40010000 	.word	0x40010000
 8005224:	40000400 	.word	0x40000400
 8005228:	40000800 	.word	0x40000800
 800522c:	40000c00 	.word	0x40000c00
 8005230:	40010400 	.word	0x40010400
 8005234:	40014000 	.word	0x40014000
 8005238:	40014400 	.word	0x40014400
 800523c:	40014800 	.word	0x40014800
 8005240:	40001800 	.word	0x40001800
 8005244:	40001c00 	.word	0x40001c00
 8005248:	40002000 	.word	0x40002000

0800524c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	f023 0201 	bic.w	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800527a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0303 	bic.w	r3, r3, #3
 8005282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f023 0302 	bic.w	r3, r3, #2
 8005294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a20      	ldr	r2, [pc, #128]	@ (8005324 <TIM_OC1_SetConfig+0xd8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_OC1_SetConfig+0x64>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005328 <TIM_OC1_SetConfig+0xdc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d10c      	bne.n	80052ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f023 0308 	bic.w	r3, r3, #8
 80052b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f023 0304 	bic.w	r3, r3, #4
 80052c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a15      	ldr	r2, [pc, #84]	@ (8005324 <TIM_OC1_SetConfig+0xd8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_OC1_SetConfig+0x8e>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a14      	ldr	r2, [pc, #80]	@ (8005328 <TIM_OC1_SetConfig+0xdc>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d111      	bne.n	80052fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	621a      	str	r2, [r3, #32]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	40010000 	.word	0x40010000
 8005328:	40010400 	.word	0x40010400

0800532c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f023 0210 	bic.w	r2, r3, #16
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 0320 	bic.w	r3, r3, #32
 8005376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a22      	ldr	r2, [pc, #136]	@ (8005410 <TIM_OC2_SetConfig+0xe4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d003      	beq.n	8005394 <TIM_OC2_SetConfig+0x68>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a21      	ldr	r2, [pc, #132]	@ (8005414 <TIM_OC2_SetConfig+0xe8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d10d      	bne.n	80053b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800539a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a17      	ldr	r2, [pc, #92]	@ (8005410 <TIM_OC2_SetConfig+0xe4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d003      	beq.n	80053c0 <TIM_OC2_SetConfig+0x94>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a16      	ldr	r2, [pc, #88]	@ (8005414 <TIM_OC2_SetConfig+0xe8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d113      	bne.n	80053e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40010000 	.word	0x40010000
 8005414:	40010400 	.word	0x40010400

08005418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	021b      	lsls	r3, r3, #8
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a21      	ldr	r2, [pc, #132]	@ (80054f8 <TIM_OC3_SetConfig+0xe0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d003      	beq.n	800547e <TIM_OC3_SetConfig+0x66>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a20      	ldr	r2, [pc, #128]	@ (80054fc <TIM_OC3_SetConfig+0xe4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d10d      	bne.n	800549a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005484:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	021b      	lsls	r3, r3, #8
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a16      	ldr	r2, [pc, #88]	@ (80054f8 <TIM_OC3_SetConfig+0xe0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d003      	beq.n	80054aa <TIM_OC3_SetConfig+0x92>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a15      	ldr	r2, [pc, #84]	@ (80054fc <TIM_OC3_SetConfig+0xe4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d113      	bne.n	80054d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	621a      	str	r2, [r3, #32]
}
 80054ec:	bf00      	nop
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	40010000 	.word	0x40010000
 80054fc:	40010400 	.word	0x40010400

08005500 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800552e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	021b      	lsls	r3, r3, #8
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800554a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	031b      	lsls	r3, r3, #12
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a12      	ldr	r2, [pc, #72]	@ (80055a4 <TIM_OC4_SetConfig+0xa4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_OC4_SetConfig+0x68>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a11      	ldr	r2, [pc, #68]	@ (80055a8 <TIM_OC4_SetConfig+0xa8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d109      	bne.n	800557c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800556e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	019b      	lsls	r3, r3, #6
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	621a      	str	r2, [r3, #32]
}
 8005596:	bf00      	nop
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40010000 	.word	0x40010000
 80055a8:	40010400 	.word	0x40010400

080055ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	2201      	movs	r2, #1
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1a      	ldr	r2, [r3, #32]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	43db      	mvns	r3, r3
 80055ce:	401a      	ands	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a1a      	ldr	r2, [r3, #32]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f003 031f 	and.w	r3, r3, #31
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	fa01 f303 	lsl.w	r3, r1, r3
 80055e4:	431a      	orrs	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	621a      	str	r2, [r3, #32]
}
 80055ea:	bf00      	nop
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
	...

080055f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800560c:	2302      	movs	r3, #2
 800560e:	e05a      	b.n	80056c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005636:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a21      	ldr	r2, [pc, #132]	@ (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d022      	beq.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800565c:	d01d      	beq.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1d      	ldr	r2, [pc, #116]	@ (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d018      	beq.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a1b      	ldr	r2, [pc, #108]	@ (80056dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d013      	beq.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1a      	ldr	r2, [pc, #104]	@ (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00e      	beq.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a18      	ldr	r2, [pc, #96]	@ (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d009      	beq.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a17      	ldr	r2, [pc, #92]	@ (80056e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d004      	beq.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a15      	ldr	r2, [pc, #84]	@ (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d10c      	bne.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40010000 	.word	0x40010000
 80056d8:	40000400 	.word	0x40000400
 80056dc:	40000800 	.word	0x40000800
 80056e0:	40000c00 	.word	0x40000c00
 80056e4:	40010400 	.word	0x40010400
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40001800 	.word	0x40001800

080056f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e042      	b.n	80057b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fd fa8e 	bl	8002c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2224      	movs	r2, #36	@ 0x24
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800575a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fdbd 	bl	80062dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695a      	ldr	r2, [r3, #20]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08a      	sub	sp, #40	@ 0x28
 80057bc:	af02      	add	r7, sp, #8
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	603b      	str	r3, [r7, #0]
 80057c4:	4613      	mov	r3, r2
 80057c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d175      	bne.n	80058c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_UART_Transmit+0x2c>
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e06e      	b.n	80058c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2221      	movs	r2, #33	@ 0x21
 80057f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057f6:	f7fd fb49 	bl	8002e8c <HAL_GetTick>
 80057fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	88fa      	ldrh	r2, [r7, #6]
 8005800:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	88fa      	ldrh	r2, [r7, #6]
 8005806:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005810:	d108      	bne.n	8005824 <HAL_UART_Transmit+0x6c>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d104      	bne.n	8005824 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	61bb      	str	r3, [r7, #24]
 8005822:	e003      	b.n	800582c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005828:	2300      	movs	r3, #0
 800582a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800582c:	e02e      	b.n	800588c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2200      	movs	r2, #0
 8005836:	2180      	movs	r1, #128	@ 0x80
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 fb1f 	bl	8005e7c <UART_WaitOnFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e03a      	b.n	80058c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005864:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	3302      	adds	r3, #2
 800586a:	61bb      	str	r3, [r7, #24]
 800586c:	e007      	b.n	800587e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	781a      	ldrb	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	3301      	adds	r3, #1
 800587c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005882:	b29b      	uxth	r3, r3
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1cb      	bne.n	800582e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2200      	movs	r2, #0
 800589e:	2140      	movs	r1, #64	@ 0x40
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 faeb 	bl	8005e7c <UART_WaitOnFlagUntilTimeout>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e006      	b.n	80058c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	e000      	b.n	80058c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80058c4:	2302      	movs	r3, #2
  }
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3720      	adds	r7, #32
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	4613      	mov	r3, r2
 80058da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d112      	bne.n	800590e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <HAL_UART_Receive_IT+0x26>
 80058ee:	88fb      	ldrh	r3, [r7, #6]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e00b      	b.n	8005910 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	461a      	mov	r2, r3
 8005902:	68b9      	ldr	r1, [r7, #8]
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 fb12 	bl	8005f2e <UART_Start_Receive_IT>
 800590a:	4603      	mov	r3, r0
 800590c:	e000      	b.n	8005910 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800590e:	2302      	movs	r3, #2
  }
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b0ba      	sub	sp, #232	@ 0xe8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800593e:	2300      	movs	r3, #0
 8005940:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005944:	2300      	movs	r3, #0
 8005946:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800594a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005956:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10f      	bne.n	800597e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d009      	beq.n	800597e <HAL_UART_IRQHandler+0x66>
 800596a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fbf2 	bl	8006160 <UART_Receive_IT>
      return;
 800597c:	e25b      	b.n	8005e36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800597e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 80de 	beq.w	8005b44 <HAL_UART_IRQHandler+0x22c>
 8005988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d106      	bne.n	80059a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005998:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 80d1 	beq.w	8005b44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <HAL_UART_IRQHandler+0xae>
 80059ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d005      	beq.n	80059c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059be:	f043 0201 	orr.w	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <HAL_UART_IRQHandler+0xd2>
 80059d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e2:	f043 0202 	orr.w	r2, r3, #2
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00b      	beq.n	8005a0e <HAL_UART_IRQHandler+0xf6>
 80059f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a06:	f043 0204 	orr.w	r2, r3, #4
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d011      	beq.n	8005a3e <HAL_UART_IRQHandler+0x126>
 8005a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d105      	bne.n	8005a32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a36:	f043 0208 	orr.w	r2, r3, #8
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 81f2 	beq.w	8005e2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <HAL_UART_IRQHandler+0x14e>
 8005a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fb7d 	bl	8006160 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a70:	2b40      	cmp	r3, #64	@ 0x40
 8005a72:	bf0c      	ite	eq
 8005a74:	2301      	moveq	r3, #1
 8005a76:	2300      	movne	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d103      	bne.n	8005a92 <HAL_UART_IRQHandler+0x17a>
 8005a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d04f      	beq.n	8005b32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fa85 	bl	8005fa2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa2:	2b40      	cmp	r3, #64	@ 0x40
 8005aa4:	d141      	bne.n	8005b2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3314      	adds	r3, #20
 8005aac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ac0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3314      	adds	r3, #20
 8005ace:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005ad2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005ade:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1d9      	bne.n	8005aa6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d013      	beq.n	8005b22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005afe:	4a7e      	ldr	r2, [pc, #504]	@ (8005cf8 <HAL_UART_IRQHandler+0x3e0>)
 8005b00:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fe f89f 	bl	8003c4a <HAL_DMA_Abort_IT>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d016      	beq.n	8005b40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b20:	e00e      	b.n	8005b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f994 	bl	8005e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b28:	e00a      	b.n	8005b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f990 	bl	8005e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b30:	e006      	b.n	8005b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f98c 	bl	8005e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005b3e:	e175      	b.n	8005e2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	bf00      	nop
    return;
 8005b42:	e173      	b.n	8005e2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	f040 814f 	bne.w	8005dec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b52:	f003 0310 	and.w	r3, r3, #16
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 8148 	beq.w	8005dec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b60:	f003 0310 	and.w	r3, r3, #16
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8141 	beq.w	8005dec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	60bb      	str	r3, [r7, #8]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	60bb      	str	r3, [r7, #8]
 8005b7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8a:	2b40      	cmp	r3, #64	@ 0x40
 8005b8c:	f040 80b6 	bne.w	8005cfc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8145 	beq.w	8005e30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	f080 813e 	bcs.w	8005e30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bc6:	f000 8088 	beq.w	8005cda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	330c      	adds	r3, #12
 8005bd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bd8:	e853 3f00 	ldrex	r3, [r3]
 8005bdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005be8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005bf6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1d9      	bne.n	8005bca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3314      	adds	r3, #20
 8005c1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c20:	e853 3f00 	ldrex	r3, [r3]
 8005c24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c28:	f023 0301 	bic.w	r3, r3, #1
 8005c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3314      	adds	r3, #20
 8005c36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e1      	bne.n	8005c16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3314      	adds	r3, #20
 8005c58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3314      	adds	r3, #20
 8005c72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e3      	bne.n	8005c52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca2:	e853 3f00 	ldrex	r3, [r3]
 8005ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005caa:	f023 0310 	bic.w	r3, r3, #16
 8005cae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	330c      	adds	r3, #12
 8005cb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005cbc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005cbe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e3      	bne.n	8005c98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fd ff48 	bl	8003b6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f8b7 	bl	8005e64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cf6:	e09b      	b.n	8005e30 <HAL_UART_IRQHandler+0x518>
 8005cf8:	08006069 	.word	0x08006069
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 808e 	beq.w	8005e34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8089 	beq.w	8005e34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	330c      	adds	r3, #12
 8005d28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	330c      	adds	r3, #12
 8005d42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005d46:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d4e:	e841 2300 	strex	r3, r2, [r1]
 8005d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1e3      	bne.n	8005d22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3314      	adds	r3, #20
 8005d60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	623b      	str	r3, [r7, #32]
   return(result);
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	f023 0301 	bic.w	r3, r3, #1
 8005d70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3314      	adds	r3, #20
 8005d7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e3      	bne.n	8005d5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	330c      	adds	r3, #12
 8005da6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	e853 3f00 	ldrex	r3, [r3]
 8005dae:	60fb      	str	r3, [r7, #12]
   return(result);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0310 	bic.w	r3, r3, #16
 8005db6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	330c      	adds	r3, #12
 8005dc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005dc4:	61fa      	str	r2, [r7, #28]
 8005dc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	69b9      	ldr	r1, [r7, #24]
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e3      	bne.n	8005da0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005de2:	4619      	mov	r1, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f83d 	bl	8005e64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dea:	e023      	b.n	8005e34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d009      	beq.n	8005e0c <HAL_UART_IRQHandler+0x4f4>
 8005df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f943 	bl	8006090 <UART_Transmit_IT>
    return;
 8005e0a:	e014      	b.n	8005e36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00e      	beq.n	8005e36 <HAL_UART_IRQHandler+0x51e>
 8005e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d008      	beq.n	8005e36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f983 	bl	8006130 <UART_EndTransmit_IT>
    return;
 8005e2a:	e004      	b.n	8005e36 <HAL_UART_IRQHandler+0x51e>
    return;
 8005e2c:	bf00      	nop
 8005e2e:	e002      	b.n	8005e36 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e30:	bf00      	nop
 8005e32:	e000      	b.n	8005e36 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e34:	bf00      	nop
  }
}
 8005e36:	37e8      	adds	r7, #232	@ 0xe8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e8c:	e03b      	b.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e94:	d037      	beq.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e96:	f7fc fff9 	bl	8002e8c <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	6a3a      	ldr	r2, [r7, #32]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d302      	bcc.n	8005eac <UART_WaitOnFlagUntilTimeout+0x30>
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e03a      	b.n	8005f26 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d023      	beq.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b80      	cmp	r3, #128	@ 0x80
 8005ec2:	d020      	beq.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b40      	cmp	r3, #64	@ 0x40
 8005ec8:	d01d      	beq.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d116      	bne.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 f857 	bl	8005fa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2208      	movs	r2, #8
 8005ef8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e00f      	b.n	8005f26 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	bf0c      	ite	eq
 8005f16:	2301      	moveq	r3, #1
 8005f18:	2300      	movne	r3, #0
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	79fb      	ldrb	r3, [r7, #7]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d0b4      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	88fa      	ldrh	r2, [r7, #6]
 8005f46:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	88fa      	ldrh	r2, [r7, #6]
 8005f4c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2222      	movs	r2, #34	@ 0x22
 8005f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d007      	beq.n	8005f74 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f72:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695a      	ldr	r2, [r3, #20]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0201 	orr.w	r2, r2, #1
 8005f82:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0220 	orr.w	r2, r2, #32
 8005f92:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b095      	sub	sp, #84	@ 0x54
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	330c      	adds	r3, #12
 8005fb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	330c      	adds	r3, #12
 8005fc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fca:	643a      	str	r2, [r7, #64]	@ 0x40
 8005fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e5      	bne.n	8005faa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3314      	adds	r3, #20
 8005fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	e853 3f00 	ldrex	r3, [r3]
 8005fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	f023 0301 	bic.w	r3, r3, #1
 8005ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3314      	adds	r3, #20
 8005ffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ffe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006000:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e5      	bne.n	8005fde <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006016:	2b01      	cmp	r3, #1
 8006018:	d119      	bne.n	800604e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	330c      	adds	r3, #12
 8006020:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	60bb      	str	r3, [r7, #8]
   return(result);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f023 0310 	bic.w	r3, r3, #16
 8006030:	647b      	str	r3, [r7, #68]	@ 0x44
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	330c      	adds	r3, #12
 8006038:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800603a:	61ba      	str	r2, [r7, #24]
 800603c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603e:	6979      	ldr	r1, [r7, #20]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	613b      	str	r3, [r7, #16]
   return(result);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e5      	bne.n	800601a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800605c:	bf00      	nop
 800605e:	3754      	adds	r7, #84	@ 0x54
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006074:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f7ff fee4 	bl	8005e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006088:	bf00      	nop
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b21      	cmp	r3, #33	@ 0x21
 80060a2:	d13e      	bne.n	8006122 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ac:	d114      	bne.n	80060d8 <UART_Transmit_IT+0x48>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d110      	bne.n	80060d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	1c9a      	adds	r2, r3, #2
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	621a      	str	r2, [r3, #32]
 80060d6:	e008      	b.n	80060ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	1c59      	adds	r1, r3, #1
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6211      	str	r1, [r2, #32]
 80060e2:	781a      	ldrb	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	4619      	mov	r1, r3
 80060f8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10f      	bne.n	800611e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800610c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800611c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	e000      	b.n	8006124 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006122:	2302      	movs	r3, #2
  }
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006146:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff fe73 	bl	8005e3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08c      	sub	sp, #48	@ 0x30
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b22      	cmp	r3, #34	@ 0x22
 8006172:	f040 80ae 	bne.w	80062d2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800617e:	d117      	bne.n	80061b0 <UART_Receive_IT+0x50>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d113      	bne.n	80061b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006188:	2300      	movs	r3, #0
 800618a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	b29b      	uxth	r3, r3
 800619a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800619e:	b29a      	uxth	r2, r3
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a8:	1c9a      	adds	r2, r3, #2
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80061ae:	e026      	b.n	80061fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c2:	d007      	beq.n	80061d4 <UART_Receive_IT+0x74>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <UART_Receive_IT+0x82>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d106      	bne.n	80061e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	e008      	b.n	80061f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29b      	uxth	r3, r3
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	4619      	mov	r1, r3
 800620c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800620e:	2b00      	cmp	r3, #0
 8006210:	d15d      	bne.n	80062ce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0220 	bic.w	r2, r2, #32
 8006220:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006230:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695a      	ldr	r2, [r3, #20]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0201 	bic.w	r2, r2, #1
 8006240:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006254:	2b01      	cmp	r3, #1
 8006256:	d135      	bne.n	80062c4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	330c      	adds	r3, #12
 8006264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	613b      	str	r3, [r7, #16]
   return(result);
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f023 0310 	bic.w	r3, r3, #16
 8006274:	627b      	str	r3, [r7, #36]	@ 0x24
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800627e:	623a      	str	r2, [r7, #32]
 8006280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	69f9      	ldr	r1, [r7, #28]
 8006284:	6a3a      	ldr	r2, [r7, #32]
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	61bb      	str	r3, [r7, #24]
   return(result);
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e5      	bne.n	800625e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	2b10      	cmp	r3, #16
 800629e:	d10a      	bne.n	80062b6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff fdd1 	bl	8005e64 <HAL_UARTEx_RxEventCallback>
 80062c2:	e002      	b.n	80062ca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7fc f905 	bl	80024d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	e002      	b.n	80062d4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e000      	b.n	80062d4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80062d2:	2302      	movs	r3, #2
  }
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3730      	adds	r7, #48	@ 0x30
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062e0:	b0c0      	sub	sp, #256	@ 0x100
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80062f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f8:	68d9      	ldr	r1, [r3, #12]
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	ea40 0301 	orr.w	r3, r0, r1
 8006304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	431a      	orrs	r2, r3
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	431a      	orrs	r2, r3
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006334:	f021 010c 	bic.w	r1, r1, #12
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006342:	430b      	orrs	r3, r1
 8006344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006356:	6999      	ldr	r1, [r3, #24]
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	ea40 0301 	orr.w	r3, r0, r1
 8006362:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4b8f      	ldr	r3, [pc, #572]	@ (80065a8 <UART_SetConfig+0x2cc>)
 800636c:	429a      	cmp	r2, r3
 800636e:	d005      	beq.n	800637c <UART_SetConfig+0xa0>
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	4b8d      	ldr	r3, [pc, #564]	@ (80065ac <UART_SetConfig+0x2d0>)
 8006378:	429a      	cmp	r2, r3
 800637a:	d104      	bne.n	8006386 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800637c:	f7fe faf4 	bl	8004968 <HAL_RCC_GetPCLK2Freq>
 8006380:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006384:	e003      	b.n	800638e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006386:	f7fe fadb 	bl	8004940 <HAL_RCC_GetPCLK1Freq>
 800638a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006398:	f040 810c 	bne.w	80065b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800639c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063a0:	2200      	movs	r2, #0
 80063a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80063aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80063ae:	4622      	mov	r2, r4
 80063b0:	462b      	mov	r3, r5
 80063b2:	1891      	adds	r1, r2, r2
 80063b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80063b6:	415b      	adcs	r3, r3
 80063b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80063be:	4621      	mov	r1, r4
 80063c0:	eb12 0801 	adds.w	r8, r2, r1
 80063c4:	4629      	mov	r1, r5
 80063c6:	eb43 0901 	adc.w	r9, r3, r1
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063de:	4690      	mov	r8, r2
 80063e0:	4699      	mov	r9, r3
 80063e2:	4623      	mov	r3, r4
 80063e4:	eb18 0303 	adds.w	r3, r8, r3
 80063e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063ec:	462b      	mov	r3, r5
 80063ee:	eb49 0303 	adc.w	r3, r9, r3
 80063f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006402:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800640a:	460b      	mov	r3, r1
 800640c:	18db      	adds	r3, r3, r3
 800640e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006410:	4613      	mov	r3, r2
 8006412:	eb42 0303 	adc.w	r3, r2, r3
 8006416:	657b      	str	r3, [r7, #84]	@ 0x54
 8006418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800641c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006420:	f7fa fc32 	bl	8000c88 <__aeabi_uldivmod>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4b61      	ldr	r3, [pc, #388]	@ (80065b0 <UART_SetConfig+0x2d4>)
 800642a:	fba3 2302 	umull	r2, r3, r3, r2
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	011c      	lsls	r4, r3, #4
 8006432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006436:	2200      	movs	r2, #0
 8006438:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800643c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006440:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006444:	4642      	mov	r2, r8
 8006446:	464b      	mov	r3, r9
 8006448:	1891      	adds	r1, r2, r2
 800644a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800644c:	415b      	adcs	r3, r3
 800644e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006454:	4641      	mov	r1, r8
 8006456:	eb12 0a01 	adds.w	sl, r2, r1
 800645a:	4649      	mov	r1, r9
 800645c:	eb43 0b01 	adc.w	fp, r3, r1
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800646c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006474:	4692      	mov	sl, r2
 8006476:	469b      	mov	fp, r3
 8006478:	4643      	mov	r3, r8
 800647a:	eb1a 0303 	adds.w	r3, sl, r3
 800647e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006482:	464b      	mov	r3, r9
 8006484:	eb4b 0303 	adc.w	r3, fp, r3
 8006488:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006498:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800649c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80064a0:	460b      	mov	r3, r1
 80064a2:	18db      	adds	r3, r3, r3
 80064a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80064a6:	4613      	mov	r3, r2
 80064a8:	eb42 0303 	adc.w	r3, r2, r3
 80064ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80064ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80064b6:	f7fa fbe7 	bl	8000c88 <__aeabi_uldivmod>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4611      	mov	r1, r2
 80064c0:	4b3b      	ldr	r3, [pc, #236]	@ (80065b0 <UART_SetConfig+0x2d4>)
 80064c2:	fba3 2301 	umull	r2, r3, r3, r1
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	2264      	movs	r2, #100	@ 0x64
 80064ca:	fb02 f303 	mul.w	r3, r2, r3
 80064ce:	1acb      	subs	r3, r1, r3
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80064d6:	4b36      	ldr	r3, [pc, #216]	@ (80065b0 <UART_SetConfig+0x2d4>)
 80064d8:	fba3 2302 	umull	r2, r3, r3, r2
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80064e4:	441c      	add	r4, r3
 80064e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80064f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80064f8:	4642      	mov	r2, r8
 80064fa:	464b      	mov	r3, r9
 80064fc:	1891      	adds	r1, r2, r2
 80064fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006500:	415b      	adcs	r3, r3
 8006502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006508:	4641      	mov	r1, r8
 800650a:	1851      	adds	r1, r2, r1
 800650c:	6339      	str	r1, [r7, #48]	@ 0x30
 800650e:	4649      	mov	r1, r9
 8006510:	414b      	adcs	r3, r1
 8006512:	637b      	str	r3, [r7, #52]	@ 0x34
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006520:	4659      	mov	r1, fp
 8006522:	00cb      	lsls	r3, r1, #3
 8006524:	4651      	mov	r1, sl
 8006526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800652a:	4651      	mov	r1, sl
 800652c:	00ca      	lsls	r2, r1, #3
 800652e:	4610      	mov	r0, r2
 8006530:	4619      	mov	r1, r3
 8006532:	4603      	mov	r3, r0
 8006534:	4642      	mov	r2, r8
 8006536:	189b      	adds	r3, r3, r2
 8006538:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800653c:	464b      	mov	r3, r9
 800653e:	460a      	mov	r2, r1
 8006540:	eb42 0303 	adc.w	r3, r2, r3
 8006544:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006554:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006558:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800655c:	460b      	mov	r3, r1
 800655e:	18db      	adds	r3, r3, r3
 8006560:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006562:	4613      	mov	r3, r2
 8006564:	eb42 0303 	adc.w	r3, r2, r3
 8006568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800656a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800656e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006572:	f7fa fb89 	bl	8000c88 <__aeabi_uldivmod>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4b0d      	ldr	r3, [pc, #52]	@ (80065b0 <UART_SetConfig+0x2d4>)
 800657c:	fba3 1302 	umull	r1, r3, r3, r2
 8006580:	095b      	lsrs	r3, r3, #5
 8006582:	2164      	movs	r1, #100	@ 0x64
 8006584:	fb01 f303 	mul.w	r3, r1, r3
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	3332      	adds	r3, #50	@ 0x32
 800658e:	4a08      	ldr	r2, [pc, #32]	@ (80065b0 <UART_SetConfig+0x2d4>)
 8006590:	fba2 2303 	umull	r2, r3, r2, r3
 8006594:	095b      	lsrs	r3, r3, #5
 8006596:	f003 0207 	and.w	r2, r3, #7
 800659a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4422      	add	r2, r4
 80065a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065a4:	e106      	b.n	80067b4 <UART_SetConfig+0x4d8>
 80065a6:	bf00      	nop
 80065a8:	40011000 	.word	0x40011000
 80065ac:	40011400 	.word	0x40011400
 80065b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80065c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80065c6:	4642      	mov	r2, r8
 80065c8:	464b      	mov	r3, r9
 80065ca:	1891      	adds	r1, r2, r2
 80065cc:	6239      	str	r1, [r7, #32]
 80065ce:	415b      	adcs	r3, r3
 80065d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065d6:	4641      	mov	r1, r8
 80065d8:	1854      	adds	r4, r2, r1
 80065da:	4649      	mov	r1, r9
 80065dc:	eb43 0501 	adc.w	r5, r3, r1
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	00eb      	lsls	r3, r5, #3
 80065ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ee:	00e2      	lsls	r2, r4, #3
 80065f0:	4614      	mov	r4, r2
 80065f2:	461d      	mov	r5, r3
 80065f4:	4643      	mov	r3, r8
 80065f6:	18e3      	adds	r3, r4, r3
 80065f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065fc:	464b      	mov	r3, r9
 80065fe:	eb45 0303 	adc.w	r3, r5, r3
 8006602:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006612:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006622:	4629      	mov	r1, r5
 8006624:	008b      	lsls	r3, r1, #2
 8006626:	4621      	mov	r1, r4
 8006628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800662c:	4621      	mov	r1, r4
 800662e:	008a      	lsls	r2, r1, #2
 8006630:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006634:	f7fa fb28 	bl	8000c88 <__aeabi_uldivmod>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4b60      	ldr	r3, [pc, #384]	@ (80067c0 <UART_SetConfig+0x4e4>)
 800663e:	fba3 2302 	umull	r2, r3, r3, r2
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	011c      	lsls	r4, r3, #4
 8006646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800664a:	2200      	movs	r2, #0
 800664c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006650:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006654:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006658:	4642      	mov	r2, r8
 800665a:	464b      	mov	r3, r9
 800665c:	1891      	adds	r1, r2, r2
 800665e:	61b9      	str	r1, [r7, #24]
 8006660:	415b      	adcs	r3, r3
 8006662:	61fb      	str	r3, [r7, #28]
 8006664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006668:	4641      	mov	r1, r8
 800666a:	1851      	adds	r1, r2, r1
 800666c:	6139      	str	r1, [r7, #16]
 800666e:	4649      	mov	r1, r9
 8006670:	414b      	adcs	r3, r1
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006680:	4659      	mov	r1, fp
 8006682:	00cb      	lsls	r3, r1, #3
 8006684:	4651      	mov	r1, sl
 8006686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668a:	4651      	mov	r1, sl
 800668c:	00ca      	lsls	r2, r1, #3
 800668e:	4610      	mov	r0, r2
 8006690:	4619      	mov	r1, r3
 8006692:	4603      	mov	r3, r0
 8006694:	4642      	mov	r2, r8
 8006696:	189b      	adds	r3, r3, r2
 8006698:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800669c:	464b      	mov	r3, r9
 800669e:	460a      	mov	r2, r1
 80066a0:	eb42 0303 	adc.w	r3, r2, r3
 80066a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80066c0:	4649      	mov	r1, r9
 80066c2:	008b      	lsls	r3, r1, #2
 80066c4:	4641      	mov	r1, r8
 80066c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ca:	4641      	mov	r1, r8
 80066cc:	008a      	lsls	r2, r1, #2
 80066ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80066d2:	f7fa fad9 	bl	8000c88 <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4611      	mov	r1, r2
 80066dc:	4b38      	ldr	r3, [pc, #224]	@ (80067c0 <UART_SetConfig+0x4e4>)
 80066de:	fba3 2301 	umull	r2, r3, r3, r1
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	2264      	movs	r2, #100	@ 0x64
 80066e6:	fb02 f303 	mul.w	r3, r2, r3
 80066ea:	1acb      	subs	r3, r1, r3
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	3332      	adds	r3, #50	@ 0x32
 80066f0:	4a33      	ldr	r2, [pc, #204]	@ (80067c0 <UART_SetConfig+0x4e4>)
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066fc:	441c      	add	r4, r3
 80066fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006702:	2200      	movs	r2, #0
 8006704:	673b      	str	r3, [r7, #112]	@ 0x70
 8006706:	677a      	str	r2, [r7, #116]	@ 0x74
 8006708:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800670c:	4642      	mov	r2, r8
 800670e:	464b      	mov	r3, r9
 8006710:	1891      	adds	r1, r2, r2
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	415b      	adcs	r3, r3
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800671c:	4641      	mov	r1, r8
 800671e:	1851      	adds	r1, r2, r1
 8006720:	6039      	str	r1, [r7, #0]
 8006722:	4649      	mov	r1, r9
 8006724:	414b      	adcs	r3, r1
 8006726:	607b      	str	r3, [r7, #4]
 8006728:	f04f 0200 	mov.w	r2, #0
 800672c:	f04f 0300 	mov.w	r3, #0
 8006730:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006734:	4659      	mov	r1, fp
 8006736:	00cb      	lsls	r3, r1, #3
 8006738:	4651      	mov	r1, sl
 800673a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800673e:	4651      	mov	r1, sl
 8006740:	00ca      	lsls	r2, r1, #3
 8006742:	4610      	mov	r0, r2
 8006744:	4619      	mov	r1, r3
 8006746:	4603      	mov	r3, r0
 8006748:	4642      	mov	r2, r8
 800674a:	189b      	adds	r3, r3, r2
 800674c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800674e:	464b      	mov	r3, r9
 8006750:	460a      	mov	r2, r1
 8006752:	eb42 0303 	adc.w	r3, r2, r3
 8006756:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	663b      	str	r3, [r7, #96]	@ 0x60
 8006762:	667a      	str	r2, [r7, #100]	@ 0x64
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006770:	4649      	mov	r1, r9
 8006772:	008b      	lsls	r3, r1, #2
 8006774:	4641      	mov	r1, r8
 8006776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800677a:	4641      	mov	r1, r8
 800677c:	008a      	lsls	r2, r1, #2
 800677e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006782:	f7fa fa81 	bl	8000c88 <__aeabi_uldivmod>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4b0d      	ldr	r3, [pc, #52]	@ (80067c0 <UART_SetConfig+0x4e4>)
 800678c:	fba3 1302 	umull	r1, r3, r3, r2
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	2164      	movs	r1, #100	@ 0x64
 8006794:	fb01 f303 	mul.w	r3, r1, r3
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	3332      	adds	r3, #50	@ 0x32
 800679e:	4a08      	ldr	r2, [pc, #32]	@ (80067c0 <UART_SetConfig+0x4e4>)
 80067a0:	fba2 2303 	umull	r2, r3, r2, r3
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	f003 020f 	and.w	r2, r3, #15
 80067aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4422      	add	r2, r4
 80067b2:	609a      	str	r2, [r3, #8]
}
 80067b4:	bf00      	nop
 80067b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80067ba:	46bd      	mov	sp, r7
 80067bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067c0:	51eb851f 	.word	0x51eb851f

080067c4 <__cvt>:
 80067c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067c8:	ec57 6b10 	vmov	r6, r7, d0
 80067cc:	2f00      	cmp	r7, #0
 80067ce:	460c      	mov	r4, r1
 80067d0:	4619      	mov	r1, r3
 80067d2:	463b      	mov	r3, r7
 80067d4:	bfbb      	ittet	lt
 80067d6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80067da:	461f      	movlt	r7, r3
 80067dc:	2300      	movge	r3, #0
 80067de:	232d      	movlt	r3, #45	@ 0x2d
 80067e0:	700b      	strb	r3, [r1, #0]
 80067e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067e4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80067e8:	4691      	mov	r9, r2
 80067ea:	f023 0820 	bic.w	r8, r3, #32
 80067ee:	bfbc      	itt	lt
 80067f0:	4632      	movlt	r2, r6
 80067f2:	4616      	movlt	r6, r2
 80067f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067f8:	d005      	beq.n	8006806 <__cvt+0x42>
 80067fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80067fe:	d100      	bne.n	8006802 <__cvt+0x3e>
 8006800:	3401      	adds	r4, #1
 8006802:	2102      	movs	r1, #2
 8006804:	e000      	b.n	8006808 <__cvt+0x44>
 8006806:	2103      	movs	r1, #3
 8006808:	ab03      	add	r3, sp, #12
 800680a:	9301      	str	r3, [sp, #4]
 800680c:	ab02      	add	r3, sp, #8
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	ec47 6b10 	vmov	d0, r6, r7
 8006814:	4653      	mov	r3, sl
 8006816:	4622      	mov	r2, r4
 8006818:	f001 f886 	bl	8007928 <_dtoa_r>
 800681c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006820:	4605      	mov	r5, r0
 8006822:	d119      	bne.n	8006858 <__cvt+0x94>
 8006824:	f019 0f01 	tst.w	r9, #1
 8006828:	d00e      	beq.n	8006848 <__cvt+0x84>
 800682a:	eb00 0904 	add.w	r9, r0, r4
 800682e:	2200      	movs	r2, #0
 8006830:	2300      	movs	r3, #0
 8006832:	4630      	mov	r0, r6
 8006834:	4639      	mov	r1, r7
 8006836:	f7fa f947 	bl	8000ac8 <__aeabi_dcmpeq>
 800683a:	b108      	cbz	r0, 8006840 <__cvt+0x7c>
 800683c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006840:	2230      	movs	r2, #48	@ 0x30
 8006842:	9b03      	ldr	r3, [sp, #12]
 8006844:	454b      	cmp	r3, r9
 8006846:	d31e      	bcc.n	8006886 <__cvt+0xc2>
 8006848:	9b03      	ldr	r3, [sp, #12]
 800684a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800684c:	1b5b      	subs	r3, r3, r5
 800684e:	4628      	mov	r0, r5
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	b004      	add	sp, #16
 8006854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006858:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800685c:	eb00 0904 	add.w	r9, r0, r4
 8006860:	d1e5      	bne.n	800682e <__cvt+0x6a>
 8006862:	7803      	ldrb	r3, [r0, #0]
 8006864:	2b30      	cmp	r3, #48	@ 0x30
 8006866:	d10a      	bne.n	800687e <__cvt+0xba>
 8006868:	2200      	movs	r2, #0
 800686a:	2300      	movs	r3, #0
 800686c:	4630      	mov	r0, r6
 800686e:	4639      	mov	r1, r7
 8006870:	f7fa f92a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006874:	b918      	cbnz	r0, 800687e <__cvt+0xba>
 8006876:	f1c4 0401 	rsb	r4, r4, #1
 800687a:	f8ca 4000 	str.w	r4, [sl]
 800687e:	f8da 3000 	ldr.w	r3, [sl]
 8006882:	4499      	add	r9, r3
 8006884:	e7d3      	b.n	800682e <__cvt+0x6a>
 8006886:	1c59      	adds	r1, r3, #1
 8006888:	9103      	str	r1, [sp, #12]
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	e7d9      	b.n	8006842 <__cvt+0x7e>

0800688e <__exponent>:
 800688e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006890:	2900      	cmp	r1, #0
 8006892:	bfba      	itte	lt
 8006894:	4249      	neglt	r1, r1
 8006896:	232d      	movlt	r3, #45	@ 0x2d
 8006898:	232b      	movge	r3, #43	@ 0x2b
 800689a:	2909      	cmp	r1, #9
 800689c:	7002      	strb	r2, [r0, #0]
 800689e:	7043      	strb	r3, [r0, #1]
 80068a0:	dd29      	ble.n	80068f6 <__exponent+0x68>
 80068a2:	f10d 0307 	add.w	r3, sp, #7
 80068a6:	461d      	mov	r5, r3
 80068a8:	270a      	movs	r7, #10
 80068aa:	461a      	mov	r2, r3
 80068ac:	fbb1 f6f7 	udiv	r6, r1, r7
 80068b0:	fb07 1416 	mls	r4, r7, r6, r1
 80068b4:	3430      	adds	r4, #48	@ 0x30
 80068b6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80068ba:	460c      	mov	r4, r1
 80068bc:	2c63      	cmp	r4, #99	@ 0x63
 80068be:	f103 33ff 	add.w	r3, r3, #4294967295
 80068c2:	4631      	mov	r1, r6
 80068c4:	dcf1      	bgt.n	80068aa <__exponent+0x1c>
 80068c6:	3130      	adds	r1, #48	@ 0x30
 80068c8:	1e94      	subs	r4, r2, #2
 80068ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 80068ce:	1c41      	adds	r1, r0, #1
 80068d0:	4623      	mov	r3, r4
 80068d2:	42ab      	cmp	r3, r5
 80068d4:	d30a      	bcc.n	80068ec <__exponent+0x5e>
 80068d6:	f10d 0309 	add.w	r3, sp, #9
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	42ac      	cmp	r4, r5
 80068de:	bf88      	it	hi
 80068e0:	2300      	movhi	r3, #0
 80068e2:	3302      	adds	r3, #2
 80068e4:	4403      	add	r3, r0
 80068e6:	1a18      	subs	r0, r3, r0
 80068e8:	b003      	add	sp, #12
 80068ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ec:	f813 6b01 	ldrb.w	r6, [r3], #1
 80068f0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80068f4:	e7ed      	b.n	80068d2 <__exponent+0x44>
 80068f6:	2330      	movs	r3, #48	@ 0x30
 80068f8:	3130      	adds	r1, #48	@ 0x30
 80068fa:	7083      	strb	r3, [r0, #2]
 80068fc:	70c1      	strb	r1, [r0, #3]
 80068fe:	1d03      	adds	r3, r0, #4
 8006900:	e7f1      	b.n	80068e6 <__exponent+0x58>
	...

08006904 <_printf_float>:
 8006904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006908:	b08d      	sub	sp, #52	@ 0x34
 800690a:	460c      	mov	r4, r1
 800690c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006910:	4616      	mov	r6, r2
 8006912:	461f      	mov	r7, r3
 8006914:	4605      	mov	r5, r0
 8006916:	f000 ff01 	bl	800771c <_localeconv_r>
 800691a:	6803      	ldr	r3, [r0, #0]
 800691c:	9304      	str	r3, [sp, #16]
 800691e:	4618      	mov	r0, r3
 8006920:	f7f9 fca6 	bl	8000270 <strlen>
 8006924:	2300      	movs	r3, #0
 8006926:	930a      	str	r3, [sp, #40]	@ 0x28
 8006928:	f8d8 3000 	ldr.w	r3, [r8]
 800692c:	9005      	str	r0, [sp, #20]
 800692e:	3307      	adds	r3, #7
 8006930:	f023 0307 	bic.w	r3, r3, #7
 8006934:	f103 0208 	add.w	r2, r3, #8
 8006938:	f894 a018 	ldrb.w	sl, [r4, #24]
 800693c:	f8d4 b000 	ldr.w	fp, [r4]
 8006940:	f8c8 2000 	str.w	r2, [r8]
 8006944:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006948:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800694c:	9307      	str	r3, [sp, #28]
 800694e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006952:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800695a:	4b9c      	ldr	r3, [pc, #624]	@ (8006bcc <_printf_float+0x2c8>)
 800695c:	f04f 32ff 	mov.w	r2, #4294967295
 8006960:	f7fa f8e4 	bl	8000b2c <__aeabi_dcmpun>
 8006964:	bb70      	cbnz	r0, 80069c4 <_printf_float+0xc0>
 8006966:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800696a:	4b98      	ldr	r3, [pc, #608]	@ (8006bcc <_printf_float+0x2c8>)
 800696c:	f04f 32ff 	mov.w	r2, #4294967295
 8006970:	f7fa f8be 	bl	8000af0 <__aeabi_dcmple>
 8006974:	bb30      	cbnz	r0, 80069c4 <_printf_float+0xc0>
 8006976:	2200      	movs	r2, #0
 8006978:	2300      	movs	r3, #0
 800697a:	4640      	mov	r0, r8
 800697c:	4649      	mov	r1, r9
 800697e:	f7fa f8ad 	bl	8000adc <__aeabi_dcmplt>
 8006982:	b110      	cbz	r0, 800698a <_printf_float+0x86>
 8006984:	232d      	movs	r3, #45	@ 0x2d
 8006986:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800698a:	4a91      	ldr	r2, [pc, #580]	@ (8006bd0 <_printf_float+0x2cc>)
 800698c:	4b91      	ldr	r3, [pc, #580]	@ (8006bd4 <_printf_float+0x2d0>)
 800698e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006992:	bf94      	ite	ls
 8006994:	4690      	movls	r8, r2
 8006996:	4698      	movhi	r8, r3
 8006998:	2303      	movs	r3, #3
 800699a:	6123      	str	r3, [r4, #16]
 800699c:	f02b 0304 	bic.w	r3, fp, #4
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	f04f 0900 	mov.w	r9, #0
 80069a6:	9700      	str	r7, [sp, #0]
 80069a8:	4633      	mov	r3, r6
 80069aa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80069ac:	4621      	mov	r1, r4
 80069ae:	4628      	mov	r0, r5
 80069b0:	f000 f9d2 	bl	8006d58 <_printf_common>
 80069b4:	3001      	adds	r0, #1
 80069b6:	f040 808d 	bne.w	8006ad4 <_printf_float+0x1d0>
 80069ba:	f04f 30ff 	mov.w	r0, #4294967295
 80069be:	b00d      	add	sp, #52	@ 0x34
 80069c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c4:	4642      	mov	r2, r8
 80069c6:	464b      	mov	r3, r9
 80069c8:	4640      	mov	r0, r8
 80069ca:	4649      	mov	r1, r9
 80069cc:	f7fa f8ae 	bl	8000b2c <__aeabi_dcmpun>
 80069d0:	b140      	cbz	r0, 80069e4 <_printf_float+0xe0>
 80069d2:	464b      	mov	r3, r9
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	bfbc      	itt	lt
 80069d8:	232d      	movlt	r3, #45	@ 0x2d
 80069da:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80069de:	4a7e      	ldr	r2, [pc, #504]	@ (8006bd8 <_printf_float+0x2d4>)
 80069e0:	4b7e      	ldr	r3, [pc, #504]	@ (8006bdc <_printf_float+0x2d8>)
 80069e2:	e7d4      	b.n	800698e <_printf_float+0x8a>
 80069e4:	6863      	ldr	r3, [r4, #4]
 80069e6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80069ea:	9206      	str	r2, [sp, #24]
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	d13b      	bne.n	8006a68 <_printf_float+0x164>
 80069f0:	2306      	movs	r3, #6
 80069f2:	6063      	str	r3, [r4, #4]
 80069f4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80069f8:	2300      	movs	r3, #0
 80069fa:	6022      	str	r2, [r4, #0]
 80069fc:	9303      	str	r3, [sp, #12]
 80069fe:	ab0a      	add	r3, sp, #40	@ 0x28
 8006a00:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006a04:	ab09      	add	r3, sp, #36	@ 0x24
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	6861      	ldr	r1, [r4, #4]
 8006a0a:	ec49 8b10 	vmov	d0, r8, r9
 8006a0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006a12:	4628      	mov	r0, r5
 8006a14:	f7ff fed6 	bl	80067c4 <__cvt>
 8006a18:	9b06      	ldr	r3, [sp, #24]
 8006a1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a1c:	2b47      	cmp	r3, #71	@ 0x47
 8006a1e:	4680      	mov	r8, r0
 8006a20:	d129      	bne.n	8006a76 <_printf_float+0x172>
 8006a22:	1cc8      	adds	r0, r1, #3
 8006a24:	db02      	blt.n	8006a2c <_printf_float+0x128>
 8006a26:	6863      	ldr	r3, [r4, #4]
 8006a28:	4299      	cmp	r1, r3
 8006a2a:	dd41      	ble.n	8006ab0 <_printf_float+0x1ac>
 8006a2c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a30:	fa5f fa8a 	uxtb.w	sl, sl
 8006a34:	3901      	subs	r1, #1
 8006a36:	4652      	mov	r2, sl
 8006a38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a3e:	f7ff ff26 	bl	800688e <__exponent>
 8006a42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a44:	1813      	adds	r3, r2, r0
 8006a46:	2a01      	cmp	r2, #1
 8006a48:	4681      	mov	r9, r0
 8006a4a:	6123      	str	r3, [r4, #16]
 8006a4c:	dc02      	bgt.n	8006a54 <_printf_float+0x150>
 8006a4e:	6822      	ldr	r2, [r4, #0]
 8006a50:	07d2      	lsls	r2, r2, #31
 8006a52:	d501      	bpl.n	8006a58 <_printf_float+0x154>
 8006a54:	3301      	adds	r3, #1
 8006a56:	6123      	str	r3, [r4, #16]
 8006a58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d0a2      	beq.n	80069a6 <_printf_float+0xa2>
 8006a60:	232d      	movs	r3, #45	@ 0x2d
 8006a62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a66:	e79e      	b.n	80069a6 <_printf_float+0xa2>
 8006a68:	9a06      	ldr	r2, [sp, #24]
 8006a6a:	2a47      	cmp	r2, #71	@ 0x47
 8006a6c:	d1c2      	bne.n	80069f4 <_printf_float+0xf0>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1c0      	bne.n	80069f4 <_printf_float+0xf0>
 8006a72:	2301      	movs	r3, #1
 8006a74:	e7bd      	b.n	80069f2 <_printf_float+0xee>
 8006a76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a7a:	d9db      	bls.n	8006a34 <_printf_float+0x130>
 8006a7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a80:	d118      	bne.n	8006ab4 <_printf_float+0x1b0>
 8006a82:	2900      	cmp	r1, #0
 8006a84:	6863      	ldr	r3, [r4, #4]
 8006a86:	dd0b      	ble.n	8006aa0 <_printf_float+0x19c>
 8006a88:	6121      	str	r1, [r4, #16]
 8006a8a:	b913      	cbnz	r3, 8006a92 <_printf_float+0x18e>
 8006a8c:	6822      	ldr	r2, [r4, #0]
 8006a8e:	07d0      	lsls	r0, r2, #31
 8006a90:	d502      	bpl.n	8006a98 <_printf_float+0x194>
 8006a92:	3301      	adds	r3, #1
 8006a94:	440b      	add	r3, r1
 8006a96:	6123      	str	r3, [r4, #16]
 8006a98:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a9a:	f04f 0900 	mov.w	r9, #0
 8006a9e:	e7db      	b.n	8006a58 <_printf_float+0x154>
 8006aa0:	b913      	cbnz	r3, 8006aa8 <_printf_float+0x1a4>
 8006aa2:	6822      	ldr	r2, [r4, #0]
 8006aa4:	07d2      	lsls	r2, r2, #31
 8006aa6:	d501      	bpl.n	8006aac <_printf_float+0x1a8>
 8006aa8:	3302      	adds	r3, #2
 8006aaa:	e7f4      	b.n	8006a96 <_printf_float+0x192>
 8006aac:	2301      	movs	r3, #1
 8006aae:	e7f2      	b.n	8006a96 <_printf_float+0x192>
 8006ab0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ab6:	4299      	cmp	r1, r3
 8006ab8:	db05      	blt.n	8006ac6 <_printf_float+0x1c2>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	6121      	str	r1, [r4, #16]
 8006abe:	07d8      	lsls	r0, r3, #31
 8006ac0:	d5ea      	bpl.n	8006a98 <_printf_float+0x194>
 8006ac2:	1c4b      	adds	r3, r1, #1
 8006ac4:	e7e7      	b.n	8006a96 <_printf_float+0x192>
 8006ac6:	2900      	cmp	r1, #0
 8006ac8:	bfd4      	ite	le
 8006aca:	f1c1 0202 	rsble	r2, r1, #2
 8006ace:	2201      	movgt	r2, #1
 8006ad0:	4413      	add	r3, r2
 8006ad2:	e7e0      	b.n	8006a96 <_printf_float+0x192>
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	055a      	lsls	r2, r3, #21
 8006ad8:	d407      	bmi.n	8006aea <_printf_float+0x1e6>
 8006ada:	6923      	ldr	r3, [r4, #16]
 8006adc:	4642      	mov	r2, r8
 8006ade:	4631      	mov	r1, r6
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	47b8      	blx	r7
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d12b      	bne.n	8006b40 <_printf_float+0x23c>
 8006ae8:	e767      	b.n	80069ba <_printf_float+0xb6>
 8006aea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006aee:	f240 80dd 	bls.w	8006cac <_printf_float+0x3a8>
 8006af2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006af6:	2200      	movs	r2, #0
 8006af8:	2300      	movs	r3, #0
 8006afa:	f7f9 ffe5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d033      	beq.n	8006b6a <_printf_float+0x266>
 8006b02:	4a37      	ldr	r2, [pc, #220]	@ (8006be0 <_printf_float+0x2dc>)
 8006b04:	2301      	movs	r3, #1
 8006b06:	4631      	mov	r1, r6
 8006b08:	4628      	mov	r0, r5
 8006b0a:	47b8      	blx	r7
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	f43f af54 	beq.w	80069ba <_printf_float+0xb6>
 8006b12:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006b16:	4543      	cmp	r3, r8
 8006b18:	db02      	blt.n	8006b20 <_printf_float+0x21c>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	07d8      	lsls	r0, r3, #31
 8006b1e:	d50f      	bpl.n	8006b40 <_printf_float+0x23c>
 8006b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b24:	4631      	mov	r1, r6
 8006b26:	4628      	mov	r0, r5
 8006b28:	47b8      	blx	r7
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	f43f af45 	beq.w	80069ba <_printf_float+0xb6>
 8006b30:	f04f 0900 	mov.w	r9, #0
 8006b34:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b38:	f104 0a1a 	add.w	sl, r4, #26
 8006b3c:	45c8      	cmp	r8, r9
 8006b3e:	dc09      	bgt.n	8006b54 <_printf_float+0x250>
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	079b      	lsls	r3, r3, #30
 8006b44:	f100 8103 	bmi.w	8006d4e <_printf_float+0x44a>
 8006b48:	68e0      	ldr	r0, [r4, #12]
 8006b4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b4c:	4298      	cmp	r0, r3
 8006b4e:	bfb8      	it	lt
 8006b50:	4618      	movlt	r0, r3
 8006b52:	e734      	b.n	80069be <_printf_float+0xba>
 8006b54:	2301      	movs	r3, #1
 8006b56:	4652      	mov	r2, sl
 8006b58:	4631      	mov	r1, r6
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	47b8      	blx	r7
 8006b5e:	3001      	adds	r0, #1
 8006b60:	f43f af2b 	beq.w	80069ba <_printf_float+0xb6>
 8006b64:	f109 0901 	add.w	r9, r9, #1
 8006b68:	e7e8      	b.n	8006b3c <_printf_float+0x238>
 8006b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	dc39      	bgt.n	8006be4 <_printf_float+0x2e0>
 8006b70:	4a1b      	ldr	r2, [pc, #108]	@ (8006be0 <_printf_float+0x2dc>)
 8006b72:	2301      	movs	r3, #1
 8006b74:	4631      	mov	r1, r6
 8006b76:	4628      	mov	r0, r5
 8006b78:	47b8      	blx	r7
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	f43f af1d 	beq.w	80069ba <_printf_float+0xb6>
 8006b80:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b84:	ea59 0303 	orrs.w	r3, r9, r3
 8006b88:	d102      	bne.n	8006b90 <_printf_float+0x28c>
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	07d9      	lsls	r1, r3, #31
 8006b8e:	d5d7      	bpl.n	8006b40 <_printf_float+0x23c>
 8006b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b94:	4631      	mov	r1, r6
 8006b96:	4628      	mov	r0, r5
 8006b98:	47b8      	blx	r7
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	f43f af0d 	beq.w	80069ba <_printf_float+0xb6>
 8006ba0:	f04f 0a00 	mov.w	sl, #0
 8006ba4:	f104 0b1a 	add.w	fp, r4, #26
 8006ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006baa:	425b      	negs	r3, r3
 8006bac:	4553      	cmp	r3, sl
 8006bae:	dc01      	bgt.n	8006bb4 <_printf_float+0x2b0>
 8006bb0:	464b      	mov	r3, r9
 8006bb2:	e793      	b.n	8006adc <_printf_float+0x1d8>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	465a      	mov	r2, fp
 8006bb8:	4631      	mov	r1, r6
 8006bba:	4628      	mov	r0, r5
 8006bbc:	47b8      	blx	r7
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	f43f aefb 	beq.w	80069ba <_printf_float+0xb6>
 8006bc4:	f10a 0a01 	add.w	sl, sl, #1
 8006bc8:	e7ee      	b.n	8006ba8 <_printf_float+0x2a4>
 8006bca:	bf00      	nop
 8006bcc:	7fefffff 	.word	0x7fefffff
 8006bd0:	0800b618 	.word	0x0800b618
 8006bd4:	0800b61c 	.word	0x0800b61c
 8006bd8:	0800b620 	.word	0x0800b620
 8006bdc:	0800b624 	.word	0x0800b624
 8006be0:	0800b628 	.word	0x0800b628
 8006be4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006be6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006bea:	4553      	cmp	r3, sl
 8006bec:	bfa8      	it	ge
 8006bee:	4653      	movge	r3, sl
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	4699      	mov	r9, r3
 8006bf4:	dc36      	bgt.n	8006c64 <_printf_float+0x360>
 8006bf6:	f04f 0b00 	mov.w	fp, #0
 8006bfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bfe:	f104 021a 	add.w	r2, r4, #26
 8006c02:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c04:	9306      	str	r3, [sp, #24]
 8006c06:	eba3 0309 	sub.w	r3, r3, r9
 8006c0a:	455b      	cmp	r3, fp
 8006c0c:	dc31      	bgt.n	8006c72 <_printf_float+0x36e>
 8006c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c10:	459a      	cmp	sl, r3
 8006c12:	dc3a      	bgt.n	8006c8a <_printf_float+0x386>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	07da      	lsls	r2, r3, #31
 8006c18:	d437      	bmi.n	8006c8a <_printf_float+0x386>
 8006c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c1c:	ebaa 0903 	sub.w	r9, sl, r3
 8006c20:	9b06      	ldr	r3, [sp, #24]
 8006c22:	ebaa 0303 	sub.w	r3, sl, r3
 8006c26:	4599      	cmp	r9, r3
 8006c28:	bfa8      	it	ge
 8006c2a:	4699      	movge	r9, r3
 8006c2c:	f1b9 0f00 	cmp.w	r9, #0
 8006c30:	dc33      	bgt.n	8006c9a <_printf_float+0x396>
 8006c32:	f04f 0800 	mov.w	r8, #0
 8006c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c3a:	f104 0b1a 	add.w	fp, r4, #26
 8006c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c40:	ebaa 0303 	sub.w	r3, sl, r3
 8006c44:	eba3 0309 	sub.w	r3, r3, r9
 8006c48:	4543      	cmp	r3, r8
 8006c4a:	f77f af79 	ble.w	8006b40 <_printf_float+0x23c>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	465a      	mov	r2, fp
 8006c52:	4631      	mov	r1, r6
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b8      	blx	r7
 8006c58:	3001      	adds	r0, #1
 8006c5a:	f43f aeae 	beq.w	80069ba <_printf_float+0xb6>
 8006c5e:	f108 0801 	add.w	r8, r8, #1
 8006c62:	e7ec      	b.n	8006c3e <_printf_float+0x33a>
 8006c64:	4642      	mov	r2, r8
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d1c2      	bne.n	8006bf6 <_printf_float+0x2f2>
 8006c70:	e6a3      	b.n	80069ba <_printf_float+0xb6>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4631      	mov	r1, r6
 8006c76:	4628      	mov	r0, r5
 8006c78:	9206      	str	r2, [sp, #24]
 8006c7a:	47b8      	blx	r7
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	f43f ae9c 	beq.w	80069ba <_printf_float+0xb6>
 8006c82:	9a06      	ldr	r2, [sp, #24]
 8006c84:	f10b 0b01 	add.w	fp, fp, #1
 8006c88:	e7bb      	b.n	8006c02 <_printf_float+0x2fe>
 8006c8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c8e:	4631      	mov	r1, r6
 8006c90:	4628      	mov	r0, r5
 8006c92:	47b8      	blx	r7
 8006c94:	3001      	adds	r0, #1
 8006c96:	d1c0      	bne.n	8006c1a <_printf_float+0x316>
 8006c98:	e68f      	b.n	80069ba <_printf_float+0xb6>
 8006c9a:	9a06      	ldr	r2, [sp, #24]
 8006c9c:	464b      	mov	r3, r9
 8006c9e:	4442      	add	r2, r8
 8006ca0:	4631      	mov	r1, r6
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	47b8      	blx	r7
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	d1c3      	bne.n	8006c32 <_printf_float+0x32e>
 8006caa:	e686      	b.n	80069ba <_printf_float+0xb6>
 8006cac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006cb0:	f1ba 0f01 	cmp.w	sl, #1
 8006cb4:	dc01      	bgt.n	8006cba <_printf_float+0x3b6>
 8006cb6:	07db      	lsls	r3, r3, #31
 8006cb8:	d536      	bpl.n	8006d28 <_printf_float+0x424>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	4642      	mov	r2, r8
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	47b8      	blx	r7
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	f43f ae78 	beq.w	80069ba <_printf_float+0xb6>
 8006cca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cce:	4631      	mov	r1, r6
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	47b8      	blx	r7
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	f43f ae70 	beq.w	80069ba <_printf_float+0xb6>
 8006cda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ce6:	f7f9 feef 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cea:	b9c0      	cbnz	r0, 8006d1e <_printf_float+0x41a>
 8006cec:	4653      	mov	r3, sl
 8006cee:	f108 0201 	add.w	r2, r8, #1
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	47b8      	blx	r7
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d10c      	bne.n	8006d16 <_printf_float+0x412>
 8006cfc:	e65d      	b.n	80069ba <_printf_float+0xb6>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	465a      	mov	r2, fp
 8006d02:	4631      	mov	r1, r6
 8006d04:	4628      	mov	r0, r5
 8006d06:	47b8      	blx	r7
 8006d08:	3001      	adds	r0, #1
 8006d0a:	f43f ae56 	beq.w	80069ba <_printf_float+0xb6>
 8006d0e:	f108 0801 	add.w	r8, r8, #1
 8006d12:	45d0      	cmp	r8, sl
 8006d14:	dbf3      	blt.n	8006cfe <_printf_float+0x3fa>
 8006d16:	464b      	mov	r3, r9
 8006d18:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d1c:	e6df      	b.n	8006ade <_printf_float+0x1da>
 8006d1e:	f04f 0800 	mov.w	r8, #0
 8006d22:	f104 0b1a 	add.w	fp, r4, #26
 8006d26:	e7f4      	b.n	8006d12 <_printf_float+0x40e>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	4642      	mov	r2, r8
 8006d2c:	e7e1      	b.n	8006cf2 <_printf_float+0x3ee>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	464a      	mov	r2, r9
 8006d32:	4631      	mov	r1, r6
 8006d34:	4628      	mov	r0, r5
 8006d36:	47b8      	blx	r7
 8006d38:	3001      	adds	r0, #1
 8006d3a:	f43f ae3e 	beq.w	80069ba <_printf_float+0xb6>
 8006d3e:	f108 0801 	add.w	r8, r8, #1
 8006d42:	68e3      	ldr	r3, [r4, #12]
 8006d44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d46:	1a5b      	subs	r3, r3, r1
 8006d48:	4543      	cmp	r3, r8
 8006d4a:	dcf0      	bgt.n	8006d2e <_printf_float+0x42a>
 8006d4c:	e6fc      	b.n	8006b48 <_printf_float+0x244>
 8006d4e:	f04f 0800 	mov.w	r8, #0
 8006d52:	f104 0919 	add.w	r9, r4, #25
 8006d56:	e7f4      	b.n	8006d42 <_printf_float+0x43e>

08006d58 <_printf_common>:
 8006d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d5c:	4616      	mov	r6, r2
 8006d5e:	4698      	mov	r8, r3
 8006d60:	688a      	ldr	r2, [r1, #8]
 8006d62:	690b      	ldr	r3, [r1, #16]
 8006d64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	bfb8      	it	lt
 8006d6c:	4613      	movlt	r3, r2
 8006d6e:	6033      	str	r3, [r6, #0]
 8006d70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d74:	4607      	mov	r7, r0
 8006d76:	460c      	mov	r4, r1
 8006d78:	b10a      	cbz	r2, 8006d7e <_printf_common+0x26>
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	6033      	str	r3, [r6, #0]
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	0699      	lsls	r1, r3, #26
 8006d82:	bf42      	ittt	mi
 8006d84:	6833      	ldrmi	r3, [r6, #0]
 8006d86:	3302      	addmi	r3, #2
 8006d88:	6033      	strmi	r3, [r6, #0]
 8006d8a:	6825      	ldr	r5, [r4, #0]
 8006d8c:	f015 0506 	ands.w	r5, r5, #6
 8006d90:	d106      	bne.n	8006da0 <_printf_common+0x48>
 8006d92:	f104 0a19 	add.w	sl, r4, #25
 8006d96:	68e3      	ldr	r3, [r4, #12]
 8006d98:	6832      	ldr	r2, [r6, #0]
 8006d9a:	1a9b      	subs	r3, r3, r2
 8006d9c:	42ab      	cmp	r3, r5
 8006d9e:	dc26      	bgt.n	8006dee <_printf_common+0x96>
 8006da0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006da4:	6822      	ldr	r2, [r4, #0]
 8006da6:	3b00      	subs	r3, #0
 8006da8:	bf18      	it	ne
 8006daa:	2301      	movne	r3, #1
 8006dac:	0692      	lsls	r2, r2, #26
 8006dae:	d42b      	bmi.n	8006e08 <_printf_common+0xb0>
 8006db0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006db4:	4641      	mov	r1, r8
 8006db6:	4638      	mov	r0, r7
 8006db8:	47c8      	blx	r9
 8006dba:	3001      	adds	r0, #1
 8006dbc:	d01e      	beq.n	8006dfc <_printf_common+0xa4>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	6922      	ldr	r2, [r4, #16]
 8006dc2:	f003 0306 	and.w	r3, r3, #6
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	bf02      	ittt	eq
 8006dca:	68e5      	ldreq	r5, [r4, #12]
 8006dcc:	6833      	ldreq	r3, [r6, #0]
 8006dce:	1aed      	subeq	r5, r5, r3
 8006dd0:	68a3      	ldr	r3, [r4, #8]
 8006dd2:	bf0c      	ite	eq
 8006dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dd8:	2500      	movne	r5, #0
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	bfc4      	itt	gt
 8006dde:	1a9b      	subgt	r3, r3, r2
 8006de0:	18ed      	addgt	r5, r5, r3
 8006de2:	2600      	movs	r6, #0
 8006de4:	341a      	adds	r4, #26
 8006de6:	42b5      	cmp	r5, r6
 8006de8:	d11a      	bne.n	8006e20 <_printf_common+0xc8>
 8006dea:	2000      	movs	r0, #0
 8006dec:	e008      	b.n	8006e00 <_printf_common+0xa8>
 8006dee:	2301      	movs	r3, #1
 8006df0:	4652      	mov	r2, sl
 8006df2:	4641      	mov	r1, r8
 8006df4:	4638      	mov	r0, r7
 8006df6:	47c8      	blx	r9
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d103      	bne.n	8006e04 <_printf_common+0xac>
 8006dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e04:	3501      	adds	r5, #1
 8006e06:	e7c6      	b.n	8006d96 <_printf_common+0x3e>
 8006e08:	18e1      	adds	r1, r4, r3
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	2030      	movs	r0, #48	@ 0x30
 8006e0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e12:	4422      	add	r2, r4
 8006e14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e1c:	3302      	adds	r3, #2
 8006e1e:	e7c7      	b.n	8006db0 <_printf_common+0x58>
 8006e20:	2301      	movs	r3, #1
 8006e22:	4622      	mov	r2, r4
 8006e24:	4641      	mov	r1, r8
 8006e26:	4638      	mov	r0, r7
 8006e28:	47c8      	blx	r9
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	d0e6      	beq.n	8006dfc <_printf_common+0xa4>
 8006e2e:	3601      	adds	r6, #1
 8006e30:	e7d9      	b.n	8006de6 <_printf_common+0x8e>
	...

08006e34 <_printf_i>:
 8006e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e38:	7e0f      	ldrb	r7, [r1, #24]
 8006e3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e3c:	2f78      	cmp	r7, #120	@ 0x78
 8006e3e:	4691      	mov	r9, r2
 8006e40:	4680      	mov	r8, r0
 8006e42:	460c      	mov	r4, r1
 8006e44:	469a      	mov	sl, r3
 8006e46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e4a:	d807      	bhi.n	8006e5c <_printf_i+0x28>
 8006e4c:	2f62      	cmp	r7, #98	@ 0x62
 8006e4e:	d80a      	bhi.n	8006e66 <_printf_i+0x32>
 8006e50:	2f00      	cmp	r7, #0
 8006e52:	f000 80d2 	beq.w	8006ffa <_printf_i+0x1c6>
 8006e56:	2f58      	cmp	r7, #88	@ 0x58
 8006e58:	f000 80b9 	beq.w	8006fce <_printf_i+0x19a>
 8006e5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e64:	e03a      	b.n	8006edc <_printf_i+0xa8>
 8006e66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e6a:	2b15      	cmp	r3, #21
 8006e6c:	d8f6      	bhi.n	8006e5c <_printf_i+0x28>
 8006e6e:	a101      	add	r1, pc, #4	@ (adr r1, 8006e74 <_printf_i+0x40>)
 8006e70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e74:	08006ecd 	.word	0x08006ecd
 8006e78:	08006ee1 	.word	0x08006ee1
 8006e7c:	08006e5d 	.word	0x08006e5d
 8006e80:	08006e5d 	.word	0x08006e5d
 8006e84:	08006e5d 	.word	0x08006e5d
 8006e88:	08006e5d 	.word	0x08006e5d
 8006e8c:	08006ee1 	.word	0x08006ee1
 8006e90:	08006e5d 	.word	0x08006e5d
 8006e94:	08006e5d 	.word	0x08006e5d
 8006e98:	08006e5d 	.word	0x08006e5d
 8006e9c:	08006e5d 	.word	0x08006e5d
 8006ea0:	08006fe1 	.word	0x08006fe1
 8006ea4:	08006f0b 	.word	0x08006f0b
 8006ea8:	08006f9b 	.word	0x08006f9b
 8006eac:	08006e5d 	.word	0x08006e5d
 8006eb0:	08006e5d 	.word	0x08006e5d
 8006eb4:	08007003 	.word	0x08007003
 8006eb8:	08006e5d 	.word	0x08006e5d
 8006ebc:	08006f0b 	.word	0x08006f0b
 8006ec0:	08006e5d 	.word	0x08006e5d
 8006ec4:	08006e5d 	.word	0x08006e5d
 8006ec8:	08006fa3 	.word	0x08006fa3
 8006ecc:	6833      	ldr	r3, [r6, #0]
 8006ece:	1d1a      	adds	r2, r3, #4
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6032      	str	r2, [r6, #0]
 8006ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ed8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006edc:	2301      	movs	r3, #1
 8006ede:	e09d      	b.n	800701c <_printf_i+0x1e8>
 8006ee0:	6833      	ldr	r3, [r6, #0]
 8006ee2:	6820      	ldr	r0, [r4, #0]
 8006ee4:	1d19      	adds	r1, r3, #4
 8006ee6:	6031      	str	r1, [r6, #0]
 8006ee8:	0606      	lsls	r6, r0, #24
 8006eea:	d501      	bpl.n	8006ef0 <_printf_i+0xbc>
 8006eec:	681d      	ldr	r5, [r3, #0]
 8006eee:	e003      	b.n	8006ef8 <_printf_i+0xc4>
 8006ef0:	0645      	lsls	r5, r0, #25
 8006ef2:	d5fb      	bpl.n	8006eec <_printf_i+0xb8>
 8006ef4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ef8:	2d00      	cmp	r5, #0
 8006efa:	da03      	bge.n	8006f04 <_printf_i+0xd0>
 8006efc:	232d      	movs	r3, #45	@ 0x2d
 8006efe:	426d      	negs	r5, r5
 8006f00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f04:	4859      	ldr	r0, [pc, #356]	@ (800706c <_printf_i+0x238>)
 8006f06:	230a      	movs	r3, #10
 8006f08:	e011      	b.n	8006f2e <_printf_i+0xfa>
 8006f0a:	6821      	ldr	r1, [r4, #0]
 8006f0c:	6833      	ldr	r3, [r6, #0]
 8006f0e:	0608      	lsls	r0, r1, #24
 8006f10:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f14:	d402      	bmi.n	8006f1c <_printf_i+0xe8>
 8006f16:	0649      	lsls	r1, r1, #25
 8006f18:	bf48      	it	mi
 8006f1a:	b2ad      	uxthmi	r5, r5
 8006f1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f1e:	4853      	ldr	r0, [pc, #332]	@ (800706c <_printf_i+0x238>)
 8006f20:	6033      	str	r3, [r6, #0]
 8006f22:	bf14      	ite	ne
 8006f24:	230a      	movne	r3, #10
 8006f26:	2308      	moveq	r3, #8
 8006f28:	2100      	movs	r1, #0
 8006f2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f2e:	6866      	ldr	r6, [r4, #4]
 8006f30:	60a6      	str	r6, [r4, #8]
 8006f32:	2e00      	cmp	r6, #0
 8006f34:	bfa2      	ittt	ge
 8006f36:	6821      	ldrge	r1, [r4, #0]
 8006f38:	f021 0104 	bicge.w	r1, r1, #4
 8006f3c:	6021      	strge	r1, [r4, #0]
 8006f3e:	b90d      	cbnz	r5, 8006f44 <_printf_i+0x110>
 8006f40:	2e00      	cmp	r6, #0
 8006f42:	d04b      	beq.n	8006fdc <_printf_i+0x1a8>
 8006f44:	4616      	mov	r6, r2
 8006f46:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f4a:	fb03 5711 	mls	r7, r3, r1, r5
 8006f4e:	5dc7      	ldrb	r7, [r0, r7]
 8006f50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f54:	462f      	mov	r7, r5
 8006f56:	42bb      	cmp	r3, r7
 8006f58:	460d      	mov	r5, r1
 8006f5a:	d9f4      	bls.n	8006f46 <_printf_i+0x112>
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d10b      	bne.n	8006f78 <_printf_i+0x144>
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	07df      	lsls	r7, r3, #31
 8006f64:	d508      	bpl.n	8006f78 <_printf_i+0x144>
 8006f66:	6923      	ldr	r3, [r4, #16]
 8006f68:	6861      	ldr	r1, [r4, #4]
 8006f6a:	4299      	cmp	r1, r3
 8006f6c:	bfde      	ittt	le
 8006f6e:	2330      	movle	r3, #48	@ 0x30
 8006f70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f78:	1b92      	subs	r2, r2, r6
 8006f7a:	6122      	str	r2, [r4, #16]
 8006f7c:	f8cd a000 	str.w	sl, [sp]
 8006f80:	464b      	mov	r3, r9
 8006f82:	aa03      	add	r2, sp, #12
 8006f84:	4621      	mov	r1, r4
 8006f86:	4640      	mov	r0, r8
 8006f88:	f7ff fee6 	bl	8006d58 <_printf_common>
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	d14a      	bne.n	8007026 <_printf_i+0x1f2>
 8006f90:	f04f 30ff 	mov.w	r0, #4294967295
 8006f94:	b004      	add	sp, #16
 8006f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	f043 0320 	orr.w	r3, r3, #32
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	4833      	ldr	r0, [pc, #204]	@ (8007070 <_printf_i+0x23c>)
 8006fa4:	2778      	movs	r7, #120	@ 0x78
 8006fa6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	6831      	ldr	r1, [r6, #0]
 8006fae:	061f      	lsls	r7, r3, #24
 8006fb0:	f851 5b04 	ldr.w	r5, [r1], #4
 8006fb4:	d402      	bmi.n	8006fbc <_printf_i+0x188>
 8006fb6:	065f      	lsls	r7, r3, #25
 8006fb8:	bf48      	it	mi
 8006fba:	b2ad      	uxthmi	r5, r5
 8006fbc:	6031      	str	r1, [r6, #0]
 8006fbe:	07d9      	lsls	r1, r3, #31
 8006fc0:	bf44      	itt	mi
 8006fc2:	f043 0320 	orrmi.w	r3, r3, #32
 8006fc6:	6023      	strmi	r3, [r4, #0]
 8006fc8:	b11d      	cbz	r5, 8006fd2 <_printf_i+0x19e>
 8006fca:	2310      	movs	r3, #16
 8006fcc:	e7ac      	b.n	8006f28 <_printf_i+0xf4>
 8006fce:	4827      	ldr	r0, [pc, #156]	@ (800706c <_printf_i+0x238>)
 8006fd0:	e7e9      	b.n	8006fa6 <_printf_i+0x172>
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	f023 0320 	bic.w	r3, r3, #32
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	e7f6      	b.n	8006fca <_printf_i+0x196>
 8006fdc:	4616      	mov	r6, r2
 8006fde:	e7bd      	b.n	8006f5c <_printf_i+0x128>
 8006fe0:	6833      	ldr	r3, [r6, #0]
 8006fe2:	6825      	ldr	r5, [r4, #0]
 8006fe4:	6961      	ldr	r1, [r4, #20]
 8006fe6:	1d18      	adds	r0, r3, #4
 8006fe8:	6030      	str	r0, [r6, #0]
 8006fea:	062e      	lsls	r6, r5, #24
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	d501      	bpl.n	8006ff4 <_printf_i+0x1c0>
 8006ff0:	6019      	str	r1, [r3, #0]
 8006ff2:	e002      	b.n	8006ffa <_printf_i+0x1c6>
 8006ff4:	0668      	lsls	r0, r5, #25
 8006ff6:	d5fb      	bpl.n	8006ff0 <_printf_i+0x1bc>
 8006ff8:	8019      	strh	r1, [r3, #0]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	6123      	str	r3, [r4, #16]
 8006ffe:	4616      	mov	r6, r2
 8007000:	e7bc      	b.n	8006f7c <_printf_i+0x148>
 8007002:	6833      	ldr	r3, [r6, #0]
 8007004:	1d1a      	adds	r2, r3, #4
 8007006:	6032      	str	r2, [r6, #0]
 8007008:	681e      	ldr	r6, [r3, #0]
 800700a:	6862      	ldr	r2, [r4, #4]
 800700c:	2100      	movs	r1, #0
 800700e:	4630      	mov	r0, r6
 8007010:	f7f9 f8de 	bl	80001d0 <memchr>
 8007014:	b108      	cbz	r0, 800701a <_printf_i+0x1e6>
 8007016:	1b80      	subs	r0, r0, r6
 8007018:	6060      	str	r0, [r4, #4]
 800701a:	6863      	ldr	r3, [r4, #4]
 800701c:	6123      	str	r3, [r4, #16]
 800701e:	2300      	movs	r3, #0
 8007020:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007024:	e7aa      	b.n	8006f7c <_printf_i+0x148>
 8007026:	6923      	ldr	r3, [r4, #16]
 8007028:	4632      	mov	r2, r6
 800702a:	4649      	mov	r1, r9
 800702c:	4640      	mov	r0, r8
 800702e:	47d0      	blx	sl
 8007030:	3001      	adds	r0, #1
 8007032:	d0ad      	beq.n	8006f90 <_printf_i+0x15c>
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	079b      	lsls	r3, r3, #30
 8007038:	d413      	bmi.n	8007062 <_printf_i+0x22e>
 800703a:	68e0      	ldr	r0, [r4, #12]
 800703c:	9b03      	ldr	r3, [sp, #12]
 800703e:	4298      	cmp	r0, r3
 8007040:	bfb8      	it	lt
 8007042:	4618      	movlt	r0, r3
 8007044:	e7a6      	b.n	8006f94 <_printf_i+0x160>
 8007046:	2301      	movs	r3, #1
 8007048:	4632      	mov	r2, r6
 800704a:	4649      	mov	r1, r9
 800704c:	4640      	mov	r0, r8
 800704e:	47d0      	blx	sl
 8007050:	3001      	adds	r0, #1
 8007052:	d09d      	beq.n	8006f90 <_printf_i+0x15c>
 8007054:	3501      	adds	r5, #1
 8007056:	68e3      	ldr	r3, [r4, #12]
 8007058:	9903      	ldr	r1, [sp, #12]
 800705a:	1a5b      	subs	r3, r3, r1
 800705c:	42ab      	cmp	r3, r5
 800705e:	dcf2      	bgt.n	8007046 <_printf_i+0x212>
 8007060:	e7eb      	b.n	800703a <_printf_i+0x206>
 8007062:	2500      	movs	r5, #0
 8007064:	f104 0619 	add.w	r6, r4, #25
 8007068:	e7f5      	b.n	8007056 <_printf_i+0x222>
 800706a:	bf00      	nop
 800706c:	0800b62a 	.word	0x0800b62a
 8007070:	0800b63b 	.word	0x0800b63b

08007074 <_scanf_float>:
 8007074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	b087      	sub	sp, #28
 800707a:	4617      	mov	r7, r2
 800707c:	9303      	str	r3, [sp, #12]
 800707e:	688b      	ldr	r3, [r1, #8]
 8007080:	1e5a      	subs	r2, r3, #1
 8007082:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007086:	bf81      	itttt	hi
 8007088:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800708c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007090:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007094:	608b      	strhi	r3, [r1, #8]
 8007096:	680b      	ldr	r3, [r1, #0]
 8007098:	460a      	mov	r2, r1
 800709a:	f04f 0500 	mov.w	r5, #0
 800709e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80070a2:	f842 3b1c 	str.w	r3, [r2], #28
 80070a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80070aa:	4680      	mov	r8, r0
 80070ac:	460c      	mov	r4, r1
 80070ae:	bf98      	it	ls
 80070b0:	f04f 0b00 	movls.w	fp, #0
 80070b4:	9201      	str	r2, [sp, #4]
 80070b6:	4616      	mov	r6, r2
 80070b8:	46aa      	mov	sl, r5
 80070ba:	46a9      	mov	r9, r5
 80070bc:	9502      	str	r5, [sp, #8]
 80070be:	68a2      	ldr	r2, [r4, #8]
 80070c0:	b152      	cbz	r2, 80070d8 <_scanf_float+0x64>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	2b4e      	cmp	r3, #78	@ 0x4e
 80070c8:	d864      	bhi.n	8007194 <_scanf_float+0x120>
 80070ca:	2b40      	cmp	r3, #64	@ 0x40
 80070cc:	d83c      	bhi.n	8007148 <_scanf_float+0xd4>
 80070ce:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80070d2:	b2c8      	uxtb	r0, r1
 80070d4:	280e      	cmp	r0, #14
 80070d6:	d93a      	bls.n	800714e <_scanf_float+0xda>
 80070d8:	f1b9 0f00 	cmp.w	r9, #0
 80070dc:	d003      	beq.n	80070e6 <_scanf_float+0x72>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070ea:	f1ba 0f01 	cmp.w	sl, #1
 80070ee:	f200 8117 	bhi.w	8007320 <_scanf_float+0x2ac>
 80070f2:	9b01      	ldr	r3, [sp, #4]
 80070f4:	429e      	cmp	r6, r3
 80070f6:	f200 8108 	bhi.w	800730a <_scanf_float+0x296>
 80070fa:	2001      	movs	r0, #1
 80070fc:	b007      	add	sp, #28
 80070fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007102:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007106:	2a0d      	cmp	r2, #13
 8007108:	d8e6      	bhi.n	80070d8 <_scanf_float+0x64>
 800710a:	a101      	add	r1, pc, #4	@ (adr r1, 8007110 <_scanf_float+0x9c>)
 800710c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007110:	08007257 	.word	0x08007257
 8007114:	080070d9 	.word	0x080070d9
 8007118:	080070d9 	.word	0x080070d9
 800711c:	080070d9 	.word	0x080070d9
 8007120:	080072b7 	.word	0x080072b7
 8007124:	0800728f 	.word	0x0800728f
 8007128:	080070d9 	.word	0x080070d9
 800712c:	080070d9 	.word	0x080070d9
 8007130:	08007265 	.word	0x08007265
 8007134:	080070d9 	.word	0x080070d9
 8007138:	080070d9 	.word	0x080070d9
 800713c:	080070d9 	.word	0x080070d9
 8007140:	080070d9 	.word	0x080070d9
 8007144:	0800721d 	.word	0x0800721d
 8007148:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800714c:	e7db      	b.n	8007106 <_scanf_float+0x92>
 800714e:	290e      	cmp	r1, #14
 8007150:	d8c2      	bhi.n	80070d8 <_scanf_float+0x64>
 8007152:	a001      	add	r0, pc, #4	@ (adr r0, 8007158 <_scanf_float+0xe4>)
 8007154:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007158:	0800720d 	.word	0x0800720d
 800715c:	080070d9 	.word	0x080070d9
 8007160:	0800720d 	.word	0x0800720d
 8007164:	080072a3 	.word	0x080072a3
 8007168:	080070d9 	.word	0x080070d9
 800716c:	080071b5 	.word	0x080071b5
 8007170:	080071f3 	.word	0x080071f3
 8007174:	080071f3 	.word	0x080071f3
 8007178:	080071f3 	.word	0x080071f3
 800717c:	080071f3 	.word	0x080071f3
 8007180:	080071f3 	.word	0x080071f3
 8007184:	080071f3 	.word	0x080071f3
 8007188:	080071f3 	.word	0x080071f3
 800718c:	080071f3 	.word	0x080071f3
 8007190:	080071f3 	.word	0x080071f3
 8007194:	2b6e      	cmp	r3, #110	@ 0x6e
 8007196:	d809      	bhi.n	80071ac <_scanf_float+0x138>
 8007198:	2b60      	cmp	r3, #96	@ 0x60
 800719a:	d8b2      	bhi.n	8007102 <_scanf_float+0x8e>
 800719c:	2b54      	cmp	r3, #84	@ 0x54
 800719e:	d07b      	beq.n	8007298 <_scanf_float+0x224>
 80071a0:	2b59      	cmp	r3, #89	@ 0x59
 80071a2:	d199      	bne.n	80070d8 <_scanf_float+0x64>
 80071a4:	2d07      	cmp	r5, #7
 80071a6:	d197      	bne.n	80070d8 <_scanf_float+0x64>
 80071a8:	2508      	movs	r5, #8
 80071aa:	e02c      	b.n	8007206 <_scanf_float+0x192>
 80071ac:	2b74      	cmp	r3, #116	@ 0x74
 80071ae:	d073      	beq.n	8007298 <_scanf_float+0x224>
 80071b0:	2b79      	cmp	r3, #121	@ 0x79
 80071b2:	e7f6      	b.n	80071a2 <_scanf_float+0x12e>
 80071b4:	6821      	ldr	r1, [r4, #0]
 80071b6:	05c8      	lsls	r0, r1, #23
 80071b8:	d51b      	bpl.n	80071f2 <_scanf_float+0x17e>
 80071ba:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80071be:	6021      	str	r1, [r4, #0]
 80071c0:	f109 0901 	add.w	r9, r9, #1
 80071c4:	f1bb 0f00 	cmp.w	fp, #0
 80071c8:	d003      	beq.n	80071d2 <_scanf_float+0x15e>
 80071ca:	3201      	adds	r2, #1
 80071cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071d0:	60a2      	str	r2, [r4, #8]
 80071d2:	68a3      	ldr	r3, [r4, #8]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	60a3      	str	r3, [r4, #8]
 80071d8:	6923      	ldr	r3, [r4, #16]
 80071da:	3301      	adds	r3, #1
 80071dc:	6123      	str	r3, [r4, #16]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3b01      	subs	r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	607b      	str	r3, [r7, #4]
 80071e6:	f340 8087 	ble.w	80072f8 <_scanf_float+0x284>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	3301      	adds	r3, #1
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	e765      	b.n	80070be <_scanf_float+0x4a>
 80071f2:	eb1a 0105 	adds.w	r1, sl, r5
 80071f6:	f47f af6f 	bne.w	80070d8 <_scanf_float+0x64>
 80071fa:	6822      	ldr	r2, [r4, #0]
 80071fc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007200:	6022      	str	r2, [r4, #0]
 8007202:	460d      	mov	r5, r1
 8007204:	468a      	mov	sl, r1
 8007206:	f806 3b01 	strb.w	r3, [r6], #1
 800720a:	e7e2      	b.n	80071d2 <_scanf_float+0x15e>
 800720c:	6822      	ldr	r2, [r4, #0]
 800720e:	0610      	lsls	r0, r2, #24
 8007210:	f57f af62 	bpl.w	80070d8 <_scanf_float+0x64>
 8007214:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007218:	6022      	str	r2, [r4, #0]
 800721a:	e7f4      	b.n	8007206 <_scanf_float+0x192>
 800721c:	f1ba 0f00 	cmp.w	sl, #0
 8007220:	d10e      	bne.n	8007240 <_scanf_float+0x1cc>
 8007222:	f1b9 0f00 	cmp.w	r9, #0
 8007226:	d10e      	bne.n	8007246 <_scanf_float+0x1d2>
 8007228:	6822      	ldr	r2, [r4, #0]
 800722a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800722e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007232:	d108      	bne.n	8007246 <_scanf_float+0x1d2>
 8007234:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007238:	6022      	str	r2, [r4, #0]
 800723a:	f04f 0a01 	mov.w	sl, #1
 800723e:	e7e2      	b.n	8007206 <_scanf_float+0x192>
 8007240:	f1ba 0f02 	cmp.w	sl, #2
 8007244:	d055      	beq.n	80072f2 <_scanf_float+0x27e>
 8007246:	2d01      	cmp	r5, #1
 8007248:	d002      	beq.n	8007250 <_scanf_float+0x1dc>
 800724a:	2d04      	cmp	r5, #4
 800724c:	f47f af44 	bne.w	80070d8 <_scanf_float+0x64>
 8007250:	3501      	adds	r5, #1
 8007252:	b2ed      	uxtb	r5, r5
 8007254:	e7d7      	b.n	8007206 <_scanf_float+0x192>
 8007256:	f1ba 0f01 	cmp.w	sl, #1
 800725a:	f47f af3d 	bne.w	80070d8 <_scanf_float+0x64>
 800725e:	f04f 0a02 	mov.w	sl, #2
 8007262:	e7d0      	b.n	8007206 <_scanf_float+0x192>
 8007264:	b97d      	cbnz	r5, 8007286 <_scanf_float+0x212>
 8007266:	f1b9 0f00 	cmp.w	r9, #0
 800726a:	f47f af38 	bne.w	80070de <_scanf_float+0x6a>
 800726e:	6822      	ldr	r2, [r4, #0]
 8007270:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007274:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007278:	f040 8108 	bne.w	800748c <_scanf_float+0x418>
 800727c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007280:	6022      	str	r2, [r4, #0]
 8007282:	2501      	movs	r5, #1
 8007284:	e7bf      	b.n	8007206 <_scanf_float+0x192>
 8007286:	2d03      	cmp	r5, #3
 8007288:	d0e2      	beq.n	8007250 <_scanf_float+0x1dc>
 800728a:	2d05      	cmp	r5, #5
 800728c:	e7de      	b.n	800724c <_scanf_float+0x1d8>
 800728e:	2d02      	cmp	r5, #2
 8007290:	f47f af22 	bne.w	80070d8 <_scanf_float+0x64>
 8007294:	2503      	movs	r5, #3
 8007296:	e7b6      	b.n	8007206 <_scanf_float+0x192>
 8007298:	2d06      	cmp	r5, #6
 800729a:	f47f af1d 	bne.w	80070d8 <_scanf_float+0x64>
 800729e:	2507      	movs	r5, #7
 80072a0:	e7b1      	b.n	8007206 <_scanf_float+0x192>
 80072a2:	6822      	ldr	r2, [r4, #0]
 80072a4:	0591      	lsls	r1, r2, #22
 80072a6:	f57f af17 	bpl.w	80070d8 <_scanf_float+0x64>
 80072aa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80072ae:	6022      	str	r2, [r4, #0]
 80072b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80072b4:	e7a7      	b.n	8007206 <_scanf_float+0x192>
 80072b6:	6822      	ldr	r2, [r4, #0]
 80072b8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80072bc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80072c0:	d006      	beq.n	80072d0 <_scanf_float+0x25c>
 80072c2:	0550      	lsls	r0, r2, #21
 80072c4:	f57f af08 	bpl.w	80070d8 <_scanf_float+0x64>
 80072c8:	f1b9 0f00 	cmp.w	r9, #0
 80072cc:	f000 80de 	beq.w	800748c <_scanf_float+0x418>
 80072d0:	0591      	lsls	r1, r2, #22
 80072d2:	bf58      	it	pl
 80072d4:	9902      	ldrpl	r1, [sp, #8]
 80072d6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80072da:	bf58      	it	pl
 80072dc:	eba9 0101 	subpl.w	r1, r9, r1
 80072e0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80072e4:	bf58      	it	pl
 80072e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80072ea:	6022      	str	r2, [r4, #0]
 80072ec:	f04f 0900 	mov.w	r9, #0
 80072f0:	e789      	b.n	8007206 <_scanf_float+0x192>
 80072f2:	f04f 0a03 	mov.w	sl, #3
 80072f6:	e786      	b.n	8007206 <_scanf_float+0x192>
 80072f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80072fc:	4639      	mov	r1, r7
 80072fe:	4640      	mov	r0, r8
 8007300:	4798      	blx	r3
 8007302:	2800      	cmp	r0, #0
 8007304:	f43f aedb 	beq.w	80070be <_scanf_float+0x4a>
 8007308:	e6e6      	b.n	80070d8 <_scanf_float+0x64>
 800730a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800730e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007312:	463a      	mov	r2, r7
 8007314:	4640      	mov	r0, r8
 8007316:	4798      	blx	r3
 8007318:	6923      	ldr	r3, [r4, #16]
 800731a:	3b01      	subs	r3, #1
 800731c:	6123      	str	r3, [r4, #16]
 800731e:	e6e8      	b.n	80070f2 <_scanf_float+0x7e>
 8007320:	1e6b      	subs	r3, r5, #1
 8007322:	2b06      	cmp	r3, #6
 8007324:	d824      	bhi.n	8007370 <_scanf_float+0x2fc>
 8007326:	2d02      	cmp	r5, #2
 8007328:	d836      	bhi.n	8007398 <_scanf_float+0x324>
 800732a:	9b01      	ldr	r3, [sp, #4]
 800732c:	429e      	cmp	r6, r3
 800732e:	f67f aee4 	bls.w	80070fa <_scanf_float+0x86>
 8007332:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007336:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800733a:	463a      	mov	r2, r7
 800733c:	4640      	mov	r0, r8
 800733e:	4798      	blx	r3
 8007340:	6923      	ldr	r3, [r4, #16]
 8007342:	3b01      	subs	r3, #1
 8007344:	6123      	str	r3, [r4, #16]
 8007346:	e7f0      	b.n	800732a <_scanf_float+0x2b6>
 8007348:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800734c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007350:	463a      	mov	r2, r7
 8007352:	4640      	mov	r0, r8
 8007354:	4798      	blx	r3
 8007356:	6923      	ldr	r3, [r4, #16]
 8007358:	3b01      	subs	r3, #1
 800735a:	6123      	str	r3, [r4, #16]
 800735c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007360:	fa5f fa8a 	uxtb.w	sl, sl
 8007364:	f1ba 0f02 	cmp.w	sl, #2
 8007368:	d1ee      	bne.n	8007348 <_scanf_float+0x2d4>
 800736a:	3d03      	subs	r5, #3
 800736c:	b2ed      	uxtb	r5, r5
 800736e:	1b76      	subs	r6, r6, r5
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	05da      	lsls	r2, r3, #23
 8007374:	d530      	bpl.n	80073d8 <_scanf_float+0x364>
 8007376:	055b      	lsls	r3, r3, #21
 8007378:	d511      	bpl.n	800739e <_scanf_float+0x32a>
 800737a:	9b01      	ldr	r3, [sp, #4]
 800737c:	429e      	cmp	r6, r3
 800737e:	f67f aebc 	bls.w	80070fa <_scanf_float+0x86>
 8007382:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007386:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800738a:	463a      	mov	r2, r7
 800738c:	4640      	mov	r0, r8
 800738e:	4798      	blx	r3
 8007390:	6923      	ldr	r3, [r4, #16]
 8007392:	3b01      	subs	r3, #1
 8007394:	6123      	str	r3, [r4, #16]
 8007396:	e7f0      	b.n	800737a <_scanf_float+0x306>
 8007398:	46aa      	mov	sl, r5
 800739a:	46b3      	mov	fp, r6
 800739c:	e7de      	b.n	800735c <_scanf_float+0x2e8>
 800739e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80073a2:	6923      	ldr	r3, [r4, #16]
 80073a4:	2965      	cmp	r1, #101	@ 0x65
 80073a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80073aa:	f106 35ff 	add.w	r5, r6, #4294967295
 80073ae:	6123      	str	r3, [r4, #16]
 80073b0:	d00c      	beq.n	80073cc <_scanf_float+0x358>
 80073b2:	2945      	cmp	r1, #69	@ 0x45
 80073b4:	d00a      	beq.n	80073cc <_scanf_float+0x358>
 80073b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073ba:	463a      	mov	r2, r7
 80073bc:	4640      	mov	r0, r8
 80073be:	4798      	blx	r3
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	1eb5      	subs	r5, r6, #2
 80073ca:	6123      	str	r3, [r4, #16]
 80073cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073d0:	463a      	mov	r2, r7
 80073d2:	4640      	mov	r0, r8
 80073d4:	4798      	blx	r3
 80073d6:	462e      	mov	r6, r5
 80073d8:	6822      	ldr	r2, [r4, #0]
 80073da:	f012 0210 	ands.w	r2, r2, #16
 80073de:	d001      	beq.n	80073e4 <_scanf_float+0x370>
 80073e0:	2000      	movs	r0, #0
 80073e2:	e68b      	b.n	80070fc <_scanf_float+0x88>
 80073e4:	7032      	strb	r2, [r6, #0]
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80073ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073f0:	d11c      	bne.n	800742c <_scanf_float+0x3b8>
 80073f2:	9b02      	ldr	r3, [sp, #8]
 80073f4:	454b      	cmp	r3, r9
 80073f6:	eba3 0209 	sub.w	r2, r3, r9
 80073fa:	d123      	bne.n	8007444 <_scanf_float+0x3d0>
 80073fc:	9901      	ldr	r1, [sp, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	4640      	mov	r0, r8
 8007402:	f002 fc09 	bl	8009c18 <_strtod_r>
 8007406:	9b03      	ldr	r3, [sp, #12]
 8007408:	6821      	ldr	r1, [r4, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f011 0f02 	tst.w	r1, #2
 8007410:	ec57 6b10 	vmov	r6, r7, d0
 8007414:	f103 0204 	add.w	r2, r3, #4
 8007418:	d01f      	beq.n	800745a <_scanf_float+0x3e6>
 800741a:	9903      	ldr	r1, [sp, #12]
 800741c:	600a      	str	r2, [r1, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	e9c3 6700 	strd	r6, r7, [r3]
 8007424:	68e3      	ldr	r3, [r4, #12]
 8007426:	3301      	adds	r3, #1
 8007428:	60e3      	str	r3, [r4, #12]
 800742a:	e7d9      	b.n	80073e0 <_scanf_float+0x36c>
 800742c:	9b04      	ldr	r3, [sp, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0e4      	beq.n	80073fc <_scanf_float+0x388>
 8007432:	9905      	ldr	r1, [sp, #20]
 8007434:	230a      	movs	r3, #10
 8007436:	3101      	adds	r1, #1
 8007438:	4640      	mov	r0, r8
 800743a:	f002 fc6d 	bl	8009d18 <_strtol_r>
 800743e:	9b04      	ldr	r3, [sp, #16]
 8007440:	9e05      	ldr	r6, [sp, #20]
 8007442:	1ac2      	subs	r2, r0, r3
 8007444:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007448:	429e      	cmp	r6, r3
 800744a:	bf28      	it	cs
 800744c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007450:	4910      	ldr	r1, [pc, #64]	@ (8007494 <_scanf_float+0x420>)
 8007452:	4630      	mov	r0, r6
 8007454:	f000 f8f6 	bl	8007644 <siprintf>
 8007458:	e7d0      	b.n	80073fc <_scanf_float+0x388>
 800745a:	f011 0f04 	tst.w	r1, #4
 800745e:	9903      	ldr	r1, [sp, #12]
 8007460:	600a      	str	r2, [r1, #0]
 8007462:	d1dc      	bne.n	800741e <_scanf_float+0x3aa>
 8007464:	681d      	ldr	r5, [r3, #0]
 8007466:	4632      	mov	r2, r6
 8007468:	463b      	mov	r3, r7
 800746a:	4630      	mov	r0, r6
 800746c:	4639      	mov	r1, r7
 800746e:	f7f9 fb5d 	bl	8000b2c <__aeabi_dcmpun>
 8007472:	b128      	cbz	r0, 8007480 <_scanf_float+0x40c>
 8007474:	4808      	ldr	r0, [pc, #32]	@ (8007498 <_scanf_float+0x424>)
 8007476:	f000 f9c9 	bl	800780c <nanf>
 800747a:	ed85 0a00 	vstr	s0, [r5]
 800747e:	e7d1      	b.n	8007424 <_scanf_float+0x3b0>
 8007480:	4630      	mov	r0, r6
 8007482:	4639      	mov	r1, r7
 8007484:	f7f9 fbb0 	bl	8000be8 <__aeabi_d2f>
 8007488:	6028      	str	r0, [r5, #0]
 800748a:	e7cb      	b.n	8007424 <_scanf_float+0x3b0>
 800748c:	f04f 0900 	mov.w	r9, #0
 8007490:	e629      	b.n	80070e6 <_scanf_float+0x72>
 8007492:	bf00      	nop
 8007494:	0800b64c 	.word	0x0800b64c
 8007498:	0800b9e5 	.word	0x0800b9e5

0800749c <std>:
 800749c:	2300      	movs	r3, #0
 800749e:	b510      	push	{r4, lr}
 80074a0:	4604      	mov	r4, r0
 80074a2:	e9c0 3300 	strd	r3, r3, [r0]
 80074a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074aa:	6083      	str	r3, [r0, #8]
 80074ac:	8181      	strh	r1, [r0, #12]
 80074ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80074b0:	81c2      	strh	r2, [r0, #14]
 80074b2:	6183      	str	r3, [r0, #24]
 80074b4:	4619      	mov	r1, r3
 80074b6:	2208      	movs	r2, #8
 80074b8:	305c      	adds	r0, #92	@ 0x5c
 80074ba:	f000 f926 	bl	800770a <memset>
 80074be:	4b0d      	ldr	r3, [pc, #52]	@ (80074f4 <std+0x58>)
 80074c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80074c2:	4b0d      	ldr	r3, [pc, #52]	@ (80074f8 <std+0x5c>)
 80074c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074c6:	4b0d      	ldr	r3, [pc, #52]	@ (80074fc <std+0x60>)
 80074c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007500 <std+0x64>)
 80074cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80074ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007504 <std+0x68>)
 80074d0:	6224      	str	r4, [r4, #32]
 80074d2:	429c      	cmp	r4, r3
 80074d4:	d006      	beq.n	80074e4 <std+0x48>
 80074d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074da:	4294      	cmp	r4, r2
 80074dc:	d002      	beq.n	80074e4 <std+0x48>
 80074de:	33d0      	adds	r3, #208	@ 0xd0
 80074e0:	429c      	cmp	r4, r3
 80074e2:	d105      	bne.n	80074f0 <std+0x54>
 80074e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80074e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ec:	f000 b98a 	b.w	8007804 <__retarget_lock_init_recursive>
 80074f0:	bd10      	pop	{r4, pc}
 80074f2:	bf00      	nop
 80074f4:	08007685 	.word	0x08007685
 80074f8:	080076a7 	.word	0x080076a7
 80074fc:	080076df 	.word	0x080076df
 8007500:	08007703 	.word	0x08007703
 8007504:	200003c0 	.word	0x200003c0

08007508 <stdio_exit_handler>:
 8007508:	4a02      	ldr	r2, [pc, #8]	@ (8007514 <stdio_exit_handler+0xc>)
 800750a:	4903      	ldr	r1, [pc, #12]	@ (8007518 <stdio_exit_handler+0x10>)
 800750c:	4803      	ldr	r0, [pc, #12]	@ (800751c <stdio_exit_handler+0x14>)
 800750e:	f000 b869 	b.w	80075e4 <_fwalk_sglue>
 8007512:	bf00      	nop
 8007514:	20000018 	.word	0x20000018
 8007518:	0800a359 	.word	0x0800a359
 800751c:	20000028 	.word	0x20000028

08007520 <cleanup_stdio>:
 8007520:	6841      	ldr	r1, [r0, #4]
 8007522:	4b0c      	ldr	r3, [pc, #48]	@ (8007554 <cleanup_stdio+0x34>)
 8007524:	4299      	cmp	r1, r3
 8007526:	b510      	push	{r4, lr}
 8007528:	4604      	mov	r4, r0
 800752a:	d001      	beq.n	8007530 <cleanup_stdio+0x10>
 800752c:	f002 ff14 	bl	800a358 <_fflush_r>
 8007530:	68a1      	ldr	r1, [r4, #8]
 8007532:	4b09      	ldr	r3, [pc, #36]	@ (8007558 <cleanup_stdio+0x38>)
 8007534:	4299      	cmp	r1, r3
 8007536:	d002      	beq.n	800753e <cleanup_stdio+0x1e>
 8007538:	4620      	mov	r0, r4
 800753a:	f002 ff0d 	bl	800a358 <_fflush_r>
 800753e:	68e1      	ldr	r1, [r4, #12]
 8007540:	4b06      	ldr	r3, [pc, #24]	@ (800755c <cleanup_stdio+0x3c>)
 8007542:	4299      	cmp	r1, r3
 8007544:	d004      	beq.n	8007550 <cleanup_stdio+0x30>
 8007546:	4620      	mov	r0, r4
 8007548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800754c:	f002 bf04 	b.w	800a358 <_fflush_r>
 8007550:	bd10      	pop	{r4, pc}
 8007552:	bf00      	nop
 8007554:	200003c0 	.word	0x200003c0
 8007558:	20000428 	.word	0x20000428
 800755c:	20000490 	.word	0x20000490

08007560 <global_stdio_init.part.0>:
 8007560:	b510      	push	{r4, lr}
 8007562:	4b0b      	ldr	r3, [pc, #44]	@ (8007590 <global_stdio_init.part.0+0x30>)
 8007564:	4c0b      	ldr	r4, [pc, #44]	@ (8007594 <global_stdio_init.part.0+0x34>)
 8007566:	4a0c      	ldr	r2, [pc, #48]	@ (8007598 <global_stdio_init.part.0+0x38>)
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	4620      	mov	r0, r4
 800756c:	2200      	movs	r2, #0
 800756e:	2104      	movs	r1, #4
 8007570:	f7ff ff94 	bl	800749c <std>
 8007574:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007578:	2201      	movs	r2, #1
 800757a:	2109      	movs	r1, #9
 800757c:	f7ff ff8e 	bl	800749c <std>
 8007580:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007584:	2202      	movs	r2, #2
 8007586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800758a:	2112      	movs	r1, #18
 800758c:	f7ff bf86 	b.w	800749c <std>
 8007590:	200004f8 	.word	0x200004f8
 8007594:	200003c0 	.word	0x200003c0
 8007598:	08007509 	.word	0x08007509

0800759c <__sfp_lock_acquire>:
 800759c:	4801      	ldr	r0, [pc, #4]	@ (80075a4 <__sfp_lock_acquire+0x8>)
 800759e:	f000 b932 	b.w	8007806 <__retarget_lock_acquire_recursive>
 80075a2:	bf00      	nop
 80075a4:	20000501 	.word	0x20000501

080075a8 <__sfp_lock_release>:
 80075a8:	4801      	ldr	r0, [pc, #4]	@ (80075b0 <__sfp_lock_release+0x8>)
 80075aa:	f000 b92d 	b.w	8007808 <__retarget_lock_release_recursive>
 80075ae:	bf00      	nop
 80075b0:	20000501 	.word	0x20000501

080075b4 <__sinit>:
 80075b4:	b510      	push	{r4, lr}
 80075b6:	4604      	mov	r4, r0
 80075b8:	f7ff fff0 	bl	800759c <__sfp_lock_acquire>
 80075bc:	6a23      	ldr	r3, [r4, #32]
 80075be:	b11b      	cbz	r3, 80075c8 <__sinit+0x14>
 80075c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075c4:	f7ff bff0 	b.w	80075a8 <__sfp_lock_release>
 80075c8:	4b04      	ldr	r3, [pc, #16]	@ (80075dc <__sinit+0x28>)
 80075ca:	6223      	str	r3, [r4, #32]
 80075cc:	4b04      	ldr	r3, [pc, #16]	@ (80075e0 <__sinit+0x2c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1f5      	bne.n	80075c0 <__sinit+0xc>
 80075d4:	f7ff ffc4 	bl	8007560 <global_stdio_init.part.0>
 80075d8:	e7f2      	b.n	80075c0 <__sinit+0xc>
 80075da:	bf00      	nop
 80075dc:	08007521 	.word	0x08007521
 80075e0:	200004f8 	.word	0x200004f8

080075e4 <_fwalk_sglue>:
 80075e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075e8:	4607      	mov	r7, r0
 80075ea:	4688      	mov	r8, r1
 80075ec:	4614      	mov	r4, r2
 80075ee:	2600      	movs	r6, #0
 80075f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075f4:	f1b9 0901 	subs.w	r9, r9, #1
 80075f8:	d505      	bpl.n	8007606 <_fwalk_sglue+0x22>
 80075fa:	6824      	ldr	r4, [r4, #0]
 80075fc:	2c00      	cmp	r4, #0
 80075fe:	d1f7      	bne.n	80075f0 <_fwalk_sglue+0xc>
 8007600:	4630      	mov	r0, r6
 8007602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007606:	89ab      	ldrh	r3, [r5, #12]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d907      	bls.n	800761c <_fwalk_sglue+0x38>
 800760c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007610:	3301      	adds	r3, #1
 8007612:	d003      	beq.n	800761c <_fwalk_sglue+0x38>
 8007614:	4629      	mov	r1, r5
 8007616:	4638      	mov	r0, r7
 8007618:	47c0      	blx	r8
 800761a:	4306      	orrs	r6, r0
 800761c:	3568      	adds	r5, #104	@ 0x68
 800761e:	e7e9      	b.n	80075f4 <_fwalk_sglue+0x10>

08007620 <iprintf>:
 8007620:	b40f      	push	{r0, r1, r2, r3}
 8007622:	b507      	push	{r0, r1, r2, lr}
 8007624:	4906      	ldr	r1, [pc, #24]	@ (8007640 <iprintf+0x20>)
 8007626:	ab04      	add	r3, sp, #16
 8007628:	6808      	ldr	r0, [r1, #0]
 800762a:	f853 2b04 	ldr.w	r2, [r3], #4
 800762e:	6881      	ldr	r1, [r0, #8]
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	f002 fcf5 	bl	800a020 <_vfiprintf_r>
 8007636:	b003      	add	sp, #12
 8007638:	f85d eb04 	ldr.w	lr, [sp], #4
 800763c:	b004      	add	sp, #16
 800763e:	4770      	bx	lr
 8007640:	20000024 	.word	0x20000024

08007644 <siprintf>:
 8007644:	b40e      	push	{r1, r2, r3}
 8007646:	b500      	push	{lr}
 8007648:	b09c      	sub	sp, #112	@ 0x70
 800764a:	ab1d      	add	r3, sp, #116	@ 0x74
 800764c:	9002      	str	r0, [sp, #8]
 800764e:	9006      	str	r0, [sp, #24]
 8007650:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007654:	4809      	ldr	r0, [pc, #36]	@ (800767c <siprintf+0x38>)
 8007656:	9107      	str	r1, [sp, #28]
 8007658:	9104      	str	r1, [sp, #16]
 800765a:	4909      	ldr	r1, [pc, #36]	@ (8007680 <siprintf+0x3c>)
 800765c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007660:	9105      	str	r1, [sp, #20]
 8007662:	6800      	ldr	r0, [r0, #0]
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	a902      	add	r1, sp, #8
 8007668:	f002 fbb4 	bl	8009dd4 <_svfiprintf_r>
 800766c:	9b02      	ldr	r3, [sp, #8]
 800766e:	2200      	movs	r2, #0
 8007670:	701a      	strb	r2, [r3, #0]
 8007672:	b01c      	add	sp, #112	@ 0x70
 8007674:	f85d eb04 	ldr.w	lr, [sp], #4
 8007678:	b003      	add	sp, #12
 800767a:	4770      	bx	lr
 800767c:	20000024 	.word	0x20000024
 8007680:	ffff0208 	.word	0xffff0208

08007684 <__sread>:
 8007684:	b510      	push	{r4, lr}
 8007686:	460c      	mov	r4, r1
 8007688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800768c:	f000 f86c 	bl	8007768 <_read_r>
 8007690:	2800      	cmp	r0, #0
 8007692:	bfab      	itete	ge
 8007694:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007696:	89a3      	ldrhlt	r3, [r4, #12]
 8007698:	181b      	addge	r3, r3, r0
 800769a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800769e:	bfac      	ite	ge
 80076a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076a2:	81a3      	strhlt	r3, [r4, #12]
 80076a4:	bd10      	pop	{r4, pc}

080076a6 <__swrite>:
 80076a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076aa:	461f      	mov	r7, r3
 80076ac:	898b      	ldrh	r3, [r1, #12]
 80076ae:	05db      	lsls	r3, r3, #23
 80076b0:	4605      	mov	r5, r0
 80076b2:	460c      	mov	r4, r1
 80076b4:	4616      	mov	r6, r2
 80076b6:	d505      	bpl.n	80076c4 <__swrite+0x1e>
 80076b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076bc:	2302      	movs	r3, #2
 80076be:	2200      	movs	r2, #0
 80076c0:	f000 f840 	bl	8007744 <_lseek_r>
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076ce:	81a3      	strh	r3, [r4, #12]
 80076d0:	4632      	mov	r2, r6
 80076d2:	463b      	mov	r3, r7
 80076d4:	4628      	mov	r0, r5
 80076d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076da:	f000 b857 	b.w	800778c <_write_r>

080076de <__sseek>:
 80076de:	b510      	push	{r4, lr}
 80076e0:	460c      	mov	r4, r1
 80076e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e6:	f000 f82d 	bl	8007744 <_lseek_r>
 80076ea:	1c43      	adds	r3, r0, #1
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	bf15      	itete	ne
 80076f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80076fa:	81a3      	strheq	r3, [r4, #12]
 80076fc:	bf18      	it	ne
 80076fe:	81a3      	strhne	r3, [r4, #12]
 8007700:	bd10      	pop	{r4, pc}

08007702 <__sclose>:
 8007702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007706:	f000 b80d 	b.w	8007724 <_close_r>

0800770a <memset>:
 800770a:	4402      	add	r2, r0
 800770c:	4603      	mov	r3, r0
 800770e:	4293      	cmp	r3, r2
 8007710:	d100      	bne.n	8007714 <memset+0xa>
 8007712:	4770      	bx	lr
 8007714:	f803 1b01 	strb.w	r1, [r3], #1
 8007718:	e7f9      	b.n	800770e <memset+0x4>
	...

0800771c <_localeconv_r>:
 800771c:	4800      	ldr	r0, [pc, #0]	@ (8007720 <_localeconv_r+0x4>)
 800771e:	4770      	bx	lr
 8007720:	20000164 	.word	0x20000164

08007724 <_close_r>:
 8007724:	b538      	push	{r3, r4, r5, lr}
 8007726:	4d06      	ldr	r5, [pc, #24]	@ (8007740 <_close_r+0x1c>)
 8007728:	2300      	movs	r3, #0
 800772a:	4604      	mov	r4, r0
 800772c:	4608      	mov	r0, r1
 800772e:	602b      	str	r3, [r5, #0]
 8007730:	f7fb f8a0 	bl	8002874 <_close>
 8007734:	1c43      	adds	r3, r0, #1
 8007736:	d102      	bne.n	800773e <_close_r+0x1a>
 8007738:	682b      	ldr	r3, [r5, #0]
 800773a:	b103      	cbz	r3, 800773e <_close_r+0x1a>
 800773c:	6023      	str	r3, [r4, #0]
 800773e:	bd38      	pop	{r3, r4, r5, pc}
 8007740:	200004fc 	.word	0x200004fc

08007744 <_lseek_r>:
 8007744:	b538      	push	{r3, r4, r5, lr}
 8007746:	4d07      	ldr	r5, [pc, #28]	@ (8007764 <_lseek_r+0x20>)
 8007748:	4604      	mov	r4, r0
 800774a:	4608      	mov	r0, r1
 800774c:	4611      	mov	r1, r2
 800774e:	2200      	movs	r2, #0
 8007750:	602a      	str	r2, [r5, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	f7fb f8b5 	bl	80028c2 <_lseek>
 8007758:	1c43      	adds	r3, r0, #1
 800775a:	d102      	bne.n	8007762 <_lseek_r+0x1e>
 800775c:	682b      	ldr	r3, [r5, #0]
 800775e:	b103      	cbz	r3, 8007762 <_lseek_r+0x1e>
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	bd38      	pop	{r3, r4, r5, pc}
 8007764:	200004fc 	.word	0x200004fc

08007768 <_read_r>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	4d07      	ldr	r5, [pc, #28]	@ (8007788 <_read_r+0x20>)
 800776c:	4604      	mov	r4, r0
 800776e:	4608      	mov	r0, r1
 8007770:	4611      	mov	r1, r2
 8007772:	2200      	movs	r2, #0
 8007774:	602a      	str	r2, [r5, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	f7fb f843 	bl	8002802 <_read>
 800777c:	1c43      	adds	r3, r0, #1
 800777e:	d102      	bne.n	8007786 <_read_r+0x1e>
 8007780:	682b      	ldr	r3, [r5, #0]
 8007782:	b103      	cbz	r3, 8007786 <_read_r+0x1e>
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	bd38      	pop	{r3, r4, r5, pc}
 8007788:	200004fc 	.word	0x200004fc

0800778c <_write_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	4d07      	ldr	r5, [pc, #28]	@ (80077ac <_write_r+0x20>)
 8007790:	4604      	mov	r4, r0
 8007792:	4608      	mov	r0, r1
 8007794:	4611      	mov	r1, r2
 8007796:	2200      	movs	r2, #0
 8007798:	602a      	str	r2, [r5, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	f7fb f84e 	bl	800283c <_write>
 80077a0:	1c43      	adds	r3, r0, #1
 80077a2:	d102      	bne.n	80077aa <_write_r+0x1e>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	b103      	cbz	r3, 80077aa <_write_r+0x1e>
 80077a8:	6023      	str	r3, [r4, #0]
 80077aa:	bd38      	pop	{r3, r4, r5, pc}
 80077ac:	200004fc 	.word	0x200004fc

080077b0 <__errno>:
 80077b0:	4b01      	ldr	r3, [pc, #4]	@ (80077b8 <__errno+0x8>)
 80077b2:	6818      	ldr	r0, [r3, #0]
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	20000024 	.word	0x20000024

080077bc <__libc_init_array>:
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	4d0d      	ldr	r5, [pc, #52]	@ (80077f4 <__libc_init_array+0x38>)
 80077c0:	4c0d      	ldr	r4, [pc, #52]	@ (80077f8 <__libc_init_array+0x3c>)
 80077c2:	1b64      	subs	r4, r4, r5
 80077c4:	10a4      	asrs	r4, r4, #2
 80077c6:	2600      	movs	r6, #0
 80077c8:	42a6      	cmp	r6, r4
 80077ca:	d109      	bne.n	80077e0 <__libc_init_array+0x24>
 80077cc:	4d0b      	ldr	r5, [pc, #44]	@ (80077fc <__libc_init_array+0x40>)
 80077ce:	4c0c      	ldr	r4, [pc, #48]	@ (8007800 <__libc_init_array+0x44>)
 80077d0:	f003 fb74 	bl	800aebc <_init>
 80077d4:	1b64      	subs	r4, r4, r5
 80077d6:	10a4      	asrs	r4, r4, #2
 80077d8:	2600      	movs	r6, #0
 80077da:	42a6      	cmp	r6, r4
 80077dc:	d105      	bne.n	80077ea <__libc_init_array+0x2e>
 80077de:	bd70      	pop	{r4, r5, r6, pc}
 80077e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077e4:	4798      	blx	r3
 80077e6:	3601      	adds	r6, #1
 80077e8:	e7ee      	b.n	80077c8 <__libc_init_array+0xc>
 80077ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ee:	4798      	blx	r3
 80077f0:	3601      	adds	r6, #1
 80077f2:	e7f2      	b.n	80077da <__libc_init_array+0x1e>
 80077f4:	0800ba50 	.word	0x0800ba50
 80077f8:	0800ba50 	.word	0x0800ba50
 80077fc:	0800ba50 	.word	0x0800ba50
 8007800:	0800ba54 	.word	0x0800ba54

08007804 <__retarget_lock_init_recursive>:
 8007804:	4770      	bx	lr

08007806 <__retarget_lock_acquire_recursive>:
 8007806:	4770      	bx	lr

08007808 <__retarget_lock_release_recursive>:
 8007808:	4770      	bx	lr
	...

0800780c <nanf>:
 800780c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007814 <nanf+0x8>
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	7fc00000 	.word	0x7fc00000

08007818 <quorem>:
 8007818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781c:	6903      	ldr	r3, [r0, #16]
 800781e:	690c      	ldr	r4, [r1, #16]
 8007820:	42a3      	cmp	r3, r4
 8007822:	4607      	mov	r7, r0
 8007824:	db7e      	blt.n	8007924 <quorem+0x10c>
 8007826:	3c01      	subs	r4, #1
 8007828:	f101 0814 	add.w	r8, r1, #20
 800782c:	00a3      	lsls	r3, r4, #2
 800782e:	f100 0514 	add.w	r5, r0, #20
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800783e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007842:	3301      	adds	r3, #1
 8007844:	429a      	cmp	r2, r3
 8007846:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800784a:	fbb2 f6f3 	udiv	r6, r2, r3
 800784e:	d32e      	bcc.n	80078ae <quorem+0x96>
 8007850:	f04f 0a00 	mov.w	sl, #0
 8007854:	46c4      	mov	ip, r8
 8007856:	46ae      	mov	lr, r5
 8007858:	46d3      	mov	fp, sl
 800785a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800785e:	b298      	uxth	r0, r3
 8007860:	fb06 a000 	mla	r0, r6, r0, sl
 8007864:	0c02      	lsrs	r2, r0, #16
 8007866:	0c1b      	lsrs	r3, r3, #16
 8007868:	fb06 2303 	mla	r3, r6, r3, r2
 800786c:	f8de 2000 	ldr.w	r2, [lr]
 8007870:	b280      	uxth	r0, r0
 8007872:	b292      	uxth	r2, r2
 8007874:	1a12      	subs	r2, r2, r0
 8007876:	445a      	add	r2, fp
 8007878:	f8de 0000 	ldr.w	r0, [lr]
 800787c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007880:	b29b      	uxth	r3, r3
 8007882:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007886:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800788a:	b292      	uxth	r2, r2
 800788c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007890:	45e1      	cmp	r9, ip
 8007892:	f84e 2b04 	str.w	r2, [lr], #4
 8007896:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800789a:	d2de      	bcs.n	800785a <quorem+0x42>
 800789c:	9b00      	ldr	r3, [sp, #0]
 800789e:	58eb      	ldr	r3, [r5, r3]
 80078a0:	b92b      	cbnz	r3, 80078ae <quorem+0x96>
 80078a2:	9b01      	ldr	r3, [sp, #4]
 80078a4:	3b04      	subs	r3, #4
 80078a6:	429d      	cmp	r5, r3
 80078a8:	461a      	mov	r2, r3
 80078aa:	d32f      	bcc.n	800790c <quorem+0xf4>
 80078ac:	613c      	str	r4, [r7, #16]
 80078ae:	4638      	mov	r0, r7
 80078b0:	f001 f9c2 	bl	8008c38 <__mcmp>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	db25      	blt.n	8007904 <quorem+0xec>
 80078b8:	4629      	mov	r1, r5
 80078ba:	2000      	movs	r0, #0
 80078bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80078c0:	f8d1 c000 	ldr.w	ip, [r1]
 80078c4:	fa1f fe82 	uxth.w	lr, r2
 80078c8:	fa1f f38c 	uxth.w	r3, ip
 80078cc:	eba3 030e 	sub.w	r3, r3, lr
 80078d0:	4403      	add	r3, r0
 80078d2:	0c12      	lsrs	r2, r2, #16
 80078d4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80078d8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80078dc:	b29b      	uxth	r3, r3
 80078de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078e2:	45c1      	cmp	r9, r8
 80078e4:	f841 3b04 	str.w	r3, [r1], #4
 80078e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80078ec:	d2e6      	bcs.n	80078bc <quorem+0xa4>
 80078ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078f6:	b922      	cbnz	r2, 8007902 <quorem+0xea>
 80078f8:	3b04      	subs	r3, #4
 80078fa:	429d      	cmp	r5, r3
 80078fc:	461a      	mov	r2, r3
 80078fe:	d30b      	bcc.n	8007918 <quorem+0x100>
 8007900:	613c      	str	r4, [r7, #16]
 8007902:	3601      	adds	r6, #1
 8007904:	4630      	mov	r0, r6
 8007906:	b003      	add	sp, #12
 8007908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790c:	6812      	ldr	r2, [r2, #0]
 800790e:	3b04      	subs	r3, #4
 8007910:	2a00      	cmp	r2, #0
 8007912:	d1cb      	bne.n	80078ac <quorem+0x94>
 8007914:	3c01      	subs	r4, #1
 8007916:	e7c6      	b.n	80078a6 <quorem+0x8e>
 8007918:	6812      	ldr	r2, [r2, #0]
 800791a:	3b04      	subs	r3, #4
 800791c:	2a00      	cmp	r2, #0
 800791e:	d1ef      	bne.n	8007900 <quorem+0xe8>
 8007920:	3c01      	subs	r4, #1
 8007922:	e7ea      	b.n	80078fa <quorem+0xe2>
 8007924:	2000      	movs	r0, #0
 8007926:	e7ee      	b.n	8007906 <quorem+0xee>

08007928 <_dtoa_r>:
 8007928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792c:	69c7      	ldr	r7, [r0, #28]
 800792e:	b099      	sub	sp, #100	@ 0x64
 8007930:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007934:	ec55 4b10 	vmov	r4, r5, d0
 8007938:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800793a:	9109      	str	r1, [sp, #36]	@ 0x24
 800793c:	4683      	mov	fp, r0
 800793e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007940:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007942:	b97f      	cbnz	r7, 8007964 <_dtoa_r+0x3c>
 8007944:	2010      	movs	r0, #16
 8007946:	f000 fdfd 	bl	8008544 <malloc>
 800794a:	4602      	mov	r2, r0
 800794c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007950:	b920      	cbnz	r0, 800795c <_dtoa_r+0x34>
 8007952:	4ba7      	ldr	r3, [pc, #668]	@ (8007bf0 <_dtoa_r+0x2c8>)
 8007954:	21ef      	movs	r1, #239	@ 0xef
 8007956:	48a7      	ldr	r0, [pc, #668]	@ (8007bf4 <_dtoa_r+0x2cc>)
 8007958:	f002 fe0e 	bl	800a578 <__assert_func>
 800795c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007960:	6007      	str	r7, [r0, #0]
 8007962:	60c7      	str	r7, [r0, #12]
 8007964:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007968:	6819      	ldr	r1, [r3, #0]
 800796a:	b159      	cbz	r1, 8007984 <_dtoa_r+0x5c>
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	604a      	str	r2, [r1, #4]
 8007970:	2301      	movs	r3, #1
 8007972:	4093      	lsls	r3, r2
 8007974:	608b      	str	r3, [r1, #8]
 8007976:	4658      	mov	r0, fp
 8007978:	f000 feda 	bl	8008730 <_Bfree>
 800797c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	1e2b      	subs	r3, r5, #0
 8007986:	bfb9      	ittee	lt
 8007988:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800798c:	9303      	strlt	r3, [sp, #12]
 800798e:	2300      	movge	r3, #0
 8007990:	6033      	strge	r3, [r6, #0]
 8007992:	9f03      	ldr	r7, [sp, #12]
 8007994:	4b98      	ldr	r3, [pc, #608]	@ (8007bf8 <_dtoa_r+0x2d0>)
 8007996:	bfbc      	itt	lt
 8007998:	2201      	movlt	r2, #1
 800799a:	6032      	strlt	r2, [r6, #0]
 800799c:	43bb      	bics	r3, r7
 800799e:	d112      	bne.n	80079c6 <_dtoa_r+0x9e>
 80079a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80079a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80079ac:	4323      	orrs	r3, r4
 80079ae:	f000 854d 	beq.w	800844c <_dtoa_r+0xb24>
 80079b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007c0c <_dtoa_r+0x2e4>
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 854f 	beq.w	800845c <_dtoa_r+0xb34>
 80079be:	f10a 0303 	add.w	r3, sl, #3
 80079c2:	f000 bd49 	b.w	8008458 <_dtoa_r+0xb30>
 80079c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079ca:	2200      	movs	r2, #0
 80079cc:	ec51 0b17 	vmov	r0, r1, d7
 80079d0:	2300      	movs	r3, #0
 80079d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80079d6:	f7f9 f877 	bl	8000ac8 <__aeabi_dcmpeq>
 80079da:	4680      	mov	r8, r0
 80079dc:	b158      	cbz	r0, 80079f6 <_dtoa_r+0xce>
 80079de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80079e0:	2301      	movs	r3, #1
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079e6:	b113      	cbz	r3, 80079ee <_dtoa_r+0xc6>
 80079e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80079ea:	4b84      	ldr	r3, [pc, #528]	@ (8007bfc <_dtoa_r+0x2d4>)
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007c10 <_dtoa_r+0x2e8>
 80079f2:	f000 bd33 	b.w	800845c <_dtoa_r+0xb34>
 80079f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80079fa:	aa16      	add	r2, sp, #88	@ 0x58
 80079fc:	a917      	add	r1, sp, #92	@ 0x5c
 80079fe:	4658      	mov	r0, fp
 8007a00:	f001 fa3a 	bl	8008e78 <__d2b>
 8007a04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007a08:	4681      	mov	r9, r0
 8007a0a:	2e00      	cmp	r6, #0
 8007a0c:	d077      	beq.n	8007afe <_dtoa_r+0x1d6>
 8007a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007a20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007a24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007a28:	4619      	mov	r1, r3
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	4b74      	ldr	r3, [pc, #464]	@ (8007c00 <_dtoa_r+0x2d8>)
 8007a2e:	f7f8 fc2b 	bl	8000288 <__aeabi_dsub>
 8007a32:	a369      	add	r3, pc, #420	@ (adr r3, 8007bd8 <_dtoa_r+0x2b0>)
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	f7f8 fdde 	bl	80005f8 <__aeabi_dmul>
 8007a3c:	a368      	add	r3, pc, #416	@ (adr r3, 8007be0 <_dtoa_r+0x2b8>)
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	f7f8 fc23 	bl	800028c <__adddf3>
 8007a46:	4604      	mov	r4, r0
 8007a48:	4630      	mov	r0, r6
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	f7f8 fd6a 	bl	8000524 <__aeabi_i2d>
 8007a50:	a365      	add	r3, pc, #404	@ (adr r3, 8007be8 <_dtoa_r+0x2c0>)
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	f7f8 fdcf 	bl	80005f8 <__aeabi_dmul>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4620      	mov	r0, r4
 8007a60:	4629      	mov	r1, r5
 8007a62:	f7f8 fc13 	bl	800028c <__adddf3>
 8007a66:	4604      	mov	r4, r0
 8007a68:	460d      	mov	r5, r1
 8007a6a:	f7f9 f875 	bl	8000b58 <__aeabi_d2iz>
 8007a6e:	2200      	movs	r2, #0
 8007a70:	4607      	mov	r7, r0
 8007a72:	2300      	movs	r3, #0
 8007a74:	4620      	mov	r0, r4
 8007a76:	4629      	mov	r1, r5
 8007a78:	f7f9 f830 	bl	8000adc <__aeabi_dcmplt>
 8007a7c:	b140      	cbz	r0, 8007a90 <_dtoa_r+0x168>
 8007a7e:	4638      	mov	r0, r7
 8007a80:	f7f8 fd50 	bl	8000524 <__aeabi_i2d>
 8007a84:	4622      	mov	r2, r4
 8007a86:	462b      	mov	r3, r5
 8007a88:	f7f9 f81e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a8c:	b900      	cbnz	r0, 8007a90 <_dtoa_r+0x168>
 8007a8e:	3f01      	subs	r7, #1
 8007a90:	2f16      	cmp	r7, #22
 8007a92:	d851      	bhi.n	8007b38 <_dtoa_r+0x210>
 8007a94:	4b5b      	ldr	r3, [pc, #364]	@ (8007c04 <_dtoa_r+0x2dc>)
 8007a96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aa2:	f7f9 f81b 	bl	8000adc <__aeabi_dcmplt>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d048      	beq.n	8007b3c <_dtoa_r+0x214>
 8007aaa:	3f01      	subs	r7, #1
 8007aac:	2300      	movs	r3, #0
 8007aae:	9312      	str	r3, [sp, #72]	@ 0x48
 8007ab0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ab2:	1b9b      	subs	r3, r3, r6
 8007ab4:	1e5a      	subs	r2, r3, #1
 8007ab6:	bf44      	itt	mi
 8007ab8:	f1c3 0801 	rsbmi	r8, r3, #1
 8007abc:	2300      	movmi	r3, #0
 8007abe:	9208      	str	r2, [sp, #32]
 8007ac0:	bf54      	ite	pl
 8007ac2:	f04f 0800 	movpl.w	r8, #0
 8007ac6:	9308      	strmi	r3, [sp, #32]
 8007ac8:	2f00      	cmp	r7, #0
 8007aca:	db39      	blt.n	8007b40 <_dtoa_r+0x218>
 8007acc:	9b08      	ldr	r3, [sp, #32]
 8007ace:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007ad0:	443b      	add	r3, r7
 8007ad2:	9308      	str	r3, [sp, #32]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ada:	2b09      	cmp	r3, #9
 8007adc:	d864      	bhi.n	8007ba8 <_dtoa_r+0x280>
 8007ade:	2b05      	cmp	r3, #5
 8007ae0:	bfc4      	itt	gt
 8007ae2:	3b04      	subgt	r3, #4
 8007ae4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ae8:	f1a3 0302 	sub.w	r3, r3, #2
 8007aec:	bfcc      	ite	gt
 8007aee:	2400      	movgt	r4, #0
 8007af0:	2401      	movle	r4, #1
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d863      	bhi.n	8007bbe <_dtoa_r+0x296>
 8007af6:	e8df f003 	tbb	[pc, r3]
 8007afa:	372a      	.short	0x372a
 8007afc:	5535      	.short	0x5535
 8007afe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007b02:	441e      	add	r6, r3
 8007b04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007b08:	2b20      	cmp	r3, #32
 8007b0a:	bfc1      	itttt	gt
 8007b0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007b10:	409f      	lslgt	r7, r3
 8007b12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007b16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007b1a:	bfd6      	itet	le
 8007b1c:	f1c3 0320 	rsble	r3, r3, #32
 8007b20:	ea47 0003 	orrgt.w	r0, r7, r3
 8007b24:	fa04 f003 	lslle.w	r0, r4, r3
 8007b28:	f7f8 fcec 	bl	8000504 <__aeabi_ui2d>
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007b32:	3e01      	subs	r6, #1
 8007b34:	9214      	str	r2, [sp, #80]	@ 0x50
 8007b36:	e777      	b.n	8007a28 <_dtoa_r+0x100>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e7b8      	b.n	8007aae <_dtoa_r+0x186>
 8007b3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007b3e:	e7b7      	b.n	8007ab0 <_dtoa_r+0x188>
 8007b40:	427b      	negs	r3, r7
 8007b42:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b44:	2300      	movs	r3, #0
 8007b46:	eba8 0807 	sub.w	r8, r8, r7
 8007b4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b4c:	e7c4      	b.n	8007ad8 <_dtoa_r+0x1b0>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	dc35      	bgt.n	8007bc4 <_dtoa_r+0x29c>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	9307      	str	r3, [sp, #28]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b62:	e00b      	b.n	8007b7c <_dtoa_r+0x254>
 8007b64:	2301      	movs	r3, #1
 8007b66:	e7f3      	b.n	8007b50 <_dtoa_r+0x228>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b6e:	18fb      	adds	r3, r7, r3
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	3301      	adds	r3, #1
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	9307      	str	r3, [sp, #28]
 8007b78:	bfb8      	it	lt
 8007b7a:	2301      	movlt	r3, #1
 8007b7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007b80:	2100      	movs	r1, #0
 8007b82:	2204      	movs	r2, #4
 8007b84:	f102 0514 	add.w	r5, r2, #20
 8007b88:	429d      	cmp	r5, r3
 8007b8a:	d91f      	bls.n	8007bcc <_dtoa_r+0x2a4>
 8007b8c:	6041      	str	r1, [r0, #4]
 8007b8e:	4658      	mov	r0, fp
 8007b90:	f000 fd8e 	bl	80086b0 <_Balloc>
 8007b94:	4682      	mov	sl, r0
 8007b96:	2800      	cmp	r0, #0
 8007b98:	d13c      	bne.n	8007c14 <_dtoa_r+0x2ec>
 8007b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8007c08 <_dtoa_r+0x2e0>)
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007ba2:	e6d8      	b.n	8007956 <_dtoa_r+0x2e>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e7e0      	b.n	8007b6a <_dtoa_r+0x242>
 8007ba8:	2401      	movs	r4, #1
 8007baa:	2300      	movs	r3, #0
 8007bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	9307      	str	r3, [sp, #28]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	2312      	movs	r3, #18
 8007bbc:	e7d0      	b.n	8007b60 <_dtoa_r+0x238>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bc2:	e7f5      	b.n	8007bb0 <_dtoa_r+0x288>
 8007bc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	9307      	str	r3, [sp, #28]
 8007bca:	e7d7      	b.n	8007b7c <_dtoa_r+0x254>
 8007bcc:	3101      	adds	r1, #1
 8007bce:	0052      	lsls	r2, r2, #1
 8007bd0:	e7d8      	b.n	8007b84 <_dtoa_r+0x25c>
 8007bd2:	bf00      	nop
 8007bd4:	f3af 8000 	nop.w
 8007bd8:	636f4361 	.word	0x636f4361
 8007bdc:	3fd287a7 	.word	0x3fd287a7
 8007be0:	8b60c8b3 	.word	0x8b60c8b3
 8007be4:	3fc68a28 	.word	0x3fc68a28
 8007be8:	509f79fb 	.word	0x509f79fb
 8007bec:	3fd34413 	.word	0x3fd34413
 8007bf0:	0800b65e 	.word	0x0800b65e
 8007bf4:	0800b675 	.word	0x0800b675
 8007bf8:	7ff00000 	.word	0x7ff00000
 8007bfc:	0800b629 	.word	0x0800b629
 8007c00:	3ff80000 	.word	0x3ff80000
 8007c04:	0800b770 	.word	0x0800b770
 8007c08:	0800b6cd 	.word	0x0800b6cd
 8007c0c:	0800b65a 	.word	0x0800b65a
 8007c10:	0800b628 	.word	0x0800b628
 8007c14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c18:	6018      	str	r0, [r3, #0]
 8007c1a:	9b07      	ldr	r3, [sp, #28]
 8007c1c:	2b0e      	cmp	r3, #14
 8007c1e:	f200 80a4 	bhi.w	8007d6a <_dtoa_r+0x442>
 8007c22:	2c00      	cmp	r4, #0
 8007c24:	f000 80a1 	beq.w	8007d6a <_dtoa_r+0x442>
 8007c28:	2f00      	cmp	r7, #0
 8007c2a:	dd33      	ble.n	8007c94 <_dtoa_r+0x36c>
 8007c2c:	4bad      	ldr	r3, [pc, #692]	@ (8007ee4 <_dtoa_r+0x5bc>)
 8007c2e:	f007 020f 	and.w	r2, r7, #15
 8007c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c36:	ed93 7b00 	vldr	d7, [r3]
 8007c3a:	05f8      	lsls	r0, r7, #23
 8007c3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007c40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007c44:	d516      	bpl.n	8007c74 <_dtoa_r+0x34c>
 8007c46:	4ba8      	ldr	r3, [pc, #672]	@ (8007ee8 <_dtoa_r+0x5c0>)
 8007c48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c50:	f7f8 fdfc 	bl	800084c <__aeabi_ddiv>
 8007c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c58:	f004 040f 	and.w	r4, r4, #15
 8007c5c:	2603      	movs	r6, #3
 8007c5e:	4da2      	ldr	r5, [pc, #648]	@ (8007ee8 <_dtoa_r+0x5c0>)
 8007c60:	b954      	cbnz	r4, 8007c78 <_dtoa_r+0x350>
 8007c62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c6a:	f7f8 fdef 	bl	800084c <__aeabi_ddiv>
 8007c6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c72:	e028      	b.n	8007cc6 <_dtoa_r+0x39e>
 8007c74:	2602      	movs	r6, #2
 8007c76:	e7f2      	b.n	8007c5e <_dtoa_r+0x336>
 8007c78:	07e1      	lsls	r1, r4, #31
 8007c7a:	d508      	bpl.n	8007c8e <_dtoa_r+0x366>
 8007c7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c84:	f7f8 fcb8 	bl	80005f8 <__aeabi_dmul>
 8007c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c8c:	3601      	adds	r6, #1
 8007c8e:	1064      	asrs	r4, r4, #1
 8007c90:	3508      	adds	r5, #8
 8007c92:	e7e5      	b.n	8007c60 <_dtoa_r+0x338>
 8007c94:	f000 80d2 	beq.w	8007e3c <_dtoa_r+0x514>
 8007c98:	427c      	negs	r4, r7
 8007c9a:	4b92      	ldr	r3, [pc, #584]	@ (8007ee4 <_dtoa_r+0x5bc>)
 8007c9c:	4d92      	ldr	r5, [pc, #584]	@ (8007ee8 <_dtoa_r+0x5c0>)
 8007c9e:	f004 020f 	and.w	r2, r4, #15
 8007ca2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cae:	f7f8 fca3 	bl	80005f8 <__aeabi_dmul>
 8007cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cb6:	1124      	asrs	r4, r4, #4
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2602      	movs	r6, #2
 8007cbc:	2c00      	cmp	r4, #0
 8007cbe:	f040 80b2 	bne.w	8007e26 <_dtoa_r+0x4fe>
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1d3      	bne.n	8007c6e <_dtoa_r+0x346>
 8007cc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007cc8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 80b7 	beq.w	8007e40 <_dtoa_r+0x518>
 8007cd2:	4b86      	ldr	r3, [pc, #536]	@ (8007eec <_dtoa_r+0x5c4>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	4629      	mov	r1, r5
 8007cda:	f7f8 feff 	bl	8000adc <__aeabi_dcmplt>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	f000 80ae 	beq.w	8007e40 <_dtoa_r+0x518>
 8007ce4:	9b07      	ldr	r3, [sp, #28]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 80aa 	beq.w	8007e40 <_dtoa_r+0x518>
 8007cec:	9b00      	ldr	r3, [sp, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	dd37      	ble.n	8007d62 <_dtoa_r+0x43a>
 8007cf2:	1e7b      	subs	r3, r7, #1
 8007cf4:	9304      	str	r3, [sp, #16]
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	4b7d      	ldr	r3, [pc, #500]	@ (8007ef0 <_dtoa_r+0x5c8>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	f7f8 fc7b 	bl	80005f8 <__aeabi_dmul>
 8007d02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d06:	9c00      	ldr	r4, [sp, #0]
 8007d08:	3601      	adds	r6, #1
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f7f8 fc0a 	bl	8000524 <__aeabi_i2d>
 8007d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d14:	f7f8 fc70 	bl	80005f8 <__aeabi_dmul>
 8007d18:	4b76      	ldr	r3, [pc, #472]	@ (8007ef4 <_dtoa_r+0x5cc>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f7f8 fab6 	bl	800028c <__adddf3>
 8007d20:	4605      	mov	r5, r0
 8007d22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007d26:	2c00      	cmp	r4, #0
 8007d28:	f040 808d 	bne.w	8007e46 <_dtoa_r+0x51e>
 8007d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d30:	4b71      	ldr	r3, [pc, #452]	@ (8007ef8 <_dtoa_r+0x5d0>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	f7f8 faa8 	bl	8000288 <__aeabi_dsub>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d40:	462a      	mov	r2, r5
 8007d42:	4633      	mov	r3, r6
 8007d44:	f7f8 fee8 	bl	8000b18 <__aeabi_dcmpgt>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	f040 828b 	bne.w	8008264 <_dtoa_r+0x93c>
 8007d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d52:	462a      	mov	r2, r5
 8007d54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007d58:	f7f8 fec0 	bl	8000adc <__aeabi_dcmplt>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	f040 8128 	bne.w	8007fb2 <_dtoa_r+0x68a>
 8007d62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007d66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007d6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f2c0 815a 	blt.w	8008026 <_dtoa_r+0x6fe>
 8007d72:	2f0e      	cmp	r7, #14
 8007d74:	f300 8157 	bgt.w	8008026 <_dtoa_r+0x6fe>
 8007d78:	4b5a      	ldr	r3, [pc, #360]	@ (8007ee4 <_dtoa_r+0x5bc>)
 8007d7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d7e:	ed93 7b00 	vldr	d7, [r3]
 8007d82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	ed8d 7b00 	vstr	d7, [sp]
 8007d8a:	da03      	bge.n	8007d94 <_dtoa_r+0x46c>
 8007d8c:	9b07      	ldr	r3, [sp, #28]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f340 8101 	ble.w	8007f96 <_dtoa_r+0x66e>
 8007d94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007d98:	4656      	mov	r6, sl
 8007d9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d9e:	4620      	mov	r0, r4
 8007da0:	4629      	mov	r1, r5
 8007da2:	f7f8 fd53 	bl	800084c <__aeabi_ddiv>
 8007da6:	f7f8 fed7 	bl	8000b58 <__aeabi_d2iz>
 8007daa:	4680      	mov	r8, r0
 8007dac:	f7f8 fbba 	bl	8000524 <__aeabi_i2d>
 8007db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007db4:	f7f8 fc20 	bl	80005f8 <__aeabi_dmul>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	4629      	mov	r1, r5
 8007dc0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007dc4:	f7f8 fa60 	bl	8000288 <__aeabi_dsub>
 8007dc8:	f806 4b01 	strb.w	r4, [r6], #1
 8007dcc:	9d07      	ldr	r5, [sp, #28]
 8007dce:	eba6 040a 	sub.w	r4, r6, sl
 8007dd2:	42a5      	cmp	r5, r4
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	f040 8117 	bne.w	800800a <_dtoa_r+0x6e2>
 8007ddc:	f7f8 fa56 	bl	800028c <__adddf3>
 8007de0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007de4:	4604      	mov	r4, r0
 8007de6:	460d      	mov	r5, r1
 8007de8:	f7f8 fe96 	bl	8000b18 <__aeabi_dcmpgt>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	f040 80f9 	bne.w	8007fe4 <_dtoa_r+0x6bc>
 8007df2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007df6:	4620      	mov	r0, r4
 8007df8:	4629      	mov	r1, r5
 8007dfa:	f7f8 fe65 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dfe:	b118      	cbz	r0, 8007e08 <_dtoa_r+0x4e0>
 8007e00:	f018 0f01 	tst.w	r8, #1
 8007e04:	f040 80ee 	bne.w	8007fe4 <_dtoa_r+0x6bc>
 8007e08:	4649      	mov	r1, r9
 8007e0a:	4658      	mov	r0, fp
 8007e0c:	f000 fc90 	bl	8008730 <_Bfree>
 8007e10:	2300      	movs	r3, #0
 8007e12:	7033      	strb	r3, [r6, #0]
 8007e14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007e16:	3701      	adds	r7, #1
 8007e18:	601f      	str	r7, [r3, #0]
 8007e1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 831d 	beq.w	800845c <_dtoa_r+0xb34>
 8007e22:	601e      	str	r6, [r3, #0]
 8007e24:	e31a      	b.n	800845c <_dtoa_r+0xb34>
 8007e26:	07e2      	lsls	r2, r4, #31
 8007e28:	d505      	bpl.n	8007e36 <_dtoa_r+0x50e>
 8007e2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e2e:	f7f8 fbe3 	bl	80005f8 <__aeabi_dmul>
 8007e32:	3601      	adds	r6, #1
 8007e34:	2301      	movs	r3, #1
 8007e36:	1064      	asrs	r4, r4, #1
 8007e38:	3508      	adds	r5, #8
 8007e3a:	e73f      	b.n	8007cbc <_dtoa_r+0x394>
 8007e3c:	2602      	movs	r6, #2
 8007e3e:	e742      	b.n	8007cc6 <_dtoa_r+0x39e>
 8007e40:	9c07      	ldr	r4, [sp, #28]
 8007e42:	9704      	str	r7, [sp, #16]
 8007e44:	e761      	b.n	8007d0a <_dtoa_r+0x3e2>
 8007e46:	4b27      	ldr	r3, [pc, #156]	@ (8007ee4 <_dtoa_r+0x5bc>)
 8007e48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e52:	4454      	add	r4, sl
 8007e54:	2900      	cmp	r1, #0
 8007e56:	d053      	beq.n	8007f00 <_dtoa_r+0x5d8>
 8007e58:	4928      	ldr	r1, [pc, #160]	@ (8007efc <_dtoa_r+0x5d4>)
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	f7f8 fcf6 	bl	800084c <__aeabi_ddiv>
 8007e60:	4633      	mov	r3, r6
 8007e62:	462a      	mov	r2, r5
 8007e64:	f7f8 fa10 	bl	8000288 <__aeabi_dsub>
 8007e68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e6c:	4656      	mov	r6, sl
 8007e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e72:	f7f8 fe71 	bl	8000b58 <__aeabi_d2iz>
 8007e76:	4605      	mov	r5, r0
 8007e78:	f7f8 fb54 	bl	8000524 <__aeabi_i2d>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e84:	f7f8 fa00 	bl	8000288 <__aeabi_dsub>
 8007e88:	3530      	adds	r5, #48	@ 0x30
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e92:	f806 5b01 	strb.w	r5, [r6], #1
 8007e96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e9a:	f7f8 fe1f 	bl	8000adc <__aeabi_dcmplt>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d171      	bne.n	8007f86 <_dtoa_r+0x65e>
 8007ea2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ea6:	4911      	ldr	r1, [pc, #68]	@ (8007eec <_dtoa_r+0x5c4>)
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	f7f8 f9ed 	bl	8000288 <__aeabi_dsub>
 8007eae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007eb2:	f7f8 fe13 	bl	8000adc <__aeabi_dcmplt>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f040 8095 	bne.w	8007fe6 <_dtoa_r+0x6be>
 8007ebc:	42a6      	cmp	r6, r4
 8007ebe:	f43f af50 	beq.w	8007d62 <_dtoa_r+0x43a>
 8007ec2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef0 <_dtoa_r+0x5c8>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f7f8 fb95 	bl	80005f8 <__aeabi_dmul>
 8007ece:	4b08      	ldr	r3, [pc, #32]	@ (8007ef0 <_dtoa_r+0x5c8>)
 8007ed0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eda:	f7f8 fb8d 	bl	80005f8 <__aeabi_dmul>
 8007ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ee2:	e7c4      	b.n	8007e6e <_dtoa_r+0x546>
 8007ee4:	0800b770 	.word	0x0800b770
 8007ee8:	0800b748 	.word	0x0800b748
 8007eec:	3ff00000 	.word	0x3ff00000
 8007ef0:	40240000 	.word	0x40240000
 8007ef4:	401c0000 	.word	0x401c0000
 8007ef8:	40140000 	.word	0x40140000
 8007efc:	3fe00000 	.word	0x3fe00000
 8007f00:	4631      	mov	r1, r6
 8007f02:	4628      	mov	r0, r5
 8007f04:	f7f8 fb78 	bl	80005f8 <__aeabi_dmul>
 8007f08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f0c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007f0e:	4656      	mov	r6, sl
 8007f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f14:	f7f8 fe20 	bl	8000b58 <__aeabi_d2iz>
 8007f18:	4605      	mov	r5, r0
 8007f1a:	f7f8 fb03 	bl	8000524 <__aeabi_i2d>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f26:	f7f8 f9af 	bl	8000288 <__aeabi_dsub>
 8007f2a:	3530      	adds	r5, #48	@ 0x30
 8007f2c:	f806 5b01 	strb.w	r5, [r6], #1
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	42a6      	cmp	r6, r4
 8007f36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f3a:	f04f 0200 	mov.w	r2, #0
 8007f3e:	d124      	bne.n	8007f8a <_dtoa_r+0x662>
 8007f40:	4bac      	ldr	r3, [pc, #688]	@ (80081f4 <_dtoa_r+0x8cc>)
 8007f42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f46:	f7f8 f9a1 	bl	800028c <__adddf3>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f52:	f7f8 fde1 	bl	8000b18 <__aeabi_dcmpgt>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d145      	bne.n	8007fe6 <_dtoa_r+0x6be>
 8007f5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f5e:	49a5      	ldr	r1, [pc, #660]	@ (80081f4 <_dtoa_r+0x8cc>)
 8007f60:	2000      	movs	r0, #0
 8007f62:	f7f8 f991 	bl	8000288 <__aeabi_dsub>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f6e:	f7f8 fdb5 	bl	8000adc <__aeabi_dcmplt>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	f43f aef5 	beq.w	8007d62 <_dtoa_r+0x43a>
 8007f78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007f7a:	1e73      	subs	r3, r6, #1
 8007f7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f82:	2b30      	cmp	r3, #48	@ 0x30
 8007f84:	d0f8      	beq.n	8007f78 <_dtoa_r+0x650>
 8007f86:	9f04      	ldr	r7, [sp, #16]
 8007f88:	e73e      	b.n	8007e08 <_dtoa_r+0x4e0>
 8007f8a:	4b9b      	ldr	r3, [pc, #620]	@ (80081f8 <_dtoa_r+0x8d0>)
 8007f8c:	f7f8 fb34 	bl	80005f8 <__aeabi_dmul>
 8007f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f94:	e7bc      	b.n	8007f10 <_dtoa_r+0x5e8>
 8007f96:	d10c      	bne.n	8007fb2 <_dtoa_r+0x68a>
 8007f98:	4b98      	ldr	r3, [pc, #608]	@ (80081fc <_dtoa_r+0x8d4>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fa0:	f7f8 fb2a 	bl	80005f8 <__aeabi_dmul>
 8007fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fa8:	f7f8 fdac 	bl	8000b04 <__aeabi_dcmpge>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	f000 8157 	beq.w	8008260 <_dtoa_r+0x938>
 8007fb2:	2400      	movs	r4, #0
 8007fb4:	4625      	mov	r5, r4
 8007fb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fb8:	43db      	mvns	r3, r3
 8007fba:	9304      	str	r3, [sp, #16]
 8007fbc:	4656      	mov	r6, sl
 8007fbe:	2700      	movs	r7, #0
 8007fc0:	4621      	mov	r1, r4
 8007fc2:	4658      	mov	r0, fp
 8007fc4:	f000 fbb4 	bl	8008730 <_Bfree>
 8007fc8:	2d00      	cmp	r5, #0
 8007fca:	d0dc      	beq.n	8007f86 <_dtoa_r+0x65e>
 8007fcc:	b12f      	cbz	r7, 8007fda <_dtoa_r+0x6b2>
 8007fce:	42af      	cmp	r7, r5
 8007fd0:	d003      	beq.n	8007fda <_dtoa_r+0x6b2>
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	4658      	mov	r0, fp
 8007fd6:	f000 fbab 	bl	8008730 <_Bfree>
 8007fda:	4629      	mov	r1, r5
 8007fdc:	4658      	mov	r0, fp
 8007fde:	f000 fba7 	bl	8008730 <_Bfree>
 8007fe2:	e7d0      	b.n	8007f86 <_dtoa_r+0x65e>
 8007fe4:	9704      	str	r7, [sp, #16]
 8007fe6:	4633      	mov	r3, r6
 8007fe8:	461e      	mov	r6, r3
 8007fea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fee:	2a39      	cmp	r2, #57	@ 0x39
 8007ff0:	d107      	bne.n	8008002 <_dtoa_r+0x6da>
 8007ff2:	459a      	cmp	sl, r3
 8007ff4:	d1f8      	bne.n	8007fe8 <_dtoa_r+0x6c0>
 8007ff6:	9a04      	ldr	r2, [sp, #16]
 8007ff8:	3201      	adds	r2, #1
 8007ffa:	9204      	str	r2, [sp, #16]
 8007ffc:	2230      	movs	r2, #48	@ 0x30
 8007ffe:	f88a 2000 	strb.w	r2, [sl]
 8008002:	781a      	ldrb	r2, [r3, #0]
 8008004:	3201      	adds	r2, #1
 8008006:	701a      	strb	r2, [r3, #0]
 8008008:	e7bd      	b.n	8007f86 <_dtoa_r+0x65e>
 800800a:	4b7b      	ldr	r3, [pc, #492]	@ (80081f8 <_dtoa_r+0x8d0>)
 800800c:	2200      	movs	r2, #0
 800800e:	f7f8 faf3 	bl	80005f8 <__aeabi_dmul>
 8008012:	2200      	movs	r2, #0
 8008014:	2300      	movs	r3, #0
 8008016:	4604      	mov	r4, r0
 8008018:	460d      	mov	r5, r1
 800801a:	f7f8 fd55 	bl	8000ac8 <__aeabi_dcmpeq>
 800801e:	2800      	cmp	r0, #0
 8008020:	f43f aebb 	beq.w	8007d9a <_dtoa_r+0x472>
 8008024:	e6f0      	b.n	8007e08 <_dtoa_r+0x4e0>
 8008026:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008028:	2a00      	cmp	r2, #0
 800802a:	f000 80db 	beq.w	80081e4 <_dtoa_r+0x8bc>
 800802e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008030:	2a01      	cmp	r2, #1
 8008032:	f300 80bf 	bgt.w	80081b4 <_dtoa_r+0x88c>
 8008036:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008038:	2a00      	cmp	r2, #0
 800803a:	f000 80b7 	beq.w	80081ac <_dtoa_r+0x884>
 800803e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008042:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008044:	4646      	mov	r6, r8
 8008046:	9a08      	ldr	r2, [sp, #32]
 8008048:	2101      	movs	r1, #1
 800804a:	441a      	add	r2, r3
 800804c:	4658      	mov	r0, fp
 800804e:	4498      	add	r8, r3
 8008050:	9208      	str	r2, [sp, #32]
 8008052:	f000 fc6b 	bl	800892c <__i2b>
 8008056:	4605      	mov	r5, r0
 8008058:	b15e      	cbz	r6, 8008072 <_dtoa_r+0x74a>
 800805a:	9b08      	ldr	r3, [sp, #32]
 800805c:	2b00      	cmp	r3, #0
 800805e:	dd08      	ble.n	8008072 <_dtoa_r+0x74a>
 8008060:	42b3      	cmp	r3, r6
 8008062:	9a08      	ldr	r2, [sp, #32]
 8008064:	bfa8      	it	ge
 8008066:	4633      	movge	r3, r6
 8008068:	eba8 0803 	sub.w	r8, r8, r3
 800806c:	1af6      	subs	r6, r6, r3
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	9308      	str	r3, [sp, #32]
 8008072:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008074:	b1f3      	cbz	r3, 80080b4 <_dtoa_r+0x78c>
 8008076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 80b7 	beq.w	80081ec <_dtoa_r+0x8c4>
 800807e:	b18c      	cbz	r4, 80080a4 <_dtoa_r+0x77c>
 8008080:	4629      	mov	r1, r5
 8008082:	4622      	mov	r2, r4
 8008084:	4658      	mov	r0, fp
 8008086:	f000 fd11 	bl	8008aac <__pow5mult>
 800808a:	464a      	mov	r2, r9
 800808c:	4601      	mov	r1, r0
 800808e:	4605      	mov	r5, r0
 8008090:	4658      	mov	r0, fp
 8008092:	f000 fc61 	bl	8008958 <__multiply>
 8008096:	4649      	mov	r1, r9
 8008098:	9004      	str	r0, [sp, #16]
 800809a:	4658      	mov	r0, fp
 800809c:	f000 fb48 	bl	8008730 <_Bfree>
 80080a0:	9b04      	ldr	r3, [sp, #16]
 80080a2:	4699      	mov	r9, r3
 80080a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080a6:	1b1a      	subs	r2, r3, r4
 80080a8:	d004      	beq.n	80080b4 <_dtoa_r+0x78c>
 80080aa:	4649      	mov	r1, r9
 80080ac:	4658      	mov	r0, fp
 80080ae:	f000 fcfd 	bl	8008aac <__pow5mult>
 80080b2:	4681      	mov	r9, r0
 80080b4:	2101      	movs	r1, #1
 80080b6:	4658      	mov	r0, fp
 80080b8:	f000 fc38 	bl	800892c <__i2b>
 80080bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080be:	4604      	mov	r4, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 81cf 	beq.w	8008464 <_dtoa_r+0xb3c>
 80080c6:	461a      	mov	r2, r3
 80080c8:	4601      	mov	r1, r0
 80080ca:	4658      	mov	r0, fp
 80080cc:	f000 fcee 	bl	8008aac <__pow5mult>
 80080d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	4604      	mov	r4, r0
 80080d6:	f300 8095 	bgt.w	8008204 <_dtoa_r+0x8dc>
 80080da:	9b02      	ldr	r3, [sp, #8]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f040 8087 	bne.w	80081f0 <_dtoa_r+0x8c8>
 80080e2:	9b03      	ldr	r3, [sp, #12]
 80080e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f040 8089 	bne.w	8008200 <_dtoa_r+0x8d8>
 80080ee:	9b03      	ldr	r3, [sp, #12]
 80080f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080f4:	0d1b      	lsrs	r3, r3, #20
 80080f6:	051b      	lsls	r3, r3, #20
 80080f8:	b12b      	cbz	r3, 8008106 <_dtoa_r+0x7de>
 80080fa:	9b08      	ldr	r3, [sp, #32]
 80080fc:	3301      	adds	r3, #1
 80080fe:	9308      	str	r3, [sp, #32]
 8008100:	f108 0801 	add.w	r8, r8, #1
 8008104:	2301      	movs	r3, #1
 8008106:	930a      	str	r3, [sp, #40]	@ 0x28
 8008108:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 81b0 	beq.w	8008470 <_dtoa_r+0xb48>
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008116:	6918      	ldr	r0, [r3, #16]
 8008118:	f000 fbbc 	bl	8008894 <__hi0bits>
 800811c:	f1c0 0020 	rsb	r0, r0, #32
 8008120:	9b08      	ldr	r3, [sp, #32]
 8008122:	4418      	add	r0, r3
 8008124:	f010 001f 	ands.w	r0, r0, #31
 8008128:	d077      	beq.n	800821a <_dtoa_r+0x8f2>
 800812a:	f1c0 0320 	rsb	r3, r0, #32
 800812e:	2b04      	cmp	r3, #4
 8008130:	dd6b      	ble.n	800820a <_dtoa_r+0x8e2>
 8008132:	9b08      	ldr	r3, [sp, #32]
 8008134:	f1c0 001c 	rsb	r0, r0, #28
 8008138:	4403      	add	r3, r0
 800813a:	4480      	add	r8, r0
 800813c:	4406      	add	r6, r0
 800813e:	9308      	str	r3, [sp, #32]
 8008140:	f1b8 0f00 	cmp.w	r8, #0
 8008144:	dd05      	ble.n	8008152 <_dtoa_r+0x82a>
 8008146:	4649      	mov	r1, r9
 8008148:	4642      	mov	r2, r8
 800814a:	4658      	mov	r0, fp
 800814c:	f000 fd08 	bl	8008b60 <__lshift>
 8008150:	4681      	mov	r9, r0
 8008152:	9b08      	ldr	r3, [sp, #32]
 8008154:	2b00      	cmp	r3, #0
 8008156:	dd05      	ble.n	8008164 <_dtoa_r+0x83c>
 8008158:	4621      	mov	r1, r4
 800815a:	461a      	mov	r2, r3
 800815c:	4658      	mov	r0, fp
 800815e:	f000 fcff 	bl	8008b60 <__lshift>
 8008162:	4604      	mov	r4, r0
 8008164:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008166:	2b00      	cmp	r3, #0
 8008168:	d059      	beq.n	800821e <_dtoa_r+0x8f6>
 800816a:	4621      	mov	r1, r4
 800816c:	4648      	mov	r0, r9
 800816e:	f000 fd63 	bl	8008c38 <__mcmp>
 8008172:	2800      	cmp	r0, #0
 8008174:	da53      	bge.n	800821e <_dtoa_r+0x8f6>
 8008176:	1e7b      	subs	r3, r7, #1
 8008178:	9304      	str	r3, [sp, #16]
 800817a:	4649      	mov	r1, r9
 800817c:	2300      	movs	r3, #0
 800817e:	220a      	movs	r2, #10
 8008180:	4658      	mov	r0, fp
 8008182:	f000 faf7 	bl	8008774 <__multadd>
 8008186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008188:	4681      	mov	r9, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 8172 	beq.w	8008474 <_dtoa_r+0xb4c>
 8008190:	2300      	movs	r3, #0
 8008192:	4629      	mov	r1, r5
 8008194:	220a      	movs	r2, #10
 8008196:	4658      	mov	r0, fp
 8008198:	f000 faec 	bl	8008774 <__multadd>
 800819c:	9b00      	ldr	r3, [sp, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	4605      	mov	r5, r0
 80081a2:	dc67      	bgt.n	8008274 <_dtoa_r+0x94c>
 80081a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	dc41      	bgt.n	800822e <_dtoa_r+0x906>
 80081aa:	e063      	b.n	8008274 <_dtoa_r+0x94c>
 80081ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80081ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80081b2:	e746      	b.n	8008042 <_dtoa_r+0x71a>
 80081b4:	9b07      	ldr	r3, [sp, #28]
 80081b6:	1e5c      	subs	r4, r3, #1
 80081b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081ba:	42a3      	cmp	r3, r4
 80081bc:	bfbf      	itttt	lt
 80081be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80081c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80081c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80081c4:	1ae3      	sublt	r3, r4, r3
 80081c6:	bfb4      	ite	lt
 80081c8:	18d2      	addlt	r2, r2, r3
 80081ca:	1b1c      	subge	r4, r3, r4
 80081cc:	9b07      	ldr	r3, [sp, #28]
 80081ce:	bfbc      	itt	lt
 80081d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80081d2:	2400      	movlt	r4, #0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	bfb5      	itete	lt
 80081d8:	eba8 0603 	sublt.w	r6, r8, r3
 80081dc:	9b07      	ldrge	r3, [sp, #28]
 80081de:	2300      	movlt	r3, #0
 80081e0:	4646      	movge	r6, r8
 80081e2:	e730      	b.n	8008046 <_dtoa_r+0x71e>
 80081e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80081e8:	4646      	mov	r6, r8
 80081ea:	e735      	b.n	8008058 <_dtoa_r+0x730>
 80081ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081ee:	e75c      	b.n	80080aa <_dtoa_r+0x782>
 80081f0:	2300      	movs	r3, #0
 80081f2:	e788      	b.n	8008106 <_dtoa_r+0x7de>
 80081f4:	3fe00000 	.word	0x3fe00000
 80081f8:	40240000 	.word	0x40240000
 80081fc:	40140000 	.word	0x40140000
 8008200:	9b02      	ldr	r3, [sp, #8]
 8008202:	e780      	b.n	8008106 <_dtoa_r+0x7de>
 8008204:	2300      	movs	r3, #0
 8008206:	930a      	str	r3, [sp, #40]	@ 0x28
 8008208:	e782      	b.n	8008110 <_dtoa_r+0x7e8>
 800820a:	d099      	beq.n	8008140 <_dtoa_r+0x818>
 800820c:	9a08      	ldr	r2, [sp, #32]
 800820e:	331c      	adds	r3, #28
 8008210:	441a      	add	r2, r3
 8008212:	4498      	add	r8, r3
 8008214:	441e      	add	r6, r3
 8008216:	9208      	str	r2, [sp, #32]
 8008218:	e792      	b.n	8008140 <_dtoa_r+0x818>
 800821a:	4603      	mov	r3, r0
 800821c:	e7f6      	b.n	800820c <_dtoa_r+0x8e4>
 800821e:	9b07      	ldr	r3, [sp, #28]
 8008220:	9704      	str	r7, [sp, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	dc20      	bgt.n	8008268 <_dtoa_r+0x940>
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822a:	2b02      	cmp	r3, #2
 800822c:	dd1e      	ble.n	800826c <_dtoa_r+0x944>
 800822e:	9b00      	ldr	r3, [sp, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	f47f aec0 	bne.w	8007fb6 <_dtoa_r+0x68e>
 8008236:	4621      	mov	r1, r4
 8008238:	2205      	movs	r2, #5
 800823a:	4658      	mov	r0, fp
 800823c:	f000 fa9a 	bl	8008774 <__multadd>
 8008240:	4601      	mov	r1, r0
 8008242:	4604      	mov	r4, r0
 8008244:	4648      	mov	r0, r9
 8008246:	f000 fcf7 	bl	8008c38 <__mcmp>
 800824a:	2800      	cmp	r0, #0
 800824c:	f77f aeb3 	ble.w	8007fb6 <_dtoa_r+0x68e>
 8008250:	4656      	mov	r6, sl
 8008252:	2331      	movs	r3, #49	@ 0x31
 8008254:	f806 3b01 	strb.w	r3, [r6], #1
 8008258:	9b04      	ldr	r3, [sp, #16]
 800825a:	3301      	adds	r3, #1
 800825c:	9304      	str	r3, [sp, #16]
 800825e:	e6ae      	b.n	8007fbe <_dtoa_r+0x696>
 8008260:	9c07      	ldr	r4, [sp, #28]
 8008262:	9704      	str	r7, [sp, #16]
 8008264:	4625      	mov	r5, r4
 8008266:	e7f3      	b.n	8008250 <_dtoa_r+0x928>
 8008268:	9b07      	ldr	r3, [sp, #28]
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 8104 	beq.w	800847c <_dtoa_r+0xb54>
 8008274:	2e00      	cmp	r6, #0
 8008276:	dd05      	ble.n	8008284 <_dtoa_r+0x95c>
 8008278:	4629      	mov	r1, r5
 800827a:	4632      	mov	r2, r6
 800827c:	4658      	mov	r0, fp
 800827e:	f000 fc6f 	bl	8008b60 <__lshift>
 8008282:	4605      	mov	r5, r0
 8008284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008286:	2b00      	cmp	r3, #0
 8008288:	d05a      	beq.n	8008340 <_dtoa_r+0xa18>
 800828a:	6869      	ldr	r1, [r5, #4]
 800828c:	4658      	mov	r0, fp
 800828e:	f000 fa0f 	bl	80086b0 <_Balloc>
 8008292:	4606      	mov	r6, r0
 8008294:	b928      	cbnz	r0, 80082a2 <_dtoa_r+0x97a>
 8008296:	4b84      	ldr	r3, [pc, #528]	@ (80084a8 <_dtoa_r+0xb80>)
 8008298:	4602      	mov	r2, r0
 800829a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800829e:	f7ff bb5a 	b.w	8007956 <_dtoa_r+0x2e>
 80082a2:	692a      	ldr	r2, [r5, #16]
 80082a4:	3202      	adds	r2, #2
 80082a6:	0092      	lsls	r2, r2, #2
 80082a8:	f105 010c 	add.w	r1, r5, #12
 80082ac:	300c      	adds	r0, #12
 80082ae:	f002 f94b 	bl	800a548 <memcpy>
 80082b2:	2201      	movs	r2, #1
 80082b4:	4631      	mov	r1, r6
 80082b6:	4658      	mov	r0, fp
 80082b8:	f000 fc52 	bl	8008b60 <__lshift>
 80082bc:	f10a 0301 	add.w	r3, sl, #1
 80082c0:	9307      	str	r3, [sp, #28]
 80082c2:	9b00      	ldr	r3, [sp, #0]
 80082c4:	4453      	add	r3, sl
 80082c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082c8:	9b02      	ldr	r3, [sp, #8]
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	462f      	mov	r7, r5
 80082d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80082d2:	4605      	mov	r5, r0
 80082d4:	9b07      	ldr	r3, [sp, #28]
 80082d6:	4621      	mov	r1, r4
 80082d8:	3b01      	subs	r3, #1
 80082da:	4648      	mov	r0, r9
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	f7ff fa9b 	bl	8007818 <quorem>
 80082e2:	4639      	mov	r1, r7
 80082e4:	9002      	str	r0, [sp, #8]
 80082e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80082ea:	4648      	mov	r0, r9
 80082ec:	f000 fca4 	bl	8008c38 <__mcmp>
 80082f0:	462a      	mov	r2, r5
 80082f2:	9008      	str	r0, [sp, #32]
 80082f4:	4621      	mov	r1, r4
 80082f6:	4658      	mov	r0, fp
 80082f8:	f000 fcba 	bl	8008c70 <__mdiff>
 80082fc:	68c2      	ldr	r2, [r0, #12]
 80082fe:	4606      	mov	r6, r0
 8008300:	bb02      	cbnz	r2, 8008344 <_dtoa_r+0xa1c>
 8008302:	4601      	mov	r1, r0
 8008304:	4648      	mov	r0, r9
 8008306:	f000 fc97 	bl	8008c38 <__mcmp>
 800830a:	4602      	mov	r2, r0
 800830c:	4631      	mov	r1, r6
 800830e:	4658      	mov	r0, fp
 8008310:	920e      	str	r2, [sp, #56]	@ 0x38
 8008312:	f000 fa0d 	bl	8008730 <_Bfree>
 8008316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008318:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800831a:	9e07      	ldr	r6, [sp, #28]
 800831c:	ea43 0102 	orr.w	r1, r3, r2
 8008320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008322:	4319      	orrs	r1, r3
 8008324:	d110      	bne.n	8008348 <_dtoa_r+0xa20>
 8008326:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800832a:	d029      	beq.n	8008380 <_dtoa_r+0xa58>
 800832c:	9b08      	ldr	r3, [sp, #32]
 800832e:	2b00      	cmp	r3, #0
 8008330:	dd02      	ble.n	8008338 <_dtoa_r+0xa10>
 8008332:	9b02      	ldr	r3, [sp, #8]
 8008334:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008338:	9b00      	ldr	r3, [sp, #0]
 800833a:	f883 8000 	strb.w	r8, [r3]
 800833e:	e63f      	b.n	8007fc0 <_dtoa_r+0x698>
 8008340:	4628      	mov	r0, r5
 8008342:	e7bb      	b.n	80082bc <_dtoa_r+0x994>
 8008344:	2201      	movs	r2, #1
 8008346:	e7e1      	b.n	800830c <_dtoa_r+0x9e4>
 8008348:	9b08      	ldr	r3, [sp, #32]
 800834a:	2b00      	cmp	r3, #0
 800834c:	db04      	blt.n	8008358 <_dtoa_r+0xa30>
 800834e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008350:	430b      	orrs	r3, r1
 8008352:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008354:	430b      	orrs	r3, r1
 8008356:	d120      	bne.n	800839a <_dtoa_r+0xa72>
 8008358:	2a00      	cmp	r2, #0
 800835a:	dded      	ble.n	8008338 <_dtoa_r+0xa10>
 800835c:	4649      	mov	r1, r9
 800835e:	2201      	movs	r2, #1
 8008360:	4658      	mov	r0, fp
 8008362:	f000 fbfd 	bl	8008b60 <__lshift>
 8008366:	4621      	mov	r1, r4
 8008368:	4681      	mov	r9, r0
 800836a:	f000 fc65 	bl	8008c38 <__mcmp>
 800836e:	2800      	cmp	r0, #0
 8008370:	dc03      	bgt.n	800837a <_dtoa_r+0xa52>
 8008372:	d1e1      	bne.n	8008338 <_dtoa_r+0xa10>
 8008374:	f018 0f01 	tst.w	r8, #1
 8008378:	d0de      	beq.n	8008338 <_dtoa_r+0xa10>
 800837a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800837e:	d1d8      	bne.n	8008332 <_dtoa_r+0xa0a>
 8008380:	9a00      	ldr	r2, [sp, #0]
 8008382:	2339      	movs	r3, #57	@ 0x39
 8008384:	7013      	strb	r3, [r2, #0]
 8008386:	4633      	mov	r3, r6
 8008388:	461e      	mov	r6, r3
 800838a:	3b01      	subs	r3, #1
 800838c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008390:	2a39      	cmp	r2, #57	@ 0x39
 8008392:	d052      	beq.n	800843a <_dtoa_r+0xb12>
 8008394:	3201      	adds	r2, #1
 8008396:	701a      	strb	r2, [r3, #0]
 8008398:	e612      	b.n	8007fc0 <_dtoa_r+0x698>
 800839a:	2a00      	cmp	r2, #0
 800839c:	dd07      	ble.n	80083ae <_dtoa_r+0xa86>
 800839e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083a2:	d0ed      	beq.n	8008380 <_dtoa_r+0xa58>
 80083a4:	9a00      	ldr	r2, [sp, #0]
 80083a6:	f108 0301 	add.w	r3, r8, #1
 80083aa:	7013      	strb	r3, [r2, #0]
 80083ac:	e608      	b.n	8007fc0 <_dtoa_r+0x698>
 80083ae:	9b07      	ldr	r3, [sp, #28]
 80083b0:	9a07      	ldr	r2, [sp, #28]
 80083b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80083b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d028      	beq.n	800840e <_dtoa_r+0xae6>
 80083bc:	4649      	mov	r1, r9
 80083be:	2300      	movs	r3, #0
 80083c0:	220a      	movs	r2, #10
 80083c2:	4658      	mov	r0, fp
 80083c4:	f000 f9d6 	bl	8008774 <__multadd>
 80083c8:	42af      	cmp	r7, r5
 80083ca:	4681      	mov	r9, r0
 80083cc:	f04f 0300 	mov.w	r3, #0
 80083d0:	f04f 020a 	mov.w	r2, #10
 80083d4:	4639      	mov	r1, r7
 80083d6:	4658      	mov	r0, fp
 80083d8:	d107      	bne.n	80083ea <_dtoa_r+0xac2>
 80083da:	f000 f9cb 	bl	8008774 <__multadd>
 80083de:	4607      	mov	r7, r0
 80083e0:	4605      	mov	r5, r0
 80083e2:	9b07      	ldr	r3, [sp, #28]
 80083e4:	3301      	adds	r3, #1
 80083e6:	9307      	str	r3, [sp, #28]
 80083e8:	e774      	b.n	80082d4 <_dtoa_r+0x9ac>
 80083ea:	f000 f9c3 	bl	8008774 <__multadd>
 80083ee:	4629      	mov	r1, r5
 80083f0:	4607      	mov	r7, r0
 80083f2:	2300      	movs	r3, #0
 80083f4:	220a      	movs	r2, #10
 80083f6:	4658      	mov	r0, fp
 80083f8:	f000 f9bc 	bl	8008774 <__multadd>
 80083fc:	4605      	mov	r5, r0
 80083fe:	e7f0      	b.n	80083e2 <_dtoa_r+0xaba>
 8008400:	9b00      	ldr	r3, [sp, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	bfcc      	ite	gt
 8008406:	461e      	movgt	r6, r3
 8008408:	2601      	movle	r6, #1
 800840a:	4456      	add	r6, sl
 800840c:	2700      	movs	r7, #0
 800840e:	4649      	mov	r1, r9
 8008410:	2201      	movs	r2, #1
 8008412:	4658      	mov	r0, fp
 8008414:	f000 fba4 	bl	8008b60 <__lshift>
 8008418:	4621      	mov	r1, r4
 800841a:	4681      	mov	r9, r0
 800841c:	f000 fc0c 	bl	8008c38 <__mcmp>
 8008420:	2800      	cmp	r0, #0
 8008422:	dcb0      	bgt.n	8008386 <_dtoa_r+0xa5e>
 8008424:	d102      	bne.n	800842c <_dtoa_r+0xb04>
 8008426:	f018 0f01 	tst.w	r8, #1
 800842a:	d1ac      	bne.n	8008386 <_dtoa_r+0xa5e>
 800842c:	4633      	mov	r3, r6
 800842e:	461e      	mov	r6, r3
 8008430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008434:	2a30      	cmp	r2, #48	@ 0x30
 8008436:	d0fa      	beq.n	800842e <_dtoa_r+0xb06>
 8008438:	e5c2      	b.n	8007fc0 <_dtoa_r+0x698>
 800843a:	459a      	cmp	sl, r3
 800843c:	d1a4      	bne.n	8008388 <_dtoa_r+0xa60>
 800843e:	9b04      	ldr	r3, [sp, #16]
 8008440:	3301      	adds	r3, #1
 8008442:	9304      	str	r3, [sp, #16]
 8008444:	2331      	movs	r3, #49	@ 0x31
 8008446:	f88a 3000 	strb.w	r3, [sl]
 800844a:	e5b9      	b.n	8007fc0 <_dtoa_r+0x698>
 800844c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800844e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80084ac <_dtoa_r+0xb84>
 8008452:	b11b      	cbz	r3, 800845c <_dtoa_r+0xb34>
 8008454:	f10a 0308 	add.w	r3, sl, #8
 8008458:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	4650      	mov	r0, sl
 800845e:	b019      	add	sp, #100	@ 0x64
 8008460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008466:	2b01      	cmp	r3, #1
 8008468:	f77f ae37 	ble.w	80080da <_dtoa_r+0x7b2>
 800846c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800846e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008470:	2001      	movs	r0, #1
 8008472:	e655      	b.n	8008120 <_dtoa_r+0x7f8>
 8008474:	9b00      	ldr	r3, [sp, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	f77f aed6 	ble.w	8008228 <_dtoa_r+0x900>
 800847c:	4656      	mov	r6, sl
 800847e:	4621      	mov	r1, r4
 8008480:	4648      	mov	r0, r9
 8008482:	f7ff f9c9 	bl	8007818 <quorem>
 8008486:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800848a:	f806 8b01 	strb.w	r8, [r6], #1
 800848e:	9b00      	ldr	r3, [sp, #0]
 8008490:	eba6 020a 	sub.w	r2, r6, sl
 8008494:	4293      	cmp	r3, r2
 8008496:	ddb3      	ble.n	8008400 <_dtoa_r+0xad8>
 8008498:	4649      	mov	r1, r9
 800849a:	2300      	movs	r3, #0
 800849c:	220a      	movs	r2, #10
 800849e:	4658      	mov	r0, fp
 80084a0:	f000 f968 	bl	8008774 <__multadd>
 80084a4:	4681      	mov	r9, r0
 80084a6:	e7ea      	b.n	800847e <_dtoa_r+0xb56>
 80084a8:	0800b6cd 	.word	0x0800b6cd
 80084ac:	0800b651 	.word	0x0800b651

080084b0 <_free_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4605      	mov	r5, r0
 80084b4:	2900      	cmp	r1, #0
 80084b6:	d041      	beq.n	800853c <_free_r+0x8c>
 80084b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084bc:	1f0c      	subs	r4, r1, #4
 80084be:	2b00      	cmp	r3, #0
 80084c0:	bfb8      	it	lt
 80084c2:	18e4      	addlt	r4, r4, r3
 80084c4:	f000 f8e8 	bl	8008698 <__malloc_lock>
 80084c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008540 <_free_r+0x90>)
 80084ca:	6813      	ldr	r3, [r2, #0]
 80084cc:	b933      	cbnz	r3, 80084dc <_free_r+0x2c>
 80084ce:	6063      	str	r3, [r4, #4]
 80084d0:	6014      	str	r4, [r2, #0]
 80084d2:	4628      	mov	r0, r5
 80084d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084d8:	f000 b8e4 	b.w	80086a4 <__malloc_unlock>
 80084dc:	42a3      	cmp	r3, r4
 80084de:	d908      	bls.n	80084f2 <_free_r+0x42>
 80084e0:	6820      	ldr	r0, [r4, #0]
 80084e2:	1821      	adds	r1, r4, r0
 80084e4:	428b      	cmp	r3, r1
 80084e6:	bf01      	itttt	eq
 80084e8:	6819      	ldreq	r1, [r3, #0]
 80084ea:	685b      	ldreq	r3, [r3, #4]
 80084ec:	1809      	addeq	r1, r1, r0
 80084ee:	6021      	streq	r1, [r4, #0]
 80084f0:	e7ed      	b.n	80084ce <_free_r+0x1e>
 80084f2:	461a      	mov	r2, r3
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	b10b      	cbz	r3, 80084fc <_free_r+0x4c>
 80084f8:	42a3      	cmp	r3, r4
 80084fa:	d9fa      	bls.n	80084f2 <_free_r+0x42>
 80084fc:	6811      	ldr	r1, [r2, #0]
 80084fe:	1850      	adds	r0, r2, r1
 8008500:	42a0      	cmp	r0, r4
 8008502:	d10b      	bne.n	800851c <_free_r+0x6c>
 8008504:	6820      	ldr	r0, [r4, #0]
 8008506:	4401      	add	r1, r0
 8008508:	1850      	adds	r0, r2, r1
 800850a:	4283      	cmp	r3, r0
 800850c:	6011      	str	r1, [r2, #0]
 800850e:	d1e0      	bne.n	80084d2 <_free_r+0x22>
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	6053      	str	r3, [r2, #4]
 8008516:	4408      	add	r0, r1
 8008518:	6010      	str	r0, [r2, #0]
 800851a:	e7da      	b.n	80084d2 <_free_r+0x22>
 800851c:	d902      	bls.n	8008524 <_free_r+0x74>
 800851e:	230c      	movs	r3, #12
 8008520:	602b      	str	r3, [r5, #0]
 8008522:	e7d6      	b.n	80084d2 <_free_r+0x22>
 8008524:	6820      	ldr	r0, [r4, #0]
 8008526:	1821      	adds	r1, r4, r0
 8008528:	428b      	cmp	r3, r1
 800852a:	bf04      	itt	eq
 800852c:	6819      	ldreq	r1, [r3, #0]
 800852e:	685b      	ldreq	r3, [r3, #4]
 8008530:	6063      	str	r3, [r4, #4]
 8008532:	bf04      	itt	eq
 8008534:	1809      	addeq	r1, r1, r0
 8008536:	6021      	streq	r1, [r4, #0]
 8008538:	6054      	str	r4, [r2, #4]
 800853a:	e7ca      	b.n	80084d2 <_free_r+0x22>
 800853c:	bd38      	pop	{r3, r4, r5, pc}
 800853e:	bf00      	nop
 8008540:	20000508 	.word	0x20000508

08008544 <malloc>:
 8008544:	4b02      	ldr	r3, [pc, #8]	@ (8008550 <malloc+0xc>)
 8008546:	4601      	mov	r1, r0
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	f000 b825 	b.w	8008598 <_malloc_r>
 800854e:	bf00      	nop
 8008550:	20000024 	.word	0x20000024

08008554 <sbrk_aligned>:
 8008554:	b570      	push	{r4, r5, r6, lr}
 8008556:	4e0f      	ldr	r6, [pc, #60]	@ (8008594 <sbrk_aligned+0x40>)
 8008558:	460c      	mov	r4, r1
 800855a:	6831      	ldr	r1, [r6, #0]
 800855c:	4605      	mov	r5, r0
 800855e:	b911      	cbnz	r1, 8008566 <sbrk_aligned+0x12>
 8008560:	f001 ffe2 	bl	800a528 <_sbrk_r>
 8008564:	6030      	str	r0, [r6, #0]
 8008566:	4621      	mov	r1, r4
 8008568:	4628      	mov	r0, r5
 800856a:	f001 ffdd 	bl	800a528 <_sbrk_r>
 800856e:	1c43      	adds	r3, r0, #1
 8008570:	d103      	bne.n	800857a <sbrk_aligned+0x26>
 8008572:	f04f 34ff 	mov.w	r4, #4294967295
 8008576:	4620      	mov	r0, r4
 8008578:	bd70      	pop	{r4, r5, r6, pc}
 800857a:	1cc4      	adds	r4, r0, #3
 800857c:	f024 0403 	bic.w	r4, r4, #3
 8008580:	42a0      	cmp	r0, r4
 8008582:	d0f8      	beq.n	8008576 <sbrk_aligned+0x22>
 8008584:	1a21      	subs	r1, r4, r0
 8008586:	4628      	mov	r0, r5
 8008588:	f001 ffce 	bl	800a528 <_sbrk_r>
 800858c:	3001      	adds	r0, #1
 800858e:	d1f2      	bne.n	8008576 <sbrk_aligned+0x22>
 8008590:	e7ef      	b.n	8008572 <sbrk_aligned+0x1e>
 8008592:	bf00      	nop
 8008594:	20000504 	.word	0x20000504

08008598 <_malloc_r>:
 8008598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800859c:	1ccd      	adds	r5, r1, #3
 800859e:	f025 0503 	bic.w	r5, r5, #3
 80085a2:	3508      	adds	r5, #8
 80085a4:	2d0c      	cmp	r5, #12
 80085a6:	bf38      	it	cc
 80085a8:	250c      	movcc	r5, #12
 80085aa:	2d00      	cmp	r5, #0
 80085ac:	4606      	mov	r6, r0
 80085ae:	db01      	blt.n	80085b4 <_malloc_r+0x1c>
 80085b0:	42a9      	cmp	r1, r5
 80085b2:	d904      	bls.n	80085be <_malloc_r+0x26>
 80085b4:	230c      	movs	r3, #12
 80085b6:	6033      	str	r3, [r6, #0]
 80085b8:	2000      	movs	r0, #0
 80085ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008694 <_malloc_r+0xfc>
 80085c2:	f000 f869 	bl	8008698 <__malloc_lock>
 80085c6:	f8d8 3000 	ldr.w	r3, [r8]
 80085ca:	461c      	mov	r4, r3
 80085cc:	bb44      	cbnz	r4, 8008620 <_malloc_r+0x88>
 80085ce:	4629      	mov	r1, r5
 80085d0:	4630      	mov	r0, r6
 80085d2:	f7ff ffbf 	bl	8008554 <sbrk_aligned>
 80085d6:	1c43      	adds	r3, r0, #1
 80085d8:	4604      	mov	r4, r0
 80085da:	d158      	bne.n	800868e <_malloc_r+0xf6>
 80085dc:	f8d8 4000 	ldr.w	r4, [r8]
 80085e0:	4627      	mov	r7, r4
 80085e2:	2f00      	cmp	r7, #0
 80085e4:	d143      	bne.n	800866e <_malloc_r+0xd6>
 80085e6:	2c00      	cmp	r4, #0
 80085e8:	d04b      	beq.n	8008682 <_malloc_r+0xea>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	4639      	mov	r1, r7
 80085ee:	4630      	mov	r0, r6
 80085f0:	eb04 0903 	add.w	r9, r4, r3
 80085f4:	f001 ff98 	bl	800a528 <_sbrk_r>
 80085f8:	4581      	cmp	r9, r0
 80085fa:	d142      	bne.n	8008682 <_malloc_r+0xea>
 80085fc:	6821      	ldr	r1, [r4, #0]
 80085fe:	1a6d      	subs	r5, r5, r1
 8008600:	4629      	mov	r1, r5
 8008602:	4630      	mov	r0, r6
 8008604:	f7ff ffa6 	bl	8008554 <sbrk_aligned>
 8008608:	3001      	adds	r0, #1
 800860a:	d03a      	beq.n	8008682 <_malloc_r+0xea>
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	442b      	add	r3, r5
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	f8d8 3000 	ldr.w	r3, [r8]
 8008616:	685a      	ldr	r2, [r3, #4]
 8008618:	bb62      	cbnz	r2, 8008674 <_malloc_r+0xdc>
 800861a:	f8c8 7000 	str.w	r7, [r8]
 800861e:	e00f      	b.n	8008640 <_malloc_r+0xa8>
 8008620:	6822      	ldr	r2, [r4, #0]
 8008622:	1b52      	subs	r2, r2, r5
 8008624:	d420      	bmi.n	8008668 <_malloc_r+0xd0>
 8008626:	2a0b      	cmp	r2, #11
 8008628:	d917      	bls.n	800865a <_malloc_r+0xc2>
 800862a:	1961      	adds	r1, r4, r5
 800862c:	42a3      	cmp	r3, r4
 800862e:	6025      	str	r5, [r4, #0]
 8008630:	bf18      	it	ne
 8008632:	6059      	strne	r1, [r3, #4]
 8008634:	6863      	ldr	r3, [r4, #4]
 8008636:	bf08      	it	eq
 8008638:	f8c8 1000 	streq.w	r1, [r8]
 800863c:	5162      	str	r2, [r4, r5]
 800863e:	604b      	str	r3, [r1, #4]
 8008640:	4630      	mov	r0, r6
 8008642:	f000 f82f 	bl	80086a4 <__malloc_unlock>
 8008646:	f104 000b 	add.w	r0, r4, #11
 800864a:	1d23      	adds	r3, r4, #4
 800864c:	f020 0007 	bic.w	r0, r0, #7
 8008650:	1ac2      	subs	r2, r0, r3
 8008652:	bf1c      	itt	ne
 8008654:	1a1b      	subne	r3, r3, r0
 8008656:	50a3      	strne	r3, [r4, r2]
 8008658:	e7af      	b.n	80085ba <_malloc_r+0x22>
 800865a:	6862      	ldr	r2, [r4, #4]
 800865c:	42a3      	cmp	r3, r4
 800865e:	bf0c      	ite	eq
 8008660:	f8c8 2000 	streq.w	r2, [r8]
 8008664:	605a      	strne	r2, [r3, #4]
 8008666:	e7eb      	b.n	8008640 <_malloc_r+0xa8>
 8008668:	4623      	mov	r3, r4
 800866a:	6864      	ldr	r4, [r4, #4]
 800866c:	e7ae      	b.n	80085cc <_malloc_r+0x34>
 800866e:	463c      	mov	r4, r7
 8008670:	687f      	ldr	r7, [r7, #4]
 8008672:	e7b6      	b.n	80085e2 <_malloc_r+0x4a>
 8008674:	461a      	mov	r2, r3
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	42a3      	cmp	r3, r4
 800867a:	d1fb      	bne.n	8008674 <_malloc_r+0xdc>
 800867c:	2300      	movs	r3, #0
 800867e:	6053      	str	r3, [r2, #4]
 8008680:	e7de      	b.n	8008640 <_malloc_r+0xa8>
 8008682:	230c      	movs	r3, #12
 8008684:	6033      	str	r3, [r6, #0]
 8008686:	4630      	mov	r0, r6
 8008688:	f000 f80c 	bl	80086a4 <__malloc_unlock>
 800868c:	e794      	b.n	80085b8 <_malloc_r+0x20>
 800868e:	6005      	str	r5, [r0, #0]
 8008690:	e7d6      	b.n	8008640 <_malloc_r+0xa8>
 8008692:	bf00      	nop
 8008694:	20000508 	.word	0x20000508

08008698 <__malloc_lock>:
 8008698:	4801      	ldr	r0, [pc, #4]	@ (80086a0 <__malloc_lock+0x8>)
 800869a:	f7ff b8b4 	b.w	8007806 <__retarget_lock_acquire_recursive>
 800869e:	bf00      	nop
 80086a0:	20000500 	.word	0x20000500

080086a4 <__malloc_unlock>:
 80086a4:	4801      	ldr	r0, [pc, #4]	@ (80086ac <__malloc_unlock+0x8>)
 80086a6:	f7ff b8af 	b.w	8007808 <__retarget_lock_release_recursive>
 80086aa:	bf00      	nop
 80086ac:	20000500 	.word	0x20000500

080086b0 <_Balloc>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	69c6      	ldr	r6, [r0, #28]
 80086b4:	4604      	mov	r4, r0
 80086b6:	460d      	mov	r5, r1
 80086b8:	b976      	cbnz	r6, 80086d8 <_Balloc+0x28>
 80086ba:	2010      	movs	r0, #16
 80086bc:	f7ff ff42 	bl	8008544 <malloc>
 80086c0:	4602      	mov	r2, r0
 80086c2:	61e0      	str	r0, [r4, #28]
 80086c4:	b920      	cbnz	r0, 80086d0 <_Balloc+0x20>
 80086c6:	4b18      	ldr	r3, [pc, #96]	@ (8008728 <_Balloc+0x78>)
 80086c8:	4818      	ldr	r0, [pc, #96]	@ (800872c <_Balloc+0x7c>)
 80086ca:	216b      	movs	r1, #107	@ 0x6b
 80086cc:	f001 ff54 	bl	800a578 <__assert_func>
 80086d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086d4:	6006      	str	r6, [r0, #0]
 80086d6:	60c6      	str	r6, [r0, #12]
 80086d8:	69e6      	ldr	r6, [r4, #28]
 80086da:	68f3      	ldr	r3, [r6, #12]
 80086dc:	b183      	cbz	r3, 8008700 <_Balloc+0x50>
 80086de:	69e3      	ldr	r3, [r4, #28]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086e6:	b9b8      	cbnz	r0, 8008718 <_Balloc+0x68>
 80086e8:	2101      	movs	r1, #1
 80086ea:	fa01 f605 	lsl.w	r6, r1, r5
 80086ee:	1d72      	adds	r2, r6, #5
 80086f0:	0092      	lsls	r2, r2, #2
 80086f2:	4620      	mov	r0, r4
 80086f4:	f001 ff5e 	bl	800a5b4 <_calloc_r>
 80086f8:	b160      	cbz	r0, 8008714 <_Balloc+0x64>
 80086fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086fe:	e00e      	b.n	800871e <_Balloc+0x6e>
 8008700:	2221      	movs	r2, #33	@ 0x21
 8008702:	2104      	movs	r1, #4
 8008704:	4620      	mov	r0, r4
 8008706:	f001 ff55 	bl	800a5b4 <_calloc_r>
 800870a:	69e3      	ldr	r3, [r4, #28]
 800870c:	60f0      	str	r0, [r6, #12]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e4      	bne.n	80086de <_Balloc+0x2e>
 8008714:	2000      	movs	r0, #0
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	6802      	ldr	r2, [r0, #0]
 800871a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800871e:	2300      	movs	r3, #0
 8008720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008724:	e7f7      	b.n	8008716 <_Balloc+0x66>
 8008726:	bf00      	nop
 8008728:	0800b65e 	.word	0x0800b65e
 800872c:	0800b6de 	.word	0x0800b6de

08008730 <_Bfree>:
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	69c6      	ldr	r6, [r0, #28]
 8008734:	4605      	mov	r5, r0
 8008736:	460c      	mov	r4, r1
 8008738:	b976      	cbnz	r6, 8008758 <_Bfree+0x28>
 800873a:	2010      	movs	r0, #16
 800873c:	f7ff ff02 	bl	8008544 <malloc>
 8008740:	4602      	mov	r2, r0
 8008742:	61e8      	str	r0, [r5, #28]
 8008744:	b920      	cbnz	r0, 8008750 <_Bfree+0x20>
 8008746:	4b09      	ldr	r3, [pc, #36]	@ (800876c <_Bfree+0x3c>)
 8008748:	4809      	ldr	r0, [pc, #36]	@ (8008770 <_Bfree+0x40>)
 800874a:	218f      	movs	r1, #143	@ 0x8f
 800874c:	f001 ff14 	bl	800a578 <__assert_func>
 8008750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008754:	6006      	str	r6, [r0, #0]
 8008756:	60c6      	str	r6, [r0, #12]
 8008758:	b13c      	cbz	r4, 800876a <_Bfree+0x3a>
 800875a:	69eb      	ldr	r3, [r5, #28]
 800875c:	6862      	ldr	r2, [r4, #4]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008764:	6021      	str	r1, [r4, #0]
 8008766:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800876a:	bd70      	pop	{r4, r5, r6, pc}
 800876c:	0800b65e 	.word	0x0800b65e
 8008770:	0800b6de 	.word	0x0800b6de

08008774 <__multadd>:
 8008774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008778:	690d      	ldr	r5, [r1, #16]
 800877a:	4607      	mov	r7, r0
 800877c:	460c      	mov	r4, r1
 800877e:	461e      	mov	r6, r3
 8008780:	f101 0c14 	add.w	ip, r1, #20
 8008784:	2000      	movs	r0, #0
 8008786:	f8dc 3000 	ldr.w	r3, [ip]
 800878a:	b299      	uxth	r1, r3
 800878c:	fb02 6101 	mla	r1, r2, r1, r6
 8008790:	0c1e      	lsrs	r6, r3, #16
 8008792:	0c0b      	lsrs	r3, r1, #16
 8008794:	fb02 3306 	mla	r3, r2, r6, r3
 8008798:	b289      	uxth	r1, r1
 800879a:	3001      	adds	r0, #1
 800879c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087a0:	4285      	cmp	r5, r0
 80087a2:	f84c 1b04 	str.w	r1, [ip], #4
 80087a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087aa:	dcec      	bgt.n	8008786 <__multadd+0x12>
 80087ac:	b30e      	cbz	r6, 80087f2 <__multadd+0x7e>
 80087ae:	68a3      	ldr	r3, [r4, #8]
 80087b0:	42ab      	cmp	r3, r5
 80087b2:	dc19      	bgt.n	80087e8 <__multadd+0x74>
 80087b4:	6861      	ldr	r1, [r4, #4]
 80087b6:	4638      	mov	r0, r7
 80087b8:	3101      	adds	r1, #1
 80087ba:	f7ff ff79 	bl	80086b0 <_Balloc>
 80087be:	4680      	mov	r8, r0
 80087c0:	b928      	cbnz	r0, 80087ce <__multadd+0x5a>
 80087c2:	4602      	mov	r2, r0
 80087c4:	4b0c      	ldr	r3, [pc, #48]	@ (80087f8 <__multadd+0x84>)
 80087c6:	480d      	ldr	r0, [pc, #52]	@ (80087fc <__multadd+0x88>)
 80087c8:	21ba      	movs	r1, #186	@ 0xba
 80087ca:	f001 fed5 	bl	800a578 <__assert_func>
 80087ce:	6922      	ldr	r2, [r4, #16]
 80087d0:	3202      	adds	r2, #2
 80087d2:	f104 010c 	add.w	r1, r4, #12
 80087d6:	0092      	lsls	r2, r2, #2
 80087d8:	300c      	adds	r0, #12
 80087da:	f001 feb5 	bl	800a548 <memcpy>
 80087de:	4621      	mov	r1, r4
 80087e0:	4638      	mov	r0, r7
 80087e2:	f7ff ffa5 	bl	8008730 <_Bfree>
 80087e6:	4644      	mov	r4, r8
 80087e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087ec:	3501      	adds	r5, #1
 80087ee:	615e      	str	r6, [r3, #20]
 80087f0:	6125      	str	r5, [r4, #16]
 80087f2:	4620      	mov	r0, r4
 80087f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f8:	0800b6cd 	.word	0x0800b6cd
 80087fc:	0800b6de 	.word	0x0800b6de

08008800 <__s2b>:
 8008800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008804:	460c      	mov	r4, r1
 8008806:	4615      	mov	r5, r2
 8008808:	461f      	mov	r7, r3
 800880a:	2209      	movs	r2, #9
 800880c:	3308      	adds	r3, #8
 800880e:	4606      	mov	r6, r0
 8008810:	fb93 f3f2 	sdiv	r3, r3, r2
 8008814:	2100      	movs	r1, #0
 8008816:	2201      	movs	r2, #1
 8008818:	429a      	cmp	r2, r3
 800881a:	db09      	blt.n	8008830 <__s2b+0x30>
 800881c:	4630      	mov	r0, r6
 800881e:	f7ff ff47 	bl	80086b0 <_Balloc>
 8008822:	b940      	cbnz	r0, 8008836 <__s2b+0x36>
 8008824:	4602      	mov	r2, r0
 8008826:	4b19      	ldr	r3, [pc, #100]	@ (800888c <__s2b+0x8c>)
 8008828:	4819      	ldr	r0, [pc, #100]	@ (8008890 <__s2b+0x90>)
 800882a:	21d3      	movs	r1, #211	@ 0xd3
 800882c:	f001 fea4 	bl	800a578 <__assert_func>
 8008830:	0052      	lsls	r2, r2, #1
 8008832:	3101      	adds	r1, #1
 8008834:	e7f0      	b.n	8008818 <__s2b+0x18>
 8008836:	9b08      	ldr	r3, [sp, #32]
 8008838:	6143      	str	r3, [r0, #20]
 800883a:	2d09      	cmp	r5, #9
 800883c:	f04f 0301 	mov.w	r3, #1
 8008840:	6103      	str	r3, [r0, #16]
 8008842:	dd16      	ble.n	8008872 <__s2b+0x72>
 8008844:	f104 0909 	add.w	r9, r4, #9
 8008848:	46c8      	mov	r8, r9
 800884a:	442c      	add	r4, r5
 800884c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008850:	4601      	mov	r1, r0
 8008852:	3b30      	subs	r3, #48	@ 0x30
 8008854:	220a      	movs	r2, #10
 8008856:	4630      	mov	r0, r6
 8008858:	f7ff ff8c 	bl	8008774 <__multadd>
 800885c:	45a0      	cmp	r8, r4
 800885e:	d1f5      	bne.n	800884c <__s2b+0x4c>
 8008860:	f1a5 0408 	sub.w	r4, r5, #8
 8008864:	444c      	add	r4, r9
 8008866:	1b2d      	subs	r5, r5, r4
 8008868:	1963      	adds	r3, r4, r5
 800886a:	42bb      	cmp	r3, r7
 800886c:	db04      	blt.n	8008878 <__s2b+0x78>
 800886e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008872:	340a      	adds	r4, #10
 8008874:	2509      	movs	r5, #9
 8008876:	e7f6      	b.n	8008866 <__s2b+0x66>
 8008878:	f814 3b01 	ldrb.w	r3, [r4], #1
 800887c:	4601      	mov	r1, r0
 800887e:	3b30      	subs	r3, #48	@ 0x30
 8008880:	220a      	movs	r2, #10
 8008882:	4630      	mov	r0, r6
 8008884:	f7ff ff76 	bl	8008774 <__multadd>
 8008888:	e7ee      	b.n	8008868 <__s2b+0x68>
 800888a:	bf00      	nop
 800888c:	0800b6cd 	.word	0x0800b6cd
 8008890:	0800b6de 	.word	0x0800b6de

08008894 <__hi0bits>:
 8008894:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008898:	4603      	mov	r3, r0
 800889a:	bf36      	itet	cc
 800889c:	0403      	lslcc	r3, r0, #16
 800889e:	2000      	movcs	r0, #0
 80088a0:	2010      	movcc	r0, #16
 80088a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088a6:	bf3c      	itt	cc
 80088a8:	021b      	lslcc	r3, r3, #8
 80088aa:	3008      	addcc	r0, #8
 80088ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088b0:	bf3c      	itt	cc
 80088b2:	011b      	lslcc	r3, r3, #4
 80088b4:	3004      	addcc	r0, #4
 80088b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ba:	bf3c      	itt	cc
 80088bc:	009b      	lslcc	r3, r3, #2
 80088be:	3002      	addcc	r0, #2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	db05      	blt.n	80088d0 <__hi0bits+0x3c>
 80088c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80088c8:	f100 0001 	add.w	r0, r0, #1
 80088cc:	bf08      	it	eq
 80088ce:	2020      	moveq	r0, #32
 80088d0:	4770      	bx	lr

080088d2 <__lo0bits>:
 80088d2:	6803      	ldr	r3, [r0, #0]
 80088d4:	4602      	mov	r2, r0
 80088d6:	f013 0007 	ands.w	r0, r3, #7
 80088da:	d00b      	beq.n	80088f4 <__lo0bits+0x22>
 80088dc:	07d9      	lsls	r1, r3, #31
 80088de:	d421      	bmi.n	8008924 <__lo0bits+0x52>
 80088e0:	0798      	lsls	r0, r3, #30
 80088e2:	bf49      	itett	mi
 80088e4:	085b      	lsrmi	r3, r3, #1
 80088e6:	089b      	lsrpl	r3, r3, #2
 80088e8:	2001      	movmi	r0, #1
 80088ea:	6013      	strmi	r3, [r2, #0]
 80088ec:	bf5c      	itt	pl
 80088ee:	6013      	strpl	r3, [r2, #0]
 80088f0:	2002      	movpl	r0, #2
 80088f2:	4770      	bx	lr
 80088f4:	b299      	uxth	r1, r3
 80088f6:	b909      	cbnz	r1, 80088fc <__lo0bits+0x2a>
 80088f8:	0c1b      	lsrs	r3, r3, #16
 80088fa:	2010      	movs	r0, #16
 80088fc:	b2d9      	uxtb	r1, r3
 80088fe:	b909      	cbnz	r1, 8008904 <__lo0bits+0x32>
 8008900:	3008      	adds	r0, #8
 8008902:	0a1b      	lsrs	r3, r3, #8
 8008904:	0719      	lsls	r1, r3, #28
 8008906:	bf04      	itt	eq
 8008908:	091b      	lsreq	r3, r3, #4
 800890a:	3004      	addeq	r0, #4
 800890c:	0799      	lsls	r1, r3, #30
 800890e:	bf04      	itt	eq
 8008910:	089b      	lsreq	r3, r3, #2
 8008912:	3002      	addeq	r0, #2
 8008914:	07d9      	lsls	r1, r3, #31
 8008916:	d403      	bmi.n	8008920 <__lo0bits+0x4e>
 8008918:	085b      	lsrs	r3, r3, #1
 800891a:	f100 0001 	add.w	r0, r0, #1
 800891e:	d003      	beq.n	8008928 <__lo0bits+0x56>
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	4770      	bx	lr
 8008924:	2000      	movs	r0, #0
 8008926:	4770      	bx	lr
 8008928:	2020      	movs	r0, #32
 800892a:	4770      	bx	lr

0800892c <__i2b>:
 800892c:	b510      	push	{r4, lr}
 800892e:	460c      	mov	r4, r1
 8008930:	2101      	movs	r1, #1
 8008932:	f7ff febd 	bl	80086b0 <_Balloc>
 8008936:	4602      	mov	r2, r0
 8008938:	b928      	cbnz	r0, 8008946 <__i2b+0x1a>
 800893a:	4b05      	ldr	r3, [pc, #20]	@ (8008950 <__i2b+0x24>)
 800893c:	4805      	ldr	r0, [pc, #20]	@ (8008954 <__i2b+0x28>)
 800893e:	f240 1145 	movw	r1, #325	@ 0x145
 8008942:	f001 fe19 	bl	800a578 <__assert_func>
 8008946:	2301      	movs	r3, #1
 8008948:	6144      	str	r4, [r0, #20]
 800894a:	6103      	str	r3, [r0, #16]
 800894c:	bd10      	pop	{r4, pc}
 800894e:	bf00      	nop
 8008950:	0800b6cd 	.word	0x0800b6cd
 8008954:	0800b6de 	.word	0x0800b6de

08008958 <__multiply>:
 8008958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895c:	4614      	mov	r4, r2
 800895e:	690a      	ldr	r2, [r1, #16]
 8008960:	6923      	ldr	r3, [r4, #16]
 8008962:	429a      	cmp	r2, r3
 8008964:	bfa8      	it	ge
 8008966:	4623      	movge	r3, r4
 8008968:	460f      	mov	r7, r1
 800896a:	bfa4      	itt	ge
 800896c:	460c      	movge	r4, r1
 800896e:	461f      	movge	r7, r3
 8008970:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008974:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008978:	68a3      	ldr	r3, [r4, #8]
 800897a:	6861      	ldr	r1, [r4, #4]
 800897c:	eb0a 0609 	add.w	r6, sl, r9
 8008980:	42b3      	cmp	r3, r6
 8008982:	b085      	sub	sp, #20
 8008984:	bfb8      	it	lt
 8008986:	3101      	addlt	r1, #1
 8008988:	f7ff fe92 	bl	80086b0 <_Balloc>
 800898c:	b930      	cbnz	r0, 800899c <__multiply+0x44>
 800898e:	4602      	mov	r2, r0
 8008990:	4b44      	ldr	r3, [pc, #272]	@ (8008aa4 <__multiply+0x14c>)
 8008992:	4845      	ldr	r0, [pc, #276]	@ (8008aa8 <__multiply+0x150>)
 8008994:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008998:	f001 fdee 	bl	800a578 <__assert_func>
 800899c:	f100 0514 	add.w	r5, r0, #20
 80089a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80089a4:	462b      	mov	r3, r5
 80089a6:	2200      	movs	r2, #0
 80089a8:	4543      	cmp	r3, r8
 80089aa:	d321      	bcc.n	80089f0 <__multiply+0x98>
 80089ac:	f107 0114 	add.w	r1, r7, #20
 80089b0:	f104 0214 	add.w	r2, r4, #20
 80089b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80089b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80089bc:	9302      	str	r3, [sp, #8]
 80089be:	1b13      	subs	r3, r2, r4
 80089c0:	3b15      	subs	r3, #21
 80089c2:	f023 0303 	bic.w	r3, r3, #3
 80089c6:	3304      	adds	r3, #4
 80089c8:	f104 0715 	add.w	r7, r4, #21
 80089cc:	42ba      	cmp	r2, r7
 80089ce:	bf38      	it	cc
 80089d0:	2304      	movcc	r3, #4
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	9b02      	ldr	r3, [sp, #8]
 80089d6:	9103      	str	r1, [sp, #12]
 80089d8:	428b      	cmp	r3, r1
 80089da:	d80c      	bhi.n	80089f6 <__multiply+0x9e>
 80089dc:	2e00      	cmp	r6, #0
 80089de:	dd03      	ble.n	80089e8 <__multiply+0x90>
 80089e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d05b      	beq.n	8008aa0 <__multiply+0x148>
 80089e8:	6106      	str	r6, [r0, #16]
 80089ea:	b005      	add	sp, #20
 80089ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f0:	f843 2b04 	str.w	r2, [r3], #4
 80089f4:	e7d8      	b.n	80089a8 <__multiply+0x50>
 80089f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80089fa:	f1ba 0f00 	cmp.w	sl, #0
 80089fe:	d024      	beq.n	8008a4a <__multiply+0xf2>
 8008a00:	f104 0e14 	add.w	lr, r4, #20
 8008a04:	46a9      	mov	r9, r5
 8008a06:	f04f 0c00 	mov.w	ip, #0
 8008a0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a0e:	f8d9 3000 	ldr.w	r3, [r9]
 8008a12:	fa1f fb87 	uxth.w	fp, r7
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	fb0a 330b 	mla	r3, sl, fp, r3
 8008a1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008a20:	f8d9 7000 	ldr.w	r7, [r9]
 8008a24:	4463      	add	r3, ip
 8008a26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008a2a:	fb0a c70b 	mla	r7, sl, fp, ip
 8008a2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008a38:	4572      	cmp	r2, lr
 8008a3a:	f849 3b04 	str.w	r3, [r9], #4
 8008a3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008a42:	d8e2      	bhi.n	8008a0a <__multiply+0xb2>
 8008a44:	9b01      	ldr	r3, [sp, #4]
 8008a46:	f845 c003 	str.w	ip, [r5, r3]
 8008a4a:	9b03      	ldr	r3, [sp, #12]
 8008a4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008a50:	3104      	adds	r1, #4
 8008a52:	f1b9 0f00 	cmp.w	r9, #0
 8008a56:	d021      	beq.n	8008a9c <__multiply+0x144>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	f104 0c14 	add.w	ip, r4, #20
 8008a5e:	46ae      	mov	lr, r5
 8008a60:	f04f 0a00 	mov.w	sl, #0
 8008a64:	f8bc b000 	ldrh.w	fp, [ip]
 8008a68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008a6c:	fb09 770b 	mla	r7, r9, fp, r7
 8008a70:	4457      	add	r7, sl
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008a78:	f84e 3b04 	str.w	r3, [lr], #4
 8008a7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a84:	f8be 3000 	ldrh.w	r3, [lr]
 8008a88:	fb09 330a 	mla	r3, r9, sl, r3
 8008a8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008a90:	4562      	cmp	r2, ip
 8008a92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a96:	d8e5      	bhi.n	8008a64 <__multiply+0x10c>
 8008a98:	9f01      	ldr	r7, [sp, #4]
 8008a9a:	51eb      	str	r3, [r5, r7]
 8008a9c:	3504      	adds	r5, #4
 8008a9e:	e799      	b.n	80089d4 <__multiply+0x7c>
 8008aa0:	3e01      	subs	r6, #1
 8008aa2:	e79b      	b.n	80089dc <__multiply+0x84>
 8008aa4:	0800b6cd 	.word	0x0800b6cd
 8008aa8:	0800b6de 	.word	0x0800b6de

08008aac <__pow5mult>:
 8008aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ab0:	4615      	mov	r5, r2
 8008ab2:	f012 0203 	ands.w	r2, r2, #3
 8008ab6:	4607      	mov	r7, r0
 8008ab8:	460e      	mov	r6, r1
 8008aba:	d007      	beq.n	8008acc <__pow5mult+0x20>
 8008abc:	4c25      	ldr	r4, [pc, #148]	@ (8008b54 <__pow5mult+0xa8>)
 8008abe:	3a01      	subs	r2, #1
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ac6:	f7ff fe55 	bl	8008774 <__multadd>
 8008aca:	4606      	mov	r6, r0
 8008acc:	10ad      	asrs	r5, r5, #2
 8008ace:	d03d      	beq.n	8008b4c <__pow5mult+0xa0>
 8008ad0:	69fc      	ldr	r4, [r7, #28]
 8008ad2:	b97c      	cbnz	r4, 8008af4 <__pow5mult+0x48>
 8008ad4:	2010      	movs	r0, #16
 8008ad6:	f7ff fd35 	bl	8008544 <malloc>
 8008ada:	4602      	mov	r2, r0
 8008adc:	61f8      	str	r0, [r7, #28]
 8008ade:	b928      	cbnz	r0, 8008aec <__pow5mult+0x40>
 8008ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b58 <__pow5mult+0xac>)
 8008ae2:	481e      	ldr	r0, [pc, #120]	@ (8008b5c <__pow5mult+0xb0>)
 8008ae4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ae8:	f001 fd46 	bl	800a578 <__assert_func>
 8008aec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008af0:	6004      	str	r4, [r0, #0]
 8008af2:	60c4      	str	r4, [r0, #12]
 8008af4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008af8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008afc:	b94c      	cbnz	r4, 8008b12 <__pow5mult+0x66>
 8008afe:	f240 2171 	movw	r1, #625	@ 0x271
 8008b02:	4638      	mov	r0, r7
 8008b04:	f7ff ff12 	bl	800892c <__i2b>
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b0e:	4604      	mov	r4, r0
 8008b10:	6003      	str	r3, [r0, #0]
 8008b12:	f04f 0900 	mov.w	r9, #0
 8008b16:	07eb      	lsls	r3, r5, #31
 8008b18:	d50a      	bpl.n	8008b30 <__pow5mult+0x84>
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f7ff ff1a 	bl	8008958 <__multiply>
 8008b24:	4631      	mov	r1, r6
 8008b26:	4680      	mov	r8, r0
 8008b28:	4638      	mov	r0, r7
 8008b2a:	f7ff fe01 	bl	8008730 <_Bfree>
 8008b2e:	4646      	mov	r6, r8
 8008b30:	106d      	asrs	r5, r5, #1
 8008b32:	d00b      	beq.n	8008b4c <__pow5mult+0xa0>
 8008b34:	6820      	ldr	r0, [r4, #0]
 8008b36:	b938      	cbnz	r0, 8008b48 <__pow5mult+0x9c>
 8008b38:	4622      	mov	r2, r4
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	4638      	mov	r0, r7
 8008b3e:	f7ff ff0b 	bl	8008958 <__multiply>
 8008b42:	6020      	str	r0, [r4, #0]
 8008b44:	f8c0 9000 	str.w	r9, [r0]
 8008b48:	4604      	mov	r4, r0
 8008b4a:	e7e4      	b.n	8008b16 <__pow5mult+0x6a>
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b52:	bf00      	nop
 8008b54:	0800b738 	.word	0x0800b738
 8008b58:	0800b65e 	.word	0x0800b65e
 8008b5c:	0800b6de 	.word	0x0800b6de

08008b60 <__lshift>:
 8008b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b64:	460c      	mov	r4, r1
 8008b66:	6849      	ldr	r1, [r1, #4]
 8008b68:	6923      	ldr	r3, [r4, #16]
 8008b6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b6e:	68a3      	ldr	r3, [r4, #8]
 8008b70:	4607      	mov	r7, r0
 8008b72:	4691      	mov	r9, r2
 8008b74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b78:	f108 0601 	add.w	r6, r8, #1
 8008b7c:	42b3      	cmp	r3, r6
 8008b7e:	db0b      	blt.n	8008b98 <__lshift+0x38>
 8008b80:	4638      	mov	r0, r7
 8008b82:	f7ff fd95 	bl	80086b0 <_Balloc>
 8008b86:	4605      	mov	r5, r0
 8008b88:	b948      	cbnz	r0, 8008b9e <__lshift+0x3e>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	4b28      	ldr	r3, [pc, #160]	@ (8008c30 <__lshift+0xd0>)
 8008b8e:	4829      	ldr	r0, [pc, #164]	@ (8008c34 <__lshift+0xd4>)
 8008b90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008b94:	f001 fcf0 	bl	800a578 <__assert_func>
 8008b98:	3101      	adds	r1, #1
 8008b9a:	005b      	lsls	r3, r3, #1
 8008b9c:	e7ee      	b.n	8008b7c <__lshift+0x1c>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f100 0114 	add.w	r1, r0, #20
 8008ba4:	f100 0210 	add.w	r2, r0, #16
 8008ba8:	4618      	mov	r0, r3
 8008baa:	4553      	cmp	r3, sl
 8008bac:	db33      	blt.n	8008c16 <__lshift+0xb6>
 8008bae:	6920      	ldr	r0, [r4, #16]
 8008bb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bb4:	f104 0314 	add.w	r3, r4, #20
 8008bb8:	f019 091f 	ands.w	r9, r9, #31
 8008bbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008bc4:	d02b      	beq.n	8008c1e <__lshift+0xbe>
 8008bc6:	f1c9 0e20 	rsb	lr, r9, #32
 8008bca:	468a      	mov	sl, r1
 8008bcc:	2200      	movs	r2, #0
 8008bce:	6818      	ldr	r0, [r3, #0]
 8008bd0:	fa00 f009 	lsl.w	r0, r0, r9
 8008bd4:	4310      	orrs	r0, r2
 8008bd6:	f84a 0b04 	str.w	r0, [sl], #4
 8008bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bde:	459c      	cmp	ip, r3
 8008be0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008be4:	d8f3      	bhi.n	8008bce <__lshift+0x6e>
 8008be6:	ebac 0304 	sub.w	r3, ip, r4
 8008bea:	3b15      	subs	r3, #21
 8008bec:	f023 0303 	bic.w	r3, r3, #3
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	f104 0015 	add.w	r0, r4, #21
 8008bf6:	4584      	cmp	ip, r0
 8008bf8:	bf38      	it	cc
 8008bfa:	2304      	movcc	r3, #4
 8008bfc:	50ca      	str	r2, [r1, r3]
 8008bfe:	b10a      	cbz	r2, 8008c04 <__lshift+0xa4>
 8008c00:	f108 0602 	add.w	r6, r8, #2
 8008c04:	3e01      	subs	r6, #1
 8008c06:	4638      	mov	r0, r7
 8008c08:	612e      	str	r6, [r5, #16]
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	f7ff fd90 	bl	8008730 <_Bfree>
 8008c10:	4628      	mov	r0, r5
 8008c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c16:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	e7c5      	b.n	8008baa <__lshift+0x4a>
 8008c1e:	3904      	subs	r1, #4
 8008c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c24:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c28:	459c      	cmp	ip, r3
 8008c2a:	d8f9      	bhi.n	8008c20 <__lshift+0xc0>
 8008c2c:	e7ea      	b.n	8008c04 <__lshift+0xa4>
 8008c2e:	bf00      	nop
 8008c30:	0800b6cd 	.word	0x0800b6cd
 8008c34:	0800b6de 	.word	0x0800b6de

08008c38 <__mcmp>:
 8008c38:	690a      	ldr	r2, [r1, #16]
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	6900      	ldr	r0, [r0, #16]
 8008c3e:	1a80      	subs	r0, r0, r2
 8008c40:	b530      	push	{r4, r5, lr}
 8008c42:	d10e      	bne.n	8008c62 <__mcmp+0x2a>
 8008c44:	3314      	adds	r3, #20
 8008c46:	3114      	adds	r1, #20
 8008c48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c58:	4295      	cmp	r5, r2
 8008c5a:	d003      	beq.n	8008c64 <__mcmp+0x2c>
 8008c5c:	d205      	bcs.n	8008c6a <__mcmp+0x32>
 8008c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c62:	bd30      	pop	{r4, r5, pc}
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	d3f3      	bcc.n	8008c50 <__mcmp+0x18>
 8008c68:	e7fb      	b.n	8008c62 <__mcmp+0x2a>
 8008c6a:	2001      	movs	r0, #1
 8008c6c:	e7f9      	b.n	8008c62 <__mcmp+0x2a>
	...

08008c70 <__mdiff>:
 8008c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	4689      	mov	r9, r1
 8008c76:	4606      	mov	r6, r0
 8008c78:	4611      	mov	r1, r2
 8008c7a:	4648      	mov	r0, r9
 8008c7c:	4614      	mov	r4, r2
 8008c7e:	f7ff ffdb 	bl	8008c38 <__mcmp>
 8008c82:	1e05      	subs	r5, r0, #0
 8008c84:	d112      	bne.n	8008cac <__mdiff+0x3c>
 8008c86:	4629      	mov	r1, r5
 8008c88:	4630      	mov	r0, r6
 8008c8a:	f7ff fd11 	bl	80086b0 <_Balloc>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	b928      	cbnz	r0, 8008c9e <__mdiff+0x2e>
 8008c92:	4b3f      	ldr	r3, [pc, #252]	@ (8008d90 <__mdiff+0x120>)
 8008c94:	f240 2137 	movw	r1, #567	@ 0x237
 8008c98:	483e      	ldr	r0, [pc, #248]	@ (8008d94 <__mdiff+0x124>)
 8008c9a:	f001 fc6d 	bl	800a578 <__assert_func>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	b003      	add	sp, #12
 8008ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cac:	bfbc      	itt	lt
 8008cae:	464b      	movlt	r3, r9
 8008cb0:	46a1      	movlt	r9, r4
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008cb8:	bfba      	itte	lt
 8008cba:	461c      	movlt	r4, r3
 8008cbc:	2501      	movlt	r5, #1
 8008cbe:	2500      	movge	r5, #0
 8008cc0:	f7ff fcf6 	bl	80086b0 <_Balloc>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	b918      	cbnz	r0, 8008cd0 <__mdiff+0x60>
 8008cc8:	4b31      	ldr	r3, [pc, #196]	@ (8008d90 <__mdiff+0x120>)
 8008cca:	f240 2145 	movw	r1, #581	@ 0x245
 8008cce:	e7e3      	b.n	8008c98 <__mdiff+0x28>
 8008cd0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008cd4:	6926      	ldr	r6, [r4, #16]
 8008cd6:	60c5      	str	r5, [r0, #12]
 8008cd8:	f109 0310 	add.w	r3, r9, #16
 8008cdc:	f109 0514 	add.w	r5, r9, #20
 8008ce0:	f104 0e14 	add.w	lr, r4, #20
 8008ce4:	f100 0b14 	add.w	fp, r0, #20
 8008ce8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008cec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008cf0:	9301      	str	r3, [sp, #4]
 8008cf2:	46d9      	mov	r9, fp
 8008cf4:	f04f 0c00 	mov.w	ip, #0
 8008cf8:	9b01      	ldr	r3, [sp, #4]
 8008cfa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008cfe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008d02:	9301      	str	r3, [sp, #4]
 8008d04:	fa1f f38a 	uxth.w	r3, sl
 8008d08:	4619      	mov	r1, r3
 8008d0a:	b283      	uxth	r3, r0
 8008d0c:	1acb      	subs	r3, r1, r3
 8008d0e:	0c00      	lsrs	r0, r0, #16
 8008d10:	4463      	add	r3, ip
 8008d12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008d16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008d20:	4576      	cmp	r6, lr
 8008d22:	f849 3b04 	str.w	r3, [r9], #4
 8008d26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d2a:	d8e5      	bhi.n	8008cf8 <__mdiff+0x88>
 8008d2c:	1b33      	subs	r3, r6, r4
 8008d2e:	3b15      	subs	r3, #21
 8008d30:	f023 0303 	bic.w	r3, r3, #3
 8008d34:	3415      	adds	r4, #21
 8008d36:	3304      	adds	r3, #4
 8008d38:	42a6      	cmp	r6, r4
 8008d3a:	bf38      	it	cc
 8008d3c:	2304      	movcc	r3, #4
 8008d3e:	441d      	add	r5, r3
 8008d40:	445b      	add	r3, fp
 8008d42:	461e      	mov	r6, r3
 8008d44:	462c      	mov	r4, r5
 8008d46:	4544      	cmp	r4, r8
 8008d48:	d30e      	bcc.n	8008d68 <__mdiff+0xf8>
 8008d4a:	f108 0103 	add.w	r1, r8, #3
 8008d4e:	1b49      	subs	r1, r1, r5
 8008d50:	f021 0103 	bic.w	r1, r1, #3
 8008d54:	3d03      	subs	r5, #3
 8008d56:	45a8      	cmp	r8, r5
 8008d58:	bf38      	it	cc
 8008d5a:	2100      	movcc	r1, #0
 8008d5c:	440b      	add	r3, r1
 8008d5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d62:	b191      	cbz	r1, 8008d8a <__mdiff+0x11a>
 8008d64:	6117      	str	r7, [r2, #16]
 8008d66:	e79d      	b.n	8008ca4 <__mdiff+0x34>
 8008d68:	f854 1b04 	ldr.w	r1, [r4], #4
 8008d6c:	46e6      	mov	lr, ip
 8008d6e:	0c08      	lsrs	r0, r1, #16
 8008d70:	fa1c fc81 	uxtah	ip, ip, r1
 8008d74:	4471      	add	r1, lr
 8008d76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008d7a:	b289      	uxth	r1, r1
 8008d7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d80:	f846 1b04 	str.w	r1, [r6], #4
 8008d84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d88:	e7dd      	b.n	8008d46 <__mdiff+0xd6>
 8008d8a:	3f01      	subs	r7, #1
 8008d8c:	e7e7      	b.n	8008d5e <__mdiff+0xee>
 8008d8e:	bf00      	nop
 8008d90:	0800b6cd 	.word	0x0800b6cd
 8008d94:	0800b6de 	.word	0x0800b6de

08008d98 <__ulp>:
 8008d98:	b082      	sub	sp, #8
 8008d9a:	ed8d 0b00 	vstr	d0, [sp]
 8008d9e:	9a01      	ldr	r2, [sp, #4]
 8008da0:	4b0f      	ldr	r3, [pc, #60]	@ (8008de0 <__ulp+0x48>)
 8008da2:	4013      	ands	r3, r2
 8008da4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	dc08      	bgt.n	8008dbe <__ulp+0x26>
 8008dac:	425b      	negs	r3, r3
 8008dae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008db2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008db6:	da04      	bge.n	8008dc2 <__ulp+0x2a>
 8008db8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008dbc:	4113      	asrs	r3, r2
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	e008      	b.n	8008dd4 <__ulp+0x3c>
 8008dc2:	f1a2 0314 	sub.w	r3, r2, #20
 8008dc6:	2b1e      	cmp	r3, #30
 8008dc8:	bfda      	itte	le
 8008dca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008dce:	40da      	lsrle	r2, r3
 8008dd0:	2201      	movgt	r2, #1
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	4610      	mov	r0, r2
 8008dd8:	ec41 0b10 	vmov	d0, r0, r1
 8008ddc:	b002      	add	sp, #8
 8008dde:	4770      	bx	lr
 8008de0:	7ff00000 	.word	0x7ff00000

08008de4 <__b2d>:
 8008de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de8:	6906      	ldr	r6, [r0, #16]
 8008dea:	f100 0814 	add.w	r8, r0, #20
 8008dee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008df2:	1f37      	subs	r7, r6, #4
 8008df4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008df8:	4610      	mov	r0, r2
 8008dfa:	f7ff fd4b 	bl	8008894 <__hi0bits>
 8008dfe:	f1c0 0320 	rsb	r3, r0, #32
 8008e02:	280a      	cmp	r0, #10
 8008e04:	600b      	str	r3, [r1, #0]
 8008e06:	491b      	ldr	r1, [pc, #108]	@ (8008e74 <__b2d+0x90>)
 8008e08:	dc15      	bgt.n	8008e36 <__b2d+0x52>
 8008e0a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008e0e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008e12:	45b8      	cmp	r8, r7
 8008e14:	ea43 0501 	orr.w	r5, r3, r1
 8008e18:	bf34      	ite	cc
 8008e1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e1e:	2300      	movcs	r3, #0
 8008e20:	3015      	adds	r0, #21
 8008e22:	fa02 f000 	lsl.w	r0, r2, r0
 8008e26:	fa23 f30c 	lsr.w	r3, r3, ip
 8008e2a:	4303      	orrs	r3, r0
 8008e2c:	461c      	mov	r4, r3
 8008e2e:	ec45 4b10 	vmov	d0, r4, r5
 8008e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e36:	45b8      	cmp	r8, r7
 8008e38:	bf3a      	itte	cc
 8008e3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e3e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008e42:	2300      	movcs	r3, #0
 8008e44:	380b      	subs	r0, #11
 8008e46:	d012      	beq.n	8008e6e <__b2d+0x8a>
 8008e48:	f1c0 0120 	rsb	r1, r0, #32
 8008e4c:	fa23 f401 	lsr.w	r4, r3, r1
 8008e50:	4082      	lsls	r2, r0
 8008e52:	4322      	orrs	r2, r4
 8008e54:	4547      	cmp	r7, r8
 8008e56:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008e5a:	bf8c      	ite	hi
 8008e5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008e60:	2200      	movls	r2, #0
 8008e62:	4083      	lsls	r3, r0
 8008e64:	40ca      	lsrs	r2, r1
 8008e66:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	e7de      	b.n	8008e2c <__b2d+0x48>
 8008e6e:	ea42 0501 	orr.w	r5, r2, r1
 8008e72:	e7db      	b.n	8008e2c <__b2d+0x48>
 8008e74:	3ff00000 	.word	0x3ff00000

08008e78 <__d2b>:
 8008e78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e7c:	460f      	mov	r7, r1
 8008e7e:	2101      	movs	r1, #1
 8008e80:	ec59 8b10 	vmov	r8, r9, d0
 8008e84:	4616      	mov	r6, r2
 8008e86:	f7ff fc13 	bl	80086b0 <_Balloc>
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	b930      	cbnz	r0, 8008e9c <__d2b+0x24>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	4b23      	ldr	r3, [pc, #140]	@ (8008f20 <__d2b+0xa8>)
 8008e92:	4824      	ldr	r0, [pc, #144]	@ (8008f24 <__d2b+0xac>)
 8008e94:	f240 310f 	movw	r1, #783	@ 0x30f
 8008e98:	f001 fb6e 	bl	800a578 <__assert_func>
 8008e9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ea0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ea4:	b10d      	cbz	r5, 8008eaa <__d2b+0x32>
 8008ea6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008eaa:	9301      	str	r3, [sp, #4]
 8008eac:	f1b8 0300 	subs.w	r3, r8, #0
 8008eb0:	d023      	beq.n	8008efa <__d2b+0x82>
 8008eb2:	4668      	mov	r0, sp
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	f7ff fd0c 	bl	80088d2 <__lo0bits>
 8008eba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ebe:	b1d0      	cbz	r0, 8008ef6 <__d2b+0x7e>
 8008ec0:	f1c0 0320 	rsb	r3, r0, #32
 8008ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec8:	430b      	orrs	r3, r1
 8008eca:	40c2      	lsrs	r2, r0
 8008ecc:	6163      	str	r3, [r4, #20]
 8008ece:	9201      	str	r2, [sp, #4]
 8008ed0:	9b01      	ldr	r3, [sp, #4]
 8008ed2:	61a3      	str	r3, [r4, #24]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bf0c      	ite	eq
 8008ed8:	2201      	moveq	r2, #1
 8008eda:	2202      	movne	r2, #2
 8008edc:	6122      	str	r2, [r4, #16]
 8008ede:	b1a5      	cbz	r5, 8008f0a <__d2b+0x92>
 8008ee0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ee4:	4405      	add	r5, r0
 8008ee6:	603d      	str	r5, [r7, #0]
 8008ee8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008eec:	6030      	str	r0, [r6, #0]
 8008eee:	4620      	mov	r0, r4
 8008ef0:	b003      	add	sp, #12
 8008ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ef6:	6161      	str	r1, [r4, #20]
 8008ef8:	e7ea      	b.n	8008ed0 <__d2b+0x58>
 8008efa:	a801      	add	r0, sp, #4
 8008efc:	f7ff fce9 	bl	80088d2 <__lo0bits>
 8008f00:	9b01      	ldr	r3, [sp, #4]
 8008f02:	6163      	str	r3, [r4, #20]
 8008f04:	3020      	adds	r0, #32
 8008f06:	2201      	movs	r2, #1
 8008f08:	e7e8      	b.n	8008edc <__d2b+0x64>
 8008f0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f12:	6038      	str	r0, [r7, #0]
 8008f14:	6918      	ldr	r0, [r3, #16]
 8008f16:	f7ff fcbd 	bl	8008894 <__hi0bits>
 8008f1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f1e:	e7e5      	b.n	8008eec <__d2b+0x74>
 8008f20:	0800b6cd 	.word	0x0800b6cd
 8008f24:	0800b6de 	.word	0x0800b6de

08008f28 <__ratio>:
 8008f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2c:	b085      	sub	sp, #20
 8008f2e:	e9cd 1000 	strd	r1, r0, [sp]
 8008f32:	a902      	add	r1, sp, #8
 8008f34:	f7ff ff56 	bl	8008de4 <__b2d>
 8008f38:	9800      	ldr	r0, [sp, #0]
 8008f3a:	a903      	add	r1, sp, #12
 8008f3c:	ec55 4b10 	vmov	r4, r5, d0
 8008f40:	f7ff ff50 	bl	8008de4 <__b2d>
 8008f44:	9b01      	ldr	r3, [sp, #4]
 8008f46:	6919      	ldr	r1, [r3, #16]
 8008f48:	9b00      	ldr	r3, [sp, #0]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	1ac9      	subs	r1, r1, r3
 8008f4e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008f52:	1a9b      	subs	r3, r3, r2
 8008f54:	ec5b ab10 	vmov	sl, fp, d0
 8008f58:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	bfce      	itee	gt
 8008f60:	462a      	movgt	r2, r5
 8008f62:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f66:	465a      	movle	r2, fp
 8008f68:	462f      	mov	r7, r5
 8008f6a:	46d9      	mov	r9, fp
 8008f6c:	bfcc      	ite	gt
 8008f6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008f72:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008f76:	464b      	mov	r3, r9
 8008f78:	4652      	mov	r2, sl
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	4639      	mov	r1, r7
 8008f7e:	f7f7 fc65 	bl	800084c <__aeabi_ddiv>
 8008f82:	ec41 0b10 	vmov	d0, r0, r1
 8008f86:	b005      	add	sp, #20
 8008f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f8c <__copybits>:
 8008f8c:	3901      	subs	r1, #1
 8008f8e:	b570      	push	{r4, r5, r6, lr}
 8008f90:	1149      	asrs	r1, r1, #5
 8008f92:	6914      	ldr	r4, [r2, #16]
 8008f94:	3101      	adds	r1, #1
 8008f96:	f102 0314 	add.w	r3, r2, #20
 8008f9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008fa2:	1f05      	subs	r5, r0, #4
 8008fa4:	42a3      	cmp	r3, r4
 8008fa6:	d30c      	bcc.n	8008fc2 <__copybits+0x36>
 8008fa8:	1aa3      	subs	r3, r4, r2
 8008faa:	3b11      	subs	r3, #17
 8008fac:	f023 0303 	bic.w	r3, r3, #3
 8008fb0:	3211      	adds	r2, #17
 8008fb2:	42a2      	cmp	r2, r4
 8008fb4:	bf88      	it	hi
 8008fb6:	2300      	movhi	r3, #0
 8008fb8:	4418      	add	r0, r3
 8008fba:	2300      	movs	r3, #0
 8008fbc:	4288      	cmp	r0, r1
 8008fbe:	d305      	bcc.n	8008fcc <__copybits+0x40>
 8008fc0:	bd70      	pop	{r4, r5, r6, pc}
 8008fc2:	f853 6b04 	ldr.w	r6, [r3], #4
 8008fc6:	f845 6f04 	str.w	r6, [r5, #4]!
 8008fca:	e7eb      	b.n	8008fa4 <__copybits+0x18>
 8008fcc:	f840 3b04 	str.w	r3, [r0], #4
 8008fd0:	e7f4      	b.n	8008fbc <__copybits+0x30>

08008fd2 <__any_on>:
 8008fd2:	f100 0214 	add.w	r2, r0, #20
 8008fd6:	6900      	ldr	r0, [r0, #16]
 8008fd8:	114b      	asrs	r3, r1, #5
 8008fda:	4298      	cmp	r0, r3
 8008fdc:	b510      	push	{r4, lr}
 8008fde:	db11      	blt.n	8009004 <__any_on+0x32>
 8008fe0:	dd0a      	ble.n	8008ff8 <__any_on+0x26>
 8008fe2:	f011 011f 	ands.w	r1, r1, #31
 8008fe6:	d007      	beq.n	8008ff8 <__any_on+0x26>
 8008fe8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008fec:	fa24 f001 	lsr.w	r0, r4, r1
 8008ff0:	fa00 f101 	lsl.w	r1, r0, r1
 8008ff4:	428c      	cmp	r4, r1
 8008ff6:	d10b      	bne.n	8009010 <__any_on+0x3e>
 8008ff8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d803      	bhi.n	8009008 <__any_on+0x36>
 8009000:	2000      	movs	r0, #0
 8009002:	bd10      	pop	{r4, pc}
 8009004:	4603      	mov	r3, r0
 8009006:	e7f7      	b.n	8008ff8 <__any_on+0x26>
 8009008:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800900c:	2900      	cmp	r1, #0
 800900e:	d0f5      	beq.n	8008ffc <__any_on+0x2a>
 8009010:	2001      	movs	r0, #1
 8009012:	e7f6      	b.n	8009002 <__any_on+0x30>

08009014 <sulp>:
 8009014:	b570      	push	{r4, r5, r6, lr}
 8009016:	4604      	mov	r4, r0
 8009018:	460d      	mov	r5, r1
 800901a:	ec45 4b10 	vmov	d0, r4, r5
 800901e:	4616      	mov	r6, r2
 8009020:	f7ff feba 	bl	8008d98 <__ulp>
 8009024:	ec51 0b10 	vmov	r0, r1, d0
 8009028:	b17e      	cbz	r6, 800904a <sulp+0x36>
 800902a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800902e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009032:	2b00      	cmp	r3, #0
 8009034:	dd09      	ble.n	800904a <sulp+0x36>
 8009036:	051b      	lsls	r3, r3, #20
 8009038:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800903c:	2400      	movs	r4, #0
 800903e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009042:	4622      	mov	r2, r4
 8009044:	462b      	mov	r3, r5
 8009046:	f7f7 fad7 	bl	80005f8 <__aeabi_dmul>
 800904a:	ec41 0b10 	vmov	d0, r0, r1
 800904e:	bd70      	pop	{r4, r5, r6, pc}

08009050 <_strtod_l>:
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	b09f      	sub	sp, #124	@ 0x7c
 8009056:	460c      	mov	r4, r1
 8009058:	9217      	str	r2, [sp, #92]	@ 0x5c
 800905a:	2200      	movs	r2, #0
 800905c:	921a      	str	r2, [sp, #104]	@ 0x68
 800905e:	9005      	str	r0, [sp, #20]
 8009060:	f04f 0a00 	mov.w	sl, #0
 8009064:	f04f 0b00 	mov.w	fp, #0
 8009068:	460a      	mov	r2, r1
 800906a:	9219      	str	r2, [sp, #100]	@ 0x64
 800906c:	7811      	ldrb	r1, [r2, #0]
 800906e:	292b      	cmp	r1, #43	@ 0x2b
 8009070:	d04a      	beq.n	8009108 <_strtod_l+0xb8>
 8009072:	d838      	bhi.n	80090e6 <_strtod_l+0x96>
 8009074:	290d      	cmp	r1, #13
 8009076:	d832      	bhi.n	80090de <_strtod_l+0x8e>
 8009078:	2908      	cmp	r1, #8
 800907a:	d832      	bhi.n	80090e2 <_strtod_l+0x92>
 800907c:	2900      	cmp	r1, #0
 800907e:	d03b      	beq.n	80090f8 <_strtod_l+0xa8>
 8009080:	2200      	movs	r2, #0
 8009082:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009084:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009086:	782a      	ldrb	r2, [r5, #0]
 8009088:	2a30      	cmp	r2, #48	@ 0x30
 800908a:	f040 80b3 	bne.w	80091f4 <_strtod_l+0x1a4>
 800908e:	786a      	ldrb	r2, [r5, #1]
 8009090:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009094:	2a58      	cmp	r2, #88	@ 0x58
 8009096:	d16e      	bne.n	8009176 <_strtod_l+0x126>
 8009098:	9302      	str	r3, [sp, #8]
 800909a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800909c:	9301      	str	r3, [sp, #4]
 800909e:	ab1a      	add	r3, sp, #104	@ 0x68
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	4a8e      	ldr	r2, [pc, #568]	@ (80092dc <_strtod_l+0x28c>)
 80090a4:	9805      	ldr	r0, [sp, #20]
 80090a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80090a8:	a919      	add	r1, sp, #100	@ 0x64
 80090aa:	f001 faff 	bl	800a6ac <__gethex>
 80090ae:	f010 060f 	ands.w	r6, r0, #15
 80090b2:	4604      	mov	r4, r0
 80090b4:	d005      	beq.n	80090c2 <_strtod_l+0x72>
 80090b6:	2e06      	cmp	r6, #6
 80090b8:	d128      	bne.n	800910c <_strtod_l+0xbc>
 80090ba:	3501      	adds	r5, #1
 80090bc:	2300      	movs	r3, #0
 80090be:	9519      	str	r5, [sp, #100]	@ 0x64
 80090c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f040 858e 	bne.w	8009be6 <_strtod_l+0xb96>
 80090ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090cc:	b1cb      	cbz	r3, 8009102 <_strtod_l+0xb2>
 80090ce:	4652      	mov	r2, sl
 80090d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80090d4:	ec43 2b10 	vmov	d0, r2, r3
 80090d8:	b01f      	add	sp, #124	@ 0x7c
 80090da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090de:	2920      	cmp	r1, #32
 80090e0:	d1ce      	bne.n	8009080 <_strtod_l+0x30>
 80090e2:	3201      	adds	r2, #1
 80090e4:	e7c1      	b.n	800906a <_strtod_l+0x1a>
 80090e6:	292d      	cmp	r1, #45	@ 0x2d
 80090e8:	d1ca      	bne.n	8009080 <_strtod_l+0x30>
 80090ea:	2101      	movs	r1, #1
 80090ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80090ee:	1c51      	adds	r1, r2, #1
 80090f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80090f2:	7852      	ldrb	r2, [r2, #1]
 80090f4:	2a00      	cmp	r2, #0
 80090f6:	d1c5      	bne.n	8009084 <_strtod_l+0x34>
 80090f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80090fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f040 8570 	bne.w	8009be2 <_strtod_l+0xb92>
 8009102:	4652      	mov	r2, sl
 8009104:	465b      	mov	r3, fp
 8009106:	e7e5      	b.n	80090d4 <_strtod_l+0x84>
 8009108:	2100      	movs	r1, #0
 800910a:	e7ef      	b.n	80090ec <_strtod_l+0x9c>
 800910c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800910e:	b13a      	cbz	r2, 8009120 <_strtod_l+0xd0>
 8009110:	2135      	movs	r1, #53	@ 0x35
 8009112:	a81c      	add	r0, sp, #112	@ 0x70
 8009114:	f7ff ff3a 	bl	8008f8c <__copybits>
 8009118:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800911a:	9805      	ldr	r0, [sp, #20]
 800911c:	f7ff fb08 	bl	8008730 <_Bfree>
 8009120:	3e01      	subs	r6, #1
 8009122:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009124:	2e04      	cmp	r6, #4
 8009126:	d806      	bhi.n	8009136 <_strtod_l+0xe6>
 8009128:	e8df f006 	tbb	[pc, r6]
 800912c:	201d0314 	.word	0x201d0314
 8009130:	14          	.byte	0x14
 8009131:	00          	.byte	0x00
 8009132:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009136:	05e1      	lsls	r1, r4, #23
 8009138:	bf48      	it	mi
 800913a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800913e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009142:	0d1b      	lsrs	r3, r3, #20
 8009144:	051b      	lsls	r3, r3, #20
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1bb      	bne.n	80090c2 <_strtod_l+0x72>
 800914a:	f7fe fb31 	bl	80077b0 <__errno>
 800914e:	2322      	movs	r3, #34	@ 0x22
 8009150:	6003      	str	r3, [r0, #0]
 8009152:	e7b6      	b.n	80090c2 <_strtod_l+0x72>
 8009154:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009158:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800915c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009160:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009164:	e7e7      	b.n	8009136 <_strtod_l+0xe6>
 8009166:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80092e4 <_strtod_l+0x294>
 800916a:	e7e4      	b.n	8009136 <_strtod_l+0xe6>
 800916c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009170:	f04f 3aff 	mov.w	sl, #4294967295
 8009174:	e7df      	b.n	8009136 <_strtod_l+0xe6>
 8009176:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	9219      	str	r2, [sp, #100]	@ 0x64
 800917c:	785b      	ldrb	r3, [r3, #1]
 800917e:	2b30      	cmp	r3, #48	@ 0x30
 8009180:	d0f9      	beq.n	8009176 <_strtod_l+0x126>
 8009182:	2b00      	cmp	r3, #0
 8009184:	d09d      	beq.n	80090c2 <_strtod_l+0x72>
 8009186:	2301      	movs	r3, #1
 8009188:	9309      	str	r3, [sp, #36]	@ 0x24
 800918a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800918c:	930c      	str	r3, [sp, #48]	@ 0x30
 800918e:	2300      	movs	r3, #0
 8009190:	9308      	str	r3, [sp, #32]
 8009192:	930a      	str	r3, [sp, #40]	@ 0x28
 8009194:	461f      	mov	r7, r3
 8009196:	220a      	movs	r2, #10
 8009198:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800919a:	7805      	ldrb	r5, [r0, #0]
 800919c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80091a0:	b2d9      	uxtb	r1, r3
 80091a2:	2909      	cmp	r1, #9
 80091a4:	d928      	bls.n	80091f8 <_strtod_l+0x1a8>
 80091a6:	494e      	ldr	r1, [pc, #312]	@ (80092e0 <_strtod_l+0x290>)
 80091a8:	2201      	movs	r2, #1
 80091aa:	f001 f9ab 	bl	800a504 <strncmp>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d032      	beq.n	8009218 <_strtod_l+0x1c8>
 80091b2:	2000      	movs	r0, #0
 80091b4:	462a      	mov	r2, r5
 80091b6:	4681      	mov	r9, r0
 80091b8:	463d      	mov	r5, r7
 80091ba:	4603      	mov	r3, r0
 80091bc:	2a65      	cmp	r2, #101	@ 0x65
 80091be:	d001      	beq.n	80091c4 <_strtod_l+0x174>
 80091c0:	2a45      	cmp	r2, #69	@ 0x45
 80091c2:	d114      	bne.n	80091ee <_strtod_l+0x19e>
 80091c4:	b91d      	cbnz	r5, 80091ce <_strtod_l+0x17e>
 80091c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091c8:	4302      	orrs	r2, r0
 80091ca:	d095      	beq.n	80090f8 <_strtod_l+0xa8>
 80091cc:	2500      	movs	r5, #0
 80091ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80091d0:	1c62      	adds	r2, r4, #1
 80091d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80091d4:	7862      	ldrb	r2, [r4, #1]
 80091d6:	2a2b      	cmp	r2, #43	@ 0x2b
 80091d8:	d077      	beq.n	80092ca <_strtod_l+0x27a>
 80091da:	2a2d      	cmp	r2, #45	@ 0x2d
 80091dc:	d07b      	beq.n	80092d6 <_strtod_l+0x286>
 80091de:	f04f 0c00 	mov.w	ip, #0
 80091e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80091e6:	2909      	cmp	r1, #9
 80091e8:	f240 8082 	bls.w	80092f0 <_strtod_l+0x2a0>
 80091ec:	9419      	str	r4, [sp, #100]	@ 0x64
 80091ee:	f04f 0800 	mov.w	r8, #0
 80091f2:	e0a2      	b.n	800933a <_strtod_l+0x2ea>
 80091f4:	2300      	movs	r3, #0
 80091f6:	e7c7      	b.n	8009188 <_strtod_l+0x138>
 80091f8:	2f08      	cmp	r7, #8
 80091fa:	bfd5      	itete	le
 80091fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80091fe:	9908      	ldrgt	r1, [sp, #32]
 8009200:	fb02 3301 	mlale	r3, r2, r1, r3
 8009204:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009208:	f100 0001 	add.w	r0, r0, #1
 800920c:	bfd4      	ite	le
 800920e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009210:	9308      	strgt	r3, [sp, #32]
 8009212:	3701      	adds	r7, #1
 8009214:	9019      	str	r0, [sp, #100]	@ 0x64
 8009216:	e7bf      	b.n	8009198 <_strtod_l+0x148>
 8009218:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	9219      	str	r2, [sp, #100]	@ 0x64
 800921e:	785a      	ldrb	r2, [r3, #1]
 8009220:	b37f      	cbz	r7, 8009282 <_strtod_l+0x232>
 8009222:	4681      	mov	r9, r0
 8009224:	463d      	mov	r5, r7
 8009226:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800922a:	2b09      	cmp	r3, #9
 800922c:	d912      	bls.n	8009254 <_strtod_l+0x204>
 800922e:	2301      	movs	r3, #1
 8009230:	e7c4      	b.n	80091bc <_strtod_l+0x16c>
 8009232:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009234:	1c5a      	adds	r2, r3, #1
 8009236:	9219      	str	r2, [sp, #100]	@ 0x64
 8009238:	785a      	ldrb	r2, [r3, #1]
 800923a:	3001      	adds	r0, #1
 800923c:	2a30      	cmp	r2, #48	@ 0x30
 800923e:	d0f8      	beq.n	8009232 <_strtod_l+0x1e2>
 8009240:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009244:	2b08      	cmp	r3, #8
 8009246:	f200 84d3 	bhi.w	8009bf0 <_strtod_l+0xba0>
 800924a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800924c:	930c      	str	r3, [sp, #48]	@ 0x30
 800924e:	4681      	mov	r9, r0
 8009250:	2000      	movs	r0, #0
 8009252:	4605      	mov	r5, r0
 8009254:	3a30      	subs	r2, #48	@ 0x30
 8009256:	f100 0301 	add.w	r3, r0, #1
 800925a:	d02a      	beq.n	80092b2 <_strtod_l+0x262>
 800925c:	4499      	add	r9, r3
 800925e:	eb00 0c05 	add.w	ip, r0, r5
 8009262:	462b      	mov	r3, r5
 8009264:	210a      	movs	r1, #10
 8009266:	4563      	cmp	r3, ip
 8009268:	d10d      	bne.n	8009286 <_strtod_l+0x236>
 800926a:	1c69      	adds	r1, r5, #1
 800926c:	4401      	add	r1, r0
 800926e:	4428      	add	r0, r5
 8009270:	2808      	cmp	r0, #8
 8009272:	dc16      	bgt.n	80092a2 <_strtod_l+0x252>
 8009274:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009276:	230a      	movs	r3, #10
 8009278:	fb03 2300 	mla	r3, r3, r0, r2
 800927c:	930a      	str	r3, [sp, #40]	@ 0x28
 800927e:	2300      	movs	r3, #0
 8009280:	e018      	b.n	80092b4 <_strtod_l+0x264>
 8009282:	4638      	mov	r0, r7
 8009284:	e7da      	b.n	800923c <_strtod_l+0x1ec>
 8009286:	2b08      	cmp	r3, #8
 8009288:	f103 0301 	add.w	r3, r3, #1
 800928c:	dc03      	bgt.n	8009296 <_strtod_l+0x246>
 800928e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009290:	434e      	muls	r6, r1
 8009292:	960a      	str	r6, [sp, #40]	@ 0x28
 8009294:	e7e7      	b.n	8009266 <_strtod_l+0x216>
 8009296:	2b10      	cmp	r3, #16
 8009298:	bfde      	ittt	le
 800929a:	9e08      	ldrle	r6, [sp, #32]
 800929c:	434e      	mulle	r6, r1
 800929e:	9608      	strle	r6, [sp, #32]
 80092a0:	e7e1      	b.n	8009266 <_strtod_l+0x216>
 80092a2:	280f      	cmp	r0, #15
 80092a4:	dceb      	bgt.n	800927e <_strtod_l+0x22e>
 80092a6:	9808      	ldr	r0, [sp, #32]
 80092a8:	230a      	movs	r3, #10
 80092aa:	fb03 2300 	mla	r3, r3, r0, r2
 80092ae:	9308      	str	r3, [sp, #32]
 80092b0:	e7e5      	b.n	800927e <_strtod_l+0x22e>
 80092b2:	4629      	mov	r1, r5
 80092b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092b6:	1c50      	adds	r0, r2, #1
 80092b8:	9019      	str	r0, [sp, #100]	@ 0x64
 80092ba:	7852      	ldrb	r2, [r2, #1]
 80092bc:	4618      	mov	r0, r3
 80092be:	460d      	mov	r5, r1
 80092c0:	e7b1      	b.n	8009226 <_strtod_l+0x1d6>
 80092c2:	f04f 0900 	mov.w	r9, #0
 80092c6:	2301      	movs	r3, #1
 80092c8:	e77d      	b.n	80091c6 <_strtod_l+0x176>
 80092ca:	f04f 0c00 	mov.w	ip, #0
 80092ce:	1ca2      	adds	r2, r4, #2
 80092d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80092d2:	78a2      	ldrb	r2, [r4, #2]
 80092d4:	e785      	b.n	80091e2 <_strtod_l+0x192>
 80092d6:	f04f 0c01 	mov.w	ip, #1
 80092da:	e7f8      	b.n	80092ce <_strtod_l+0x27e>
 80092dc:	0800b850 	.word	0x0800b850
 80092e0:	0800b838 	.word	0x0800b838
 80092e4:	7ff00000 	.word	0x7ff00000
 80092e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80092ea:	1c51      	adds	r1, r2, #1
 80092ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80092ee:	7852      	ldrb	r2, [r2, #1]
 80092f0:	2a30      	cmp	r2, #48	@ 0x30
 80092f2:	d0f9      	beq.n	80092e8 <_strtod_l+0x298>
 80092f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80092f8:	2908      	cmp	r1, #8
 80092fa:	f63f af78 	bhi.w	80091ee <_strtod_l+0x19e>
 80092fe:	3a30      	subs	r2, #48	@ 0x30
 8009300:	920e      	str	r2, [sp, #56]	@ 0x38
 8009302:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009304:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009306:	f04f 080a 	mov.w	r8, #10
 800930a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800930c:	1c56      	adds	r6, r2, #1
 800930e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009310:	7852      	ldrb	r2, [r2, #1]
 8009312:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009316:	f1be 0f09 	cmp.w	lr, #9
 800931a:	d939      	bls.n	8009390 <_strtod_l+0x340>
 800931c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800931e:	1a76      	subs	r6, r6, r1
 8009320:	2e08      	cmp	r6, #8
 8009322:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009326:	dc03      	bgt.n	8009330 <_strtod_l+0x2e0>
 8009328:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800932a:	4588      	cmp	r8, r1
 800932c:	bfa8      	it	ge
 800932e:	4688      	movge	r8, r1
 8009330:	f1bc 0f00 	cmp.w	ip, #0
 8009334:	d001      	beq.n	800933a <_strtod_l+0x2ea>
 8009336:	f1c8 0800 	rsb	r8, r8, #0
 800933a:	2d00      	cmp	r5, #0
 800933c:	d14e      	bne.n	80093dc <_strtod_l+0x38c>
 800933e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009340:	4308      	orrs	r0, r1
 8009342:	f47f aebe 	bne.w	80090c2 <_strtod_l+0x72>
 8009346:	2b00      	cmp	r3, #0
 8009348:	f47f aed6 	bne.w	80090f8 <_strtod_l+0xa8>
 800934c:	2a69      	cmp	r2, #105	@ 0x69
 800934e:	d028      	beq.n	80093a2 <_strtod_l+0x352>
 8009350:	dc25      	bgt.n	800939e <_strtod_l+0x34e>
 8009352:	2a49      	cmp	r2, #73	@ 0x49
 8009354:	d025      	beq.n	80093a2 <_strtod_l+0x352>
 8009356:	2a4e      	cmp	r2, #78	@ 0x4e
 8009358:	f47f aece 	bne.w	80090f8 <_strtod_l+0xa8>
 800935c:	499b      	ldr	r1, [pc, #620]	@ (80095cc <_strtod_l+0x57c>)
 800935e:	a819      	add	r0, sp, #100	@ 0x64
 8009360:	f001 fbc6 	bl	800aaf0 <__match>
 8009364:	2800      	cmp	r0, #0
 8009366:	f43f aec7 	beq.w	80090f8 <_strtod_l+0xa8>
 800936a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b28      	cmp	r3, #40	@ 0x28
 8009370:	d12e      	bne.n	80093d0 <_strtod_l+0x380>
 8009372:	4997      	ldr	r1, [pc, #604]	@ (80095d0 <_strtod_l+0x580>)
 8009374:	aa1c      	add	r2, sp, #112	@ 0x70
 8009376:	a819      	add	r0, sp, #100	@ 0x64
 8009378:	f001 fbce 	bl	800ab18 <__hexnan>
 800937c:	2805      	cmp	r0, #5
 800937e:	d127      	bne.n	80093d0 <_strtod_l+0x380>
 8009380:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009382:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009386:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800938a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800938e:	e698      	b.n	80090c2 <_strtod_l+0x72>
 8009390:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009392:	fb08 2101 	mla	r1, r8, r1, r2
 8009396:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800939a:	920e      	str	r2, [sp, #56]	@ 0x38
 800939c:	e7b5      	b.n	800930a <_strtod_l+0x2ba>
 800939e:	2a6e      	cmp	r2, #110	@ 0x6e
 80093a0:	e7da      	b.n	8009358 <_strtod_l+0x308>
 80093a2:	498c      	ldr	r1, [pc, #560]	@ (80095d4 <_strtod_l+0x584>)
 80093a4:	a819      	add	r0, sp, #100	@ 0x64
 80093a6:	f001 fba3 	bl	800aaf0 <__match>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	f43f aea4 	beq.w	80090f8 <_strtod_l+0xa8>
 80093b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093b2:	4989      	ldr	r1, [pc, #548]	@ (80095d8 <_strtod_l+0x588>)
 80093b4:	3b01      	subs	r3, #1
 80093b6:	a819      	add	r0, sp, #100	@ 0x64
 80093b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80093ba:	f001 fb99 	bl	800aaf0 <__match>
 80093be:	b910      	cbnz	r0, 80093c6 <_strtod_l+0x376>
 80093c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093c2:	3301      	adds	r3, #1
 80093c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80093c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80095e8 <_strtod_l+0x598>
 80093ca:	f04f 0a00 	mov.w	sl, #0
 80093ce:	e678      	b.n	80090c2 <_strtod_l+0x72>
 80093d0:	4882      	ldr	r0, [pc, #520]	@ (80095dc <_strtod_l+0x58c>)
 80093d2:	f001 f8c9 	bl	800a568 <nan>
 80093d6:	ec5b ab10 	vmov	sl, fp, d0
 80093da:	e672      	b.n	80090c2 <_strtod_l+0x72>
 80093dc:	eba8 0309 	sub.w	r3, r8, r9
 80093e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80093e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e4:	2f00      	cmp	r7, #0
 80093e6:	bf08      	it	eq
 80093e8:	462f      	moveq	r7, r5
 80093ea:	2d10      	cmp	r5, #16
 80093ec:	462c      	mov	r4, r5
 80093ee:	bfa8      	it	ge
 80093f0:	2410      	movge	r4, #16
 80093f2:	f7f7 f887 	bl	8000504 <__aeabi_ui2d>
 80093f6:	2d09      	cmp	r5, #9
 80093f8:	4682      	mov	sl, r0
 80093fa:	468b      	mov	fp, r1
 80093fc:	dc13      	bgt.n	8009426 <_strtod_l+0x3d6>
 80093fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009400:	2b00      	cmp	r3, #0
 8009402:	f43f ae5e 	beq.w	80090c2 <_strtod_l+0x72>
 8009406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009408:	dd78      	ble.n	80094fc <_strtod_l+0x4ac>
 800940a:	2b16      	cmp	r3, #22
 800940c:	dc5f      	bgt.n	80094ce <_strtod_l+0x47e>
 800940e:	4974      	ldr	r1, [pc, #464]	@ (80095e0 <_strtod_l+0x590>)
 8009410:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009418:	4652      	mov	r2, sl
 800941a:	465b      	mov	r3, fp
 800941c:	f7f7 f8ec 	bl	80005f8 <__aeabi_dmul>
 8009420:	4682      	mov	sl, r0
 8009422:	468b      	mov	fp, r1
 8009424:	e64d      	b.n	80090c2 <_strtod_l+0x72>
 8009426:	4b6e      	ldr	r3, [pc, #440]	@ (80095e0 <_strtod_l+0x590>)
 8009428:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800942c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009430:	f7f7 f8e2 	bl	80005f8 <__aeabi_dmul>
 8009434:	4682      	mov	sl, r0
 8009436:	9808      	ldr	r0, [sp, #32]
 8009438:	468b      	mov	fp, r1
 800943a:	f7f7 f863 	bl	8000504 <__aeabi_ui2d>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	4650      	mov	r0, sl
 8009444:	4659      	mov	r1, fp
 8009446:	f7f6 ff21 	bl	800028c <__adddf3>
 800944a:	2d0f      	cmp	r5, #15
 800944c:	4682      	mov	sl, r0
 800944e:	468b      	mov	fp, r1
 8009450:	ddd5      	ble.n	80093fe <_strtod_l+0x3ae>
 8009452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009454:	1b2c      	subs	r4, r5, r4
 8009456:	441c      	add	r4, r3
 8009458:	2c00      	cmp	r4, #0
 800945a:	f340 8096 	ble.w	800958a <_strtod_l+0x53a>
 800945e:	f014 030f 	ands.w	r3, r4, #15
 8009462:	d00a      	beq.n	800947a <_strtod_l+0x42a>
 8009464:	495e      	ldr	r1, [pc, #376]	@ (80095e0 <_strtod_l+0x590>)
 8009466:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800946a:	4652      	mov	r2, sl
 800946c:	465b      	mov	r3, fp
 800946e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009472:	f7f7 f8c1 	bl	80005f8 <__aeabi_dmul>
 8009476:	4682      	mov	sl, r0
 8009478:	468b      	mov	fp, r1
 800947a:	f034 040f 	bics.w	r4, r4, #15
 800947e:	d073      	beq.n	8009568 <_strtod_l+0x518>
 8009480:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009484:	dd48      	ble.n	8009518 <_strtod_l+0x4c8>
 8009486:	2400      	movs	r4, #0
 8009488:	46a0      	mov	r8, r4
 800948a:	940a      	str	r4, [sp, #40]	@ 0x28
 800948c:	46a1      	mov	r9, r4
 800948e:	9a05      	ldr	r2, [sp, #20]
 8009490:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80095e8 <_strtod_l+0x598>
 8009494:	2322      	movs	r3, #34	@ 0x22
 8009496:	6013      	str	r3, [r2, #0]
 8009498:	f04f 0a00 	mov.w	sl, #0
 800949c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f43f ae0f 	beq.w	80090c2 <_strtod_l+0x72>
 80094a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094a6:	9805      	ldr	r0, [sp, #20]
 80094a8:	f7ff f942 	bl	8008730 <_Bfree>
 80094ac:	9805      	ldr	r0, [sp, #20]
 80094ae:	4649      	mov	r1, r9
 80094b0:	f7ff f93e 	bl	8008730 <_Bfree>
 80094b4:	9805      	ldr	r0, [sp, #20]
 80094b6:	4641      	mov	r1, r8
 80094b8:	f7ff f93a 	bl	8008730 <_Bfree>
 80094bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80094be:	9805      	ldr	r0, [sp, #20]
 80094c0:	f7ff f936 	bl	8008730 <_Bfree>
 80094c4:	9805      	ldr	r0, [sp, #20]
 80094c6:	4621      	mov	r1, r4
 80094c8:	f7ff f932 	bl	8008730 <_Bfree>
 80094cc:	e5f9      	b.n	80090c2 <_strtod_l+0x72>
 80094ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80094d4:	4293      	cmp	r3, r2
 80094d6:	dbbc      	blt.n	8009452 <_strtod_l+0x402>
 80094d8:	4c41      	ldr	r4, [pc, #260]	@ (80095e0 <_strtod_l+0x590>)
 80094da:	f1c5 050f 	rsb	r5, r5, #15
 80094de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80094e2:	4652      	mov	r2, sl
 80094e4:	465b      	mov	r3, fp
 80094e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094ea:	f7f7 f885 	bl	80005f8 <__aeabi_dmul>
 80094ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094f0:	1b5d      	subs	r5, r3, r5
 80094f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80094f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80094fa:	e78f      	b.n	800941c <_strtod_l+0x3cc>
 80094fc:	3316      	adds	r3, #22
 80094fe:	dba8      	blt.n	8009452 <_strtod_l+0x402>
 8009500:	4b37      	ldr	r3, [pc, #220]	@ (80095e0 <_strtod_l+0x590>)
 8009502:	eba9 0808 	sub.w	r8, r9, r8
 8009506:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800950a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800950e:	4650      	mov	r0, sl
 8009510:	4659      	mov	r1, fp
 8009512:	f7f7 f99b 	bl	800084c <__aeabi_ddiv>
 8009516:	e783      	b.n	8009420 <_strtod_l+0x3d0>
 8009518:	4b32      	ldr	r3, [pc, #200]	@ (80095e4 <_strtod_l+0x594>)
 800951a:	9308      	str	r3, [sp, #32]
 800951c:	2300      	movs	r3, #0
 800951e:	1124      	asrs	r4, r4, #4
 8009520:	4650      	mov	r0, sl
 8009522:	4659      	mov	r1, fp
 8009524:	461e      	mov	r6, r3
 8009526:	2c01      	cmp	r4, #1
 8009528:	dc21      	bgt.n	800956e <_strtod_l+0x51e>
 800952a:	b10b      	cbz	r3, 8009530 <_strtod_l+0x4e0>
 800952c:	4682      	mov	sl, r0
 800952e:	468b      	mov	fp, r1
 8009530:	492c      	ldr	r1, [pc, #176]	@ (80095e4 <_strtod_l+0x594>)
 8009532:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009536:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800953a:	4652      	mov	r2, sl
 800953c:	465b      	mov	r3, fp
 800953e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009542:	f7f7 f859 	bl	80005f8 <__aeabi_dmul>
 8009546:	4b28      	ldr	r3, [pc, #160]	@ (80095e8 <_strtod_l+0x598>)
 8009548:	460a      	mov	r2, r1
 800954a:	400b      	ands	r3, r1
 800954c:	4927      	ldr	r1, [pc, #156]	@ (80095ec <_strtod_l+0x59c>)
 800954e:	428b      	cmp	r3, r1
 8009550:	4682      	mov	sl, r0
 8009552:	d898      	bhi.n	8009486 <_strtod_l+0x436>
 8009554:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009558:	428b      	cmp	r3, r1
 800955a:	bf86      	itte	hi
 800955c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80095f0 <_strtod_l+0x5a0>
 8009560:	f04f 3aff 	movhi.w	sl, #4294967295
 8009564:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009568:	2300      	movs	r3, #0
 800956a:	9308      	str	r3, [sp, #32]
 800956c:	e07a      	b.n	8009664 <_strtod_l+0x614>
 800956e:	07e2      	lsls	r2, r4, #31
 8009570:	d505      	bpl.n	800957e <_strtod_l+0x52e>
 8009572:	9b08      	ldr	r3, [sp, #32]
 8009574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009578:	f7f7 f83e 	bl	80005f8 <__aeabi_dmul>
 800957c:	2301      	movs	r3, #1
 800957e:	9a08      	ldr	r2, [sp, #32]
 8009580:	3208      	adds	r2, #8
 8009582:	3601      	adds	r6, #1
 8009584:	1064      	asrs	r4, r4, #1
 8009586:	9208      	str	r2, [sp, #32]
 8009588:	e7cd      	b.n	8009526 <_strtod_l+0x4d6>
 800958a:	d0ed      	beq.n	8009568 <_strtod_l+0x518>
 800958c:	4264      	negs	r4, r4
 800958e:	f014 020f 	ands.w	r2, r4, #15
 8009592:	d00a      	beq.n	80095aa <_strtod_l+0x55a>
 8009594:	4b12      	ldr	r3, [pc, #72]	@ (80095e0 <_strtod_l+0x590>)
 8009596:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800959a:	4650      	mov	r0, sl
 800959c:	4659      	mov	r1, fp
 800959e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a2:	f7f7 f953 	bl	800084c <__aeabi_ddiv>
 80095a6:	4682      	mov	sl, r0
 80095a8:	468b      	mov	fp, r1
 80095aa:	1124      	asrs	r4, r4, #4
 80095ac:	d0dc      	beq.n	8009568 <_strtod_l+0x518>
 80095ae:	2c1f      	cmp	r4, #31
 80095b0:	dd20      	ble.n	80095f4 <_strtod_l+0x5a4>
 80095b2:	2400      	movs	r4, #0
 80095b4:	46a0      	mov	r8, r4
 80095b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80095b8:	46a1      	mov	r9, r4
 80095ba:	9a05      	ldr	r2, [sp, #20]
 80095bc:	2322      	movs	r3, #34	@ 0x22
 80095be:	f04f 0a00 	mov.w	sl, #0
 80095c2:	f04f 0b00 	mov.w	fp, #0
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	e768      	b.n	800949c <_strtod_l+0x44c>
 80095ca:	bf00      	nop
 80095cc:	0800b625 	.word	0x0800b625
 80095d0:	0800b83c 	.word	0x0800b83c
 80095d4:	0800b61d 	.word	0x0800b61d
 80095d8:	0800b654 	.word	0x0800b654
 80095dc:	0800b9e5 	.word	0x0800b9e5
 80095e0:	0800b770 	.word	0x0800b770
 80095e4:	0800b748 	.word	0x0800b748
 80095e8:	7ff00000 	.word	0x7ff00000
 80095ec:	7ca00000 	.word	0x7ca00000
 80095f0:	7fefffff 	.word	0x7fefffff
 80095f4:	f014 0310 	ands.w	r3, r4, #16
 80095f8:	bf18      	it	ne
 80095fa:	236a      	movne	r3, #106	@ 0x6a
 80095fc:	4ea9      	ldr	r6, [pc, #676]	@ (80098a4 <_strtod_l+0x854>)
 80095fe:	9308      	str	r3, [sp, #32]
 8009600:	4650      	mov	r0, sl
 8009602:	4659      	mov	r1, fp
 8009604:	2300      	movs	r3, #0
 8009606:	07e2      	lsls	r2, r4, #31
 8009608:	d504      	bpl.n	8009614 <_strtod_l+0x5c4>
 800960a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800960e:	f7f6 fff3 	bl	80005f8 <__aeabi_dmul>
 8009612:	2301      	movs	r3, #1
 8009614:	1064      	asrs	r4, r4, #1
 8009616:	f106 0608 	add.w	r6, r6, #8
 800961a:	d1f4      	bne.n	8009606 <_strtod_l+0x5b6>
 800961c:	b10b      	cbz	r3, 8009622 <_strtod_l+0x5d2>
 800961e:	4682      	mov	sl, r0
 8009620:	468b      	mov	fp, r1
 8009622:	9b08      	ldr	r3, [sp, #32]
 8009624:	b1b3      	cbz	r3, 8009654 <_strtod_l+0x604>
 8009626:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800962a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800962e:	2b00      	cmp	r3, #0
 8009630:	4659      	mov	r1, fp
 8009632:	dd0f      	ble.n	8009654 <_strtod_l+0x604>
 8009634:	2b1f      	cmp	r3, #31
 8009636:	dd55      	ble.n	80096e4 <_strtod_l+0x694>
 8009638:	2b34      	cmp	r3, #52	@ 0x34
 800963a:	bfde      	ittt	le
 800963c:	f04f 33ff 	movle.w	r3, #4294967295
 8009640:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009644:	4093      	lslle	r3, r2
 8009646:	f04f 0a00 	mov.w	sl, #0
 800964a:	bfcc      	ite	gt
 800964c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009650:	ea03 0b01 	andle.w	fp, r3, r1
 8009654:	2200      	movs	r2, #0
 8009656:	2300      	movs	r3, #0
 8009658:	4650      	mov	r0, sl
 800965a:	4659      	mov	r1, fp
 800965c:	f7f7 fa34 	bl	8000ac8 <__aeabi_dcmpeq>
 8009660:	2800      	cmp	r0, #0
 8009662:	d1a6      	bne.n	80095b2 <_strtod_l+0x562>
 8009664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800966a:	9805      	ldr	r0, [sp, #20]
 800966c:	462b      	mov	r3, r5
 800966e:	463a      	mov	r2, r7
 8009670:	f7ff f8c6 	bl	8008800 <__s2b>
 8009674:	900a      	str	r0, [sp, #40]	@ 0x28
 8009676:	2800      	cmp	r0, #0
 8009678:	f43f af05 	beq.w	8009486 <_strtod_l+0x436>
 800967c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800967e:	2a00      	cmp	r2, #0
 8009680:	eba9 0308 	sub.w	r3, r9, r8
 8009684:	bfa8      	it	ge
 8009686:	2300      	movge	r3, #0
 8009688:	9312      	str	r3, [sp, #72]	@ 0x48
 800968a:	2400      	movs	r4, #0
 800968c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009690:	9316      	str	r3, [sp, #88]	@ 0x58
 8009692:	46a0      	mov	r8, r4
 8009694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009696:	9805      	ldr	r0, [sp, #20]
 8009698:	6859      	ldr	r1, [r3, #4]
 800969a:	f7ff f809 	bl	80086b0 <_Balloc>
 800969e:	4681      	mov	r9, r0
 80096a0:	2800      	cmp	r0, #0
 80096a2:	f43f aef4 	beq.w	800948e <_strtod_l+0x43e>
 80096a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096a8:	691a      	ldr	r2, [r3, #16]
 80096aa:	3202      	adds	r2, #2
 80096ac:	f103 010c 	add.w	r1, r3, #12
 80096b0:	0092      	lsls	r2, r2, #2
 80096b2:	300c      	adds	r0, #12
 80096b4:	f000 ff48 	bl	800a548 <memcpy>
 80096b8:	ec4b ab10 	vmov	d0, sl, fp
 80096bc:	9805      	ldr	r0, [sp, #20]
 80096be:	aa1c      	add	r2, sp, #112	@ 0x70
 80096c0:	a91b      	add	r1, sp, #108	@ 0x6c
 80096c2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80096c6:	f7ff fbd7 	bl	8008e78 <__d2b>
 80096ca:	901a      	str	r0, [sp, #104]	@ 0x68
 80096cc:	2800      	cmp	r0, #0
 80096ce:	f43f aede 	beq.w	800948e <_strtod_l+0x43e>
 80096d2:	9805      	ldr	r0, [sp, #20]
 80096d4:	2101      	movs	r1, #1
 80096d6:	f7ff f929 	bl	800892c <__i2b>
 80096da:	4680      	mov	r8, r0
 80096dc:	b948      	cbnz	r0, 80096f2 <_strtod_l+0x6a2>
 80096de:	f04f 0800 	mov.w	r8, #0
 80096e2:	e6d4      	b.n	800948e <_strtod_l+0x43e>
 80096e4:	f04f 32ff 	mov.w	r2, #4294967295
 80096e8:	fa02 f303 	lsl.w	r3, r2, r3
 80096ec:	ea03 0a0a 	and.w	sl, r3, sl
 80096f0:	e7b0      	b.n	8009654 <_strtod_l+0x604>
 80096f2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80096f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80096f6:	2d00      	cmp	r5, #0
 80096f8:	bfab      	itete	ge
 80096fa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80096fc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80096fe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009700:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009702:	bfac      	ite	ge
 8009704:	18ef      	addge	r7, r5, r3
 8009706:	1b5e      	sublt	r6, r3, r5
 8009708:	9b08      	ldr	r3, [sp, #32]
 800970a:	1aed      	subs	r5, r5, r3
 800970c:	4415      	add	r5, r2
 800970e:	4b66      	ldr	r3, [pc, #408]	@ (80098a8 <_strtod_l+0x858>)
 8009710:	3d01      	subs	r5, #1
 8009712:	429d      	cmp	r5, r3
 8009714:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009718:	da50      	bge.n	80097bc <_strtod_l+0x76c>
 800971a:	1b5b      	subs	r3, r3, r5
 800971c:	2b1f      	cmp	r3, #31
 800971e:	eba2 0203 	sub.w	r2, r2, r3
 8009722:	f04f 0101 	mov.w	r1, #1
 8009726:	dc3d      	bgt.n	80097a4 <_strtod_l+0x754>
 8009728:	fa01 f303 	lsl.w	r3, r1, r3
 800972c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800972e:	2300      	movs	r3, #0
 8009730:	9310      	str	r3, [sp, #64]	@ 0x40
 8009732:	18bd      	adds	r5, r7, r2
 8009734:	9b08      	ldr	r3, [sp, #32]
 8009736:	42af      	cmp	r7, r5
 8009738:	4416      	add	r6, r2
 800973a:	441e      	add	r6, r3
 800973c:	463b      	mov	r3, r7
 800973e:	bfa8      	it	ge
 8009740:	462b      	movge	r3, r5
 8009742:	42b3      	cmp	r3, r6
 8009744:	bfa8      	it	ge
 8009746:	4633      	movge	r3, r6
 8009748:	2b00      	cmp	r3, #0
 800974a:	bfc2      	ittt	gt
 800974c:	1aed      	subgt	r5, r5, r3
 800974e:	1af6      	subgt	r6, r6, r3
 8009750:	1aff      	subgt	r7, r7, r3
 8009752:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009754:	2b00      	cmp	r3, #0
 8009756:	dd16      	ble.n	8009786 <_strtod_l+0x736>
 8009758:	4641      	mov	r1, r8
 800975a:	9805      	ldr	r0, [sp, #20]
 800975c:	461a      	mov	r2, r3
 800975e:	f7ff f9a5 	bl	8008aac <__pow5mult>
 8009762:	4680      	mov	r8, r0
 8009764:	2800      	cmp	r0, #0
 8009766:	d0ba      	beq.n	80096de <_strtod_l+0x68e>
 8009768:	4601      	mov	r1, r0
 800976a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800976c:	9805      	ldr	r0, [sp, #20]
 800976e:	f7ff f8f3 	bl	8008958 <__multiply>
 8009772:	900e      	str	r0, [sp, #56]	@ 0x38
 8009774:	2800      	cmp	r0, #0
 8009776:	f43f ae8a 	beq.w	800948e <_strtod_l+0x43e>
 800977a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800977c:	9805      	ldr	r0, [sp, #20]
 800977e:	f7fe ffd7 	bl	8008730 <_Bfree>
 8009782:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009784:	931a      	str	r3, [sp, #104]	@ 0x68
 8009786:	2d00      	cmp	r5, #0
 8009788:	dc1d      	bgt.n	80097c6 <_strtod_l+0x776>
 800978a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800978c:	2b00      	cmp	r3, #0
 800978e:	dd23      	ble.n	80097d8 <_strtod_l+0x788>
 8009790:	4649      	mov	r1, r9
 8009792:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009794:	9805      	ldr	r0, [sp, #20]
 8009796:	f7ff f989 	bl	8008aac <__pow5mult>
 800979a:	4681      	mov	r9, r0
 800979c:	b9e0      	cbnz	r0, 80097d8 <_strtod_l+0x788>
 800979e:	f04f 0900 	mov.w	r9, #0
 80097a2:	e674      	b.n	800948e <_strtod_l+0x43e>
 80097a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80097a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80097ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80097b0:	35e2      	adds	r5, #226	@ 0xe2
 80097b2:	fa01 f305 	lsl.w	r3, r1, r5
 80097b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80097b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80097ba:	e7ba      	b.n	8009732 <_strtod_l+0x6e2>
 80097bc:	2300      	movs	r3, #0
 80097be:	9310      	str	r3, [sp, #64]	@ 0x40
 80097c0:	2301      	movs	r3, #1
 80097c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80097c4:	e7b5      	b.n	8009732 <_strtod_l+0x6e2>
 80097c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097c8:	9805      	ldr	r0, [sp, #20]
 80097ca:	462a      	mov	r2, r5
 80097cc:	f7ff f9c8 	bl	8008b60 <__lshift>
 80097d0:	901a      	str	r0, [sp, #104]	@ 0x68
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d1d9      	bne.n	800978a <_strtod_l+0x73a>
 80097d6:	e65a      	b.n	800948e <_strtod_l+0x43e>
 80097d8:	2e00      	cmp	r6, #0
 80097da:	dd07      	ble.n	80097ec <_strtod_l+0x79c>
 80097dc:	4649      	mov	r1, r9
 80097de:	9805      	ldr	r0, [sp, #20]
 80097e0:	4632      	mov	r2, r6
 80097e2:	f7ff f9bd 	bl	8008b60 <__lshift>
 80097e6:	4681      	mov	r9, r0
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d0d8      	beq.n	800979e <_strtod_l+0x74e>
 80097ec:	2f00      	cmp	r7, #0
 80097ee:	dd08      	ble.n	8009802 <_strtod_l+0x7b2>
 80097f0:	4641      	mov	r1, r8
 80097f2:	9805      	ldr	r0, [sp, #20]
 80097f4:	463a      	mov	r2, r7
 80097f6:	f7ff f9b3 	bl	8008b60 <__lshift>
 80097fa:	4680      	mov	r8, r0
 80097fc:	2800      	cmp	r0, #0
 80097fe:	f43f ae46 	beq.w	800948e <_strtod_l+0x43e>
 8009802:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009804:	9805      	ldr	r0, [sp, #20]
 8009806:	464a      	mov	r2, r9
 8009808:	f7ff fa32 	bl	8008c70 <__mdiff>
 800980c:	4604      	mov	r4, r0
 800980e:	2800      	cmp	r0, #0
 8009810:	f43f ae3d 	beq.w	800948e <_strtod_l+0x43e>
 8009814:	68c3      	ldr	r3, [r0, #12]
 8009816:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009818:	2300      	movs	r3, #0
 800981a:	60c3      	str	r3, [r0, #12]
 800981c:	4641      	mov	r1, r8
 800981e:	f7ff fa0b 	bl	8008c38 <__mcmp>
 8009822:	2800      	cmp	r0, #0
 8009824:	da46      	bge.n	80098b4 <_strtod_l+0x864>
 8009826:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009828:	ea53 030a 	orrs.w	r3, r3, sl
 800982c:	d16c      	bne.n	8009908 <_strtod_l+0x8b8>
 800982e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009832:	2b00      	cmp	r3, #0
 8009834:	d168      	bne.n	8009908 <_strtod_l+0x8b8>
 8009836:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800983a:	0d1b      	lsrs	r3, r3, #20
 800983c:	051b      	lsls	r3, r3, #20
 800983e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009842:	d961      	bls.n	8009908 <_strtod_l+0x8b8>
 8009844:	6963      	ldr	r3, [r4, #20]
 8009846:	b913      	cbnz	r3, 800984e <_strtod_l+0x7fe>
 8009848:	6923      	ldr	r3, [r4, #16]
 800984a:	2b01      	cmp	r3, #1
 800984c:	dd5c      	ble.n	8009908 <_strtod_l+0x8b8>
 800984e:	4621      	mov	r1, r4
 8009850:	2201      	movs	r2, #1
 8009852:	9805      	ldr	r0, [sp, #20]
 8009854:	f7ff f984 	bl	8008b60 <__lshift>
 8009858:	4641      	mov	r1, r8
 800985a:	4604      	mov	r4, r0
 800985c:	f7ff f9ec 	bl	8008c38 <__mcmp>
 8009860:	2800      	cmp	r0, #0
 8009862:	dd51      	ble.n	8009908 <_strtod_l+0x8b8>
 8009864:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009868:	9a08      	ldr	r2, [sp, #32]
 800986a:	0d1b      	lsrs	r3, r3, #20
 800986c:	051b      	lsls	r3, r3, #20
 800986e:	2a00      	cmp	r2, #0
 8009870:	d06b      	beq.n	800994a <_strtod_l+0x8fa>
 8009872:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009876:	d868      	bhi.n	800994a <_strtod_l+0x8fa>
 8009878:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800987c:	f67f ae9d 	bls.w	80095ba <_strtod_l+0x56a>
 8009880:	4b0a      	ldr	r3, [pc, #40]	@ (80098ac <_strtod_l+0x85c>)
 8009882:	4650      	mov	r0, sl
 8009884:	4659      	mov	r1, fp
 8009886:	2200      	movs	r2, #0
 8009888:	f7f6 feb6 	bl	80005f8 <__aeabi_dmul>
 800988c:	4b08      	ldr	r3, [pc, #32]	@ (80098b0 <_strtod_l+0x860>)
 800988e:	400b      	ands	r3, r1
 8009890:	4682      	mov	sl, r0
 8009892:	468b      	mov	fp, r1
 8009894:	2b00      	cmp	r3, #0
 8009896:	f47f ae05 	bne.w	80094a4 <_strtod_l+0x454>
 800989a:	9a05      	ldr	r2, [sp, #20]
 800989c:	2322      	movs	r3, #34	@ 0x22
 800989e:	6013      	str	r3, [r2, #0]
 80098a0:	e600      	b.n	80094a4 <_strtod_l+0x454>
 80098a2:	bf00      	nop
 80098a4:	0800b868 	.word	0x0800b868
 80098a8:	fffffc02 	.word	0xfffffc02
 80098ac:	39500000 	.word	0x39500000
 80098b0:	7ff00000 	.word	0x7ff00000
 80098b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80098b8:	d165      	bne.n	8009986 <_strtod_l+0x936>
 80098ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80098bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098c0:	b35a      	cbz	r2, 800991a <_strtod_l+0x8ca>
 80098c2:	4a9f      	ldr	r2, [pc, #636]	@ (8009b40 <_strtod_l+0xaf0>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d12b      	bne.n	8009920 <_strtod_l+0x8d0>
 80098c8:	9b08      	ldr	r3, [sp, #32]
 80098ca:	4651      	mov	r1, sl
 80098cc:	b303      	cbz	r3, 8009910 <_strtod_l+0x8c0>
 80098ce:	4b9d      	ldr	r3, [pc, #628]	@ (8009b44 <_strtod_l+0xaf4>)
 80098d0:	465a      	mov	r2, fp
 80098d2:	4013      	ands	r3, r2
 80098d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80098d8:	f04f 32ff 	mov.w	r2, #4294967295
 80098dc:	d81b      	bhi.n	8009916 <_strtod_l+0x8c6>
 80098de:	0d1b      	lsrs	r3, r3, #20
 80098e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80098e4:	fa02 f303 	lsl.w	r3, r2, r3
 80098e8:	4299      	cmp	r1, r3
 80098ea:	d119      	bne.n	8009920 <_strtod_l+0x8d0>
 80098ec:	4b96      	ldr	r3, [pc, #600]	@ (8009b48 <_strtod_l+0xaf8>)
 80098ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d102      	bne.n	80098fa <_strtod_l+0x8aa>
 80098f4:	3101      	adds	r1, #1
 80098f6:	f43f adca 	beq.w	800948e <_strtod_l+0x43e>
 80098fa:	4b92      	ldr	r3, [pc, #584]	@ (8009b44 <_strtod_l+0xaf4>)
 80098fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098fe:	401a      	ands	r2, r3
 8009900:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009904:	f04f 0a00 	mov.w	sl, #0
 8009908:	9b08      	ldr	r3, [sp, #32]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1b8      	bne.n	8009880 <_strtod_l+0x830>
 800990e:	e5c9      	b.n	80094a4 <_strtod_l+0x454>
 8009910:	f04f 33ff 	mov.w	r3, #4294967295
 8009914:	e7e8      	b.n	80098e8 <_strtod_l+0x898>
 8009916:	4613      	mov	r3, r2
 8009918:	e7e6      	b.n	80098e8 <_strtod_l+0x898>
 800991a:	ea53 030a 	orrs.w	r3, r3, sl
 800991e:	d0a1      	beq.n	8009864 <_strtod_l+0x814>
 8009920:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009922:	b1db      	cbz	r3, 800995c <_strtod_l+0x90c>
 8009924:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009926:	4213      	tst	r3, r2
 8009928:	d0ee      	beq.n	8009908 <_strtod_l+0x8b8>
 800992a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800992c:	9a08      	ldr	r2, [sp, #32]
 800992e:	4650      	mov	r0, sl
 8009930:	4659      	mov	r1, fp
 8009932:	b1bb      	cbz	r3, 8009964 <_strtod_l+0x914>
 8009934:	f7ff fb6e 	bl	8009014 <sulp>
 8009938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800993c:	ec53 2b10 	vmov	r2, r3, d0
 8009940:	f7f6 fca4 	bl	800028c <__adddf3>
 8009944:	4682      	mov	sl, r0
 8009946:	468b      	mov	fp, r1
 8009948:	e7de      	b.n	8009908 <_strtod_l+0x8b8>
 800994a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800994e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009952:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009956:	f04f 3aff 	mov.w	sl, #4294967295
 800995a:	e7d5      	b.n	8009908 <_strtod_l+0x8b8>
 800995c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800995e:	ea13 0f0a 	tst.w	r3, sl
 8009962:	e7e1      	b.n	8009928 <_strtod_l+0x8d8>
 8009964:	f7ff fb56 	bl	8009014 <sulp>
 8009968:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800996c:	ec53 2b10 	vmov	r2, r3, d0
 8009970:	f7f6 fc8a 	bl	8000288 <__aeabi_dsub>
 8009974:	2200      	movs	r2, #0
 8009976:	2300      	movs	r3, #0
 8009978:	4682      	mov	sl, r0
 800997a:	468b      	mov	fp, r1
 800997c:	f7f7 f8a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009980:	2800      	cmp	r0, #0
 8009982:	d0c1      	beq.n	8009908 <_strtod_l+0x8b8>
 8009984:	e619      	b.n	80095ba <_strtod_l+0x56a>
 8009986:	4641      	mov	r1, r8
 8009988:	4620      	mov	r0, r4
 800998a:	f7ff facd 	bl	8008f28 <__ratio>
 800998e:	ec57 6b10 	vmov	r6, r7, d0
 8009992:	2200      	movs	r2, #0
 8009994:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009998:	4630      	mov	r0, r6
 800999a:	4639      	mov	r1, r7
 800999c:	f7f7 f8a8 	bl	8000af0 <__aeabi_dcmple>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d06f      	beq.n	8009a84 <_strtod_l+0xa34>
 80099a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d17a      	bne.n	8009aa0 <_strtod_l+0xa50>
 80099aa:	f1ba 0f00 	cmp.w	sl, #0
 80099ae:	d158      	bne.n	8009a62 <_strtod_l+0xa12>
 80099b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d15a      	bne.n	8009a70 <_strtod_l+0xa20>
 80099ba:	4b64      	ldr	r3, [pc, #400]	@ (8009b4c <_strtod_l+0xafc>)
 80099bc:	2200      	movs	r2, #0
 80099be:	4630      	mov	r0, r6
 80099c0:	4639      	mov	r1, r7
 80099c2:	f7f7 f88b 	bl	8000adc <__aeabi_dcmplt>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d159      	bne.n	8009a7e <_strtod_l+0xa2e>
 80099ca:	4630      	mov	r0, r6
 80099cc:	4639      	mov	r1, r7
 80099ce:	4b60      	ldr	r3, [pc, #384]	@ (8009b50 <_strtod_l+0xb00>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	f7f6 fe11 	bl	80005f8 <__aeabi_dmul>
 80099d6:	4606      	mov	r6, r0
 80099d8:	460f      	mov	r7, r1
 80099da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80099de:	9606      	str	r6, [sp, #24]
 80099e0:	9307      	str	r3, [sp, #28]
 80099e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099e6:	4d57      	ldr	r5, [pc, #348]	@ (8009b44 <_strtod_l+0xaf4>)
 80099e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80099ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099ee:	401d      	ands	r5, r3
 80099f0:	4b58      	ldr	r3, [pc, #352]	@ (8009b54 <_strtod_l+0xb04>)
 80099f2:	429d      	cmp	r5, r3
 80099f4:	f040 80b2 	bne.w	8009b5c <_strtod_l+0xb0c>
 80099f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80099fe:	ec4b ab10 	vmov	d0, sl, fp
 8009a02:	f7ff f9c9 	bl	8008d98 <__ulp>
 8009a06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a0a:	ec51 0b10 	vmov	r0, r1, d0
 8009a0e:	f7f6 fdf3 	bl	80005f8 <__aeabi_dmul>
 8009a12:	4652      	mov	r2, sl
 8009a14:	465b      	mov	r3, fp
 8009a16:	f7f6 fc39 	bl	800028c <__adddf3>
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4949      	ldr	r1, [pc, #292]	@ (8009b44 <_strtod_l+0xaf4>)
 8009a1e:	4a4e      	ldr	r2, [pc, #312]	@ (8009b58 <_strtod_l+0xb08>)
 8009a20:	4019      	ands	r1, r3
 8009a22:	4291      	cmp	r1, r2
 8009a24:	4682      	mov	sl, r0
 8009a26:	d942      	bls.n	8009aae <_strtod_l+0xa5e>
 8009a28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a2a:	4b47      	ldr	r3, [pc, #284]	@ (8009b48 <_strtod_l+0xaf8>)
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d103      	bne.n	8009a38 <_strtod_l+0x9e8>
 8009a30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a32:	3301      	adds	r3, #1
 8009a34:	f43f ad2b 	beq.w	800948e <_strtod_l+0x43e>
 8009a38:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009b48 <_strtod_l+0xaf8>
 8009a3c:	f04f 3aff 	mov.w	sl, #4294967295
 8009a40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a42:	9805      	ldr	r0, [sp, #20]
 8009a44:	f7fe fe74 	bl	8008730 <_Bfree>
 8009a48:	9805      	ldr	r0, [sp, #20]
 8009a4a:	4649      	mov	r1, r9
 8009a4c:	f7fe fe70 	bl	8008730 <_Bfree>
 8009a50:	9805      	ldr	r0, [sp, #20]
 8009a52:	4641      	mov	r1, r8
 8009a54:	f7fe fe6c 	bl	8008730 <_Bfree>
 8009a58:	9805      	ldr	r0, [sp, #20]
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	f7fe fe68 	bl	8008730 <_Bfree>
 8009a60:	e618      	b.n	8009694 <_strtod_l+0x644>
 8009a62:	f1ba 0f01 	cmp.w	sl, #1
 8009a66:	d103      	bne.n	8009a70 <_strtod_l+0xa20>
 8009a68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f43f ada5 	beq.w	80095ba <_strtod_l+0x56a>
 8009a70:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009b20 <_strtod_l+0xad0>
 8009a74:	4f35      	ldr	r7, [pc, #212]	@ (8009b4c <_strtod_l+0xafc>)
 8009a76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a7a:	2600      	movs	r6, #0
 8009a7c:	e7b1      	b.n	80099e2 <_strtod_l+0x992>
 8009a7e:	4f34      	ldr	r7, [pc, #208]	@ (8009b50 <_strtod_l+0xb00>)
 8009a80:	2600      	movs	r6, #0
 8009a82:	e7aa      	b.n	80099da <_strtod_l+0x98a>
 8009a84:	4b32      	ldr	r3, [pc, #200]	@ (8009b50 <_strtod_l+0xb00>)
 8009a86:	4630      	mov	r0, r6
 8009a88:	4639      	mov	r1, r7
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f7f6 fdb4 	bl	80005f8 <__aeabi_dmul>
 8009a90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a92:	4606      	mov	r6, r0
 8009a94:	460f      	mov	r7, r1
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d09f      	beq.n	80099da <_strtod_l+0x98a>
 8009a9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009a9e:	e7a0      	b.n	80099e2 <_strtod_l+0x992>
 8009aa0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009b28 <_strtod_l+0xad8>
 8009aa4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009aa8:	ec57 6b17 	vmov	r6, r7, d7
 8009aac:	e799      	b.n	80099e2 <_strtod_l+0x992>
 8009aae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009ab2:	9b08      	ldr	r3, [sp, #32]
 8009ab4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1c1      	bne.n	8009a40 <_strtod_l+0x9f0>
 8009abc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ac0:	0d1b      	lsrs	r3, r3, #20
 8009ac2:	051b      	lsls	r3, r3, #20
 8009ac4:	429d      	cmp	r5, r3
 8009ac6:	d1bb      	bne.n	8009a40 <_strtod_l+0x9f0>
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f7 f8f4 	bl	8000cb8 <__aeabi_d2lz>
 8009ad0:	f7f6 fd64 	bl	800059c <__aeabi_l2d>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	4630      	mov	r0, r6
 8009ada:	4639      	mov	r1, r7
 8009adc:	f7f6 fbd4 	bl	8000288 <__aeabi_dsub>
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009ae8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aee:	ea46 060a 	orr.w	r6, r6, sl
 8009af2:	431e      	orrs	r6, r3
 8009af4:	d06f      	beq.n	8009bd6 <_strtod_l+0xb86>
 8009af6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009b30 <_strtod_l+0xae0>)
 8009af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afc:	f7f6 ffee 	bl	8000adc <__aeabi_dcmplt>
 8009b00:	2800      	cmp	r0, #0
 8009b02:	f47f accf 	bne.w	80094a4 <_strtod_l+0x454>
 8009b06:	a30c      	add	r3, pc, #48	@ (adr r3, 8009b38 <_strtod_l+0xae8>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b10:	f7f7 f802 	bl	8000b18 <__aeabi_dcmpgt>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d093      	beq.n	8009a40 <_strtod_l+0x9f0>
 8009b18:	e4c4      	b.n	80094a4 <_strtod_l+0x454>
 8009b1a:	bf00      	nop
 8009b1c:	f3af 8000 	nop.w
 8009b20:	00000000 	.word	0x00000000
 8009b24:	bff00000 	.word	0xbff00000
 8009b28:	00000000 	.word	0x00000000
 8009b2c:	3ff00000 	.word	0x3ff00000
 8009b30:	94a03595 	.word	0x94a03595
 8009b34:	3fdfffff 	.word	0x3fdfffff
 8009b38:	35afe535 	.word	0x35afe535
 8009b3c:	3fe00000 	.word	0x3fe00000
 8009b40:	000fffff 	.word	0x000fffff
 8009b44:	7ff00000 	.word	0x7ff00000
 8009b48:	7fefffff 	.word	0x7fefffff
 8009b4c:	3ff00000 	.word	0x3ff00000
 8009b50:	3fe00000 	.word	0x3fe00000
 8009b54:	7fe00000 	.word	0x7fe00000
 8009b58:	7c9fffff 	.word	0x7c9fffff
 8009b5c:	9b08      	ldr	r3, [sp, #32]
 8009b5e:	b323      	cbz	r3, 8009baa <_strtod_l+0xb5a>
 8009b60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009b64:	d821      	bhi.n	8009baa <_strtod_l+0xb5a>
 8009b66:	a328      	add	r3, pc, #160	@ (adr r3, 8009c08 <_strtod_l+0xbb8>)
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	4639      	mov	r1, r7
 8009b70:	f7f6 ffbe 	bl	8000af0 <__aeabi_dcmple>
 8009b74:	b1a0      	cbz	r0, 8009ba0 <_strtod_l+0xb50>
 8009b76:	4639      	mov	r1, r7
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f7f7 f815 	bl	8000ba8 <__aeabi_d2uiz>
 8009b7e:	2801      	cmp	r0, #1
 8009b80:	bf38      	it	cc
 8009b82:	2001      	movcc	r0, #1
 8009b84:	f7f6 fcbe 	bl	8000504 <__aeabi_ui2d>
 8009b88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	460f      	mov	r7, r1
 8009b8e:	b9fb      	cbnz	r3, 8009bd0 <_strtod_l+0xb80>
 8009b90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b94:	9014      	str	r0, [sp, #80]	@ 0x50
 8009b96:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009b9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ba0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ba2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009ba6:	1b5b      	subs	r3, r3, r5
 8009ba8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009baa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009bae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009bb2:	f7ff f8f1 	bl	8008d98 <__ulp>
 8009bb6:	4650      	mov	r0, sl
 8009bb8:	ec53 2b10 	vmov	r2, r3, d0
 8009bbc:	4659      	mov	r1, fp
 8009bbe:	f7f6 fd1b 	bl	80005f8 <__aeabi_dmul>
 8009bc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009bc6:	f7f6 fb61 	bl	800028c <__adddf3>
 8009bca:	4682      	mov	sl, r0
 8009bcc:	468b      	mov	fp, r1
 8009bce:	e770      	b.n	8009ab2 <_strtod_l+0xa62>
 8009bd0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009bd4:	e7e0      	b.n	8009b98 <_strtod_l+0xb48>
 8009bd6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c10 <_strtod_l+0xbc0>)
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	f7f6 ff7e 	bl	8000adc <__aeabi_dcmplt>
 8009be0:	e798      	b.n	8009b14 <_strtod_l+0xac4>
 8009be2:	2300      	movs	r3, #0
 8009be4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009be6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009be8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bea:	6013      	str	r3, [r2, #0]
 8009bec:	f7ff ba6d 	b.w	80090ca <_strtod_l+0x7a>
 8009bf0:	2a65      	cmp	r2, #101	@ 0x65
 8009bf2:	f43f ab66 	beq.w	80092c2 <_strtod_l+0x272>
 8009bf6:	2a45      	cmp	r2, #69	@ 0x45
 8009bf8:	f43f ab63 	beq.w	80092c2 <_strtod_l+0x272>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	f7ff bb9e 	b.w	800933e <_strtod_l+0x2ee>
 8009c02:	bf00      	nop
 8009c04:	f3af 8000 	nop.w
 8009c08:	ffc00000 	.word	0xffc00000
 8009c0c:	41dfffff 	.word	0x41dfffff
 8009c10:	94a03595 	.word	0x94a03595
 8009c14:	3fcfffff 	.word	0x3fcfffff

08009c18 <_strtod_r>:
 8009c18:	4b01      	ldr	r3, [pc, #4]	@ (8009c20 <_strtod_r+0x8>)
 8009c1a:	f7ff ba19 	b.w	8009050 <_strtod_l>
 8009c1e:	bf00      	nop
 8009c20:	20000074 	.word	0x20000074

08009c24 <_strtol_l.constprop.0>:
 8009c24:	2b24      	cmp	r3, #36	@ 0x24
 8009c26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c2a:	4686      	mov	lr, r0
 8009c2c:	4690      	mov	r8, r2
 8009c2e:	d801      	bhi.n	8009c34 <_strtol_l.constprop.0+0x10>
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d106      	bne.n	8009c42 <_strtol_l.constprop.0+0x1e>
 8009c34:	f7fd fdbc 	bl	80077b0 <__errno>
 8009c38:	2316      	movs	r3, #22
 8009c3a:	6003      	str	r3, [r0, #0]
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c42:	4834      	ldr	r0, [pc, #208]	@ (8009d14 <_strtol_l.constprop.0+0xf0>)
 8009c44:	460d      	mov	r5, r1
 8009c46:	462a      	mov	r2, r5
 8009c48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c4c:	5d06      	ldrb	r6, [r0, r4]
 8009c4e:	f016 0608 	ands.w	r6, r6, #8
 8009c52:	d1f8      	bne.n	8009c46 <_strtol_l.constprop.0+0x22>
 8009c54:	2c2d      	cmp	r4, #45	@ 0x2d
 8009c56:	d12d      	bne.n	8009cb4 <_strtol_l.constprop.0+0x90>
 8009c58:	782c      	ldrb	r4, [r5, #0]
 8009c5a:	2601      	movs	r6, #1
 8009c5c:	1c95      	adds	r5, r2, #2
 8009c5e:	f033 0210 	bics.w	r2, r3, #16
 8009c62:	d109      	bne.n	8009c78 <_strtol_l.constprop.0+0x54>
 8009c64:	2c30      	cmp	r4, #48	@ 0x30
 8009c66:	d12a      	bne.n	8009cbe <_strtol_l.constprop.0+0x9a>
 8009c68:	782a      	ldrb	r2, [r5, #0]
 8009c6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009c6e:	2a58      	cmp	r2, #88	@ 0x58
 8009c70:	d125      	bne.n	8009cbe <_strtol_l.constprop.0+0x9a>
 8009c72:	786c      	ldrb	r4, [r5, #1]
 8009c74:	2310      	movs	r3, #16
 8009c76:	3502      	adds	r5, #2
 8009c78:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009c7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009c80:	2200      	movs	r2, #0
 8009c82:	fbbc f9f3 	udiv	r9, ip, r3
 8009c86:	4610      	mov	r0, r2
 8009c88:	fb03 ca19 	mls	sl, r3, r9, ip
 8009c8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009c90:	2f09      	cmp	r7, #9
 8009c92:	d81b      	bhi.n	8009ccc <_strtol_l.constprop.0+0xa8>
 8009c94:	463c      	mov	r4, r7
 8009c96:	42a3      	cmp	r3, r4
 8009c98:	dd27      	ble.n	8009cea <_strtol_l.constprop.0+0xc6>
 8009c9a:	1c57      	adds	r7, r2, #1
 8009c9c:	d007      	beq.n	8009cae <_strtol_l.constprop.0+0x8a>
 8009c9e:	4581      	cmp	r9, r0
 8009ca0:	d320      	bcc.n	8009ce4 <_strtol_l.constprop.0+0xc0>
 8009ca2:	d101      	bne.n	8009ca8 <_strtol_l.constprop.0+0x84>
 8009ca4:	45a2      	cmp	sl, r4
 8009ca6:	db1d      	blt.n	8009ce4 <_strtol_l.constprop.0+0xc0>
 8009ca8:	fb00 4003 	mla	r0, r0, r3, r4
 8009cac:	2201      	movs	r2, #1
 8009cae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cb2:	e7eb      	b.n	8009c8c <_strtol_l.constprop.0+0x68>
 8009cb4:	2c2b      	cmp	r4, #43	@ 0x2b
 8009cb6:	bf04      	itt	eq
 8009cb8:	782c      	ldrbeq	r4, [r5, #0]
 8009cba:	1c95      	addeq	r5, r2, #2
 8009cbc:	e7cf      	b.n	8009c5e <_strtol_l.constprop.0+0x3a>
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1da      	bne.n	8009c78 <_strtol_l.constprop.0+0x54>
 8009cc2:	2c30      	cmp	r4, #48	@ 0x30
 8009cc4:	bf0c      	ite	eq
 8009cc6:	2308      	moveq	r3, #8
 8009cc8:	230a      	movne	r3, #10
 8009cca:	e7d5      	b.n	8009c78 <_strtol_l.constprop.0+0x54>
 8009ccc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009cd0:	2f19      	cmp	r7, #25
 8009cd2:	d801      	bhi.n	8009cd8 <_strtol_l.constprop.0+0xb4>
 8009cd4:	3c37      	subs	r4, #55	@ 0x37
 8009cd6:	e7de      	b.n	8009c96 <_strtol_l.constprop.0+0x72>
 8009cd8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009cdc:	2f19      	cmp	r7, #25
 8009cde:	d804      	bhi.n	8009cea <_strtol_l.constprop.0+0xc6>
 8009ce0:	3c57      	subs	r4, #87	@ 0x57
 8009ce2:	e7d8      	b.n	8009c96 <_strtol_l.constprop.0+0x72>
 8009ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce8:	e7e1      	b.n	8009cae <_strtol_l.constprop.0+0x8a>
 8009cea:	1c53      	adds	r3, r2, #1
 8009cec:	d108      	bne.n	8009d00 <_strtol_l.constprop.0+0xdc>
 8009cee:	2322      	movs	r3, #34	@ 0x22
 8009cf0:	f8ce 3000 	str.w	r3, [lr]
 8009cf4:	4660      	mov	r0, ip
 8009cf6:	f1b8 0f00 	cmp.w	r8, #0
 8009cfa:	d0a0      	beq.n	8009c3e <_strtol_l.constprop.0+0x1a>
 8009cfc:	1e69      	subs	r1, r5, #1
 8009cfe:	e006      	b.n	8009d0e <_strtol_l.constprop.0+0xea>
 8009d00:	b106      	cbz	r6, 8009d04 <_strtol_l.constprop.0+0xe0>
 8009d02:	4240      	negs	r0, r0
 8009d04:	f1b8 0f00 	cmp.w	r8, #0
 8009d08:	d099      	beq.n	8009c3e <_strtol_l.constprop.0+0x1a>
 8009d0a:	2a00      	cmp	r2, #0
 8009d0c:	d1f6      	bne.n	8009cfc <_strtol_l.constprop.0+0xd8>
 8009d0e:	f8c8 1000 	str.w	r1, [r8]
 8009d12:	e794      	b.n	8009c3e <_strtol_l.constprop.0+0x1a>
 8009d14:	0800b891 	.word	0x0800b891

08009d18 <_strtol_r>:
 8009d18:	f7ff bf84 	b.w	8009c24 <_strtol_l.constprop.0>

08009d1c <__ssputs_r>:
 8009d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d20:	688e      	ldr	r6, [r1, #8]
 8009d22:	461f      	mov	r7, r3
 8009d24:	42be      	cmp	r6, r7
 8009d26:	680b      	ldr	r3, [r1, #0]
 8009d28:	4682      	mov	sl, r0
 8009d2a:	460c      	mov	r4, r1
 8009d2c:	4690      	mov	r8, r2
 8009d2e:	d82d      	bhi.n	8009d8c <__ssputs_r+0x70>
 8009d30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009d38:	d026      	beq.n	8009d88 <__ssputs_r+0x6c>
 8009d3a:	6965      	ldr	r5, [r4, #20]
 8009d3c:	6909      	ldr	r1, [r1, #16]
 8009d3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d42:	eba3 0901 	sub.w	r9, r3, r1
 8009d46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d4a:	1c7b      	adds	r3, r7, #1
 8009d4c:	444b      	add	r3, r9
 8009d4e:	106d      	asrs	r5, r5, #1
 8009d50:	429d      	cmp	r5, r3
 8009d52:	bf38      	it	cc
 8009d54:	461d      	movcc	r5, r3
 8009d56:	0553      	lsls	r3, r2, #21
 8009d58:	d527      	bpl.n	8009daa <__ssputs_r+0x8e>
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	f7fe fc1c 	bl	8008598 <_malloc_r>
 8009d60:	4606      	mov	r6, r0
 8009d62:	b360      	cbz	r0, 8009dbe <__ssputs_r+0xa2>
 8009d64:	6921      	ldr	r1, [r4, #16]
 8009d66:	464a      	mov	r2, r9
 8009d68:	f000 fbee 	bl	800a548 <memcpy>
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d76:	81a3      	strh	r3, [r4, #12]
 8009d78:	6126      	str	r6, [r4, #16]
 8009d7a:	6165      	str	r5, [r4, #20]
 8009d7c:	444e      	add	r6, r9
 8009d7e:	eba5 0509 	sub.w	r5, r5, r9
 8009d82:	6026      	str	r6, [r4, #0]
 8009d84:	60a5      	str	r5, [r4, #8]
 8009d86:	463e      	mov	r6, r7
 8009d88:	42be      	cmp	r6, r7
 8009d8a:	d900      	bls.n	8009d8e <__ssputs_r+0x72>
 8009d8c:	463e      	mov	r6, r7
 8009d8e:	6820      	ldr	r0, [r4, #0]
 8009d90:	4632      	mov	r2, r6
 8009d92:	4641      	mov	r1, r8
 8009d94:	f000 fb9c 	bl	800a4d0 <memmove>
 8009d98:	68a3      	ldr	r3, [r4, #8]
 8009d9a:	1b9b      	subs	r3, r3, r6
 8009d9c:	60a3      	str	r3, [r4, #8]
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	4433      	add	r3, r6
 8009da2:	6023      	str	r3, [r4, #0]
 8009da4:	2000      	movs	r0, #0
 8009da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009daa:	462a      	mov	r2, r5
 8009dac:	f000 ff61 	bl	800ac72 <_realloc_r>
 8009db0:	4606      	mov	r6, r0
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d1e0      	bne.n	8009d78 <__ssputs_r+0x5c>
 8009db6:	6921      	ldr	r1, [r4, #16]
 8009db8:	4650      	mov	r0, sl
 8009dba:	f7fe fb79 	bl	80084b0 <_free_r>
 8009dbe:	230c      	movs	r3, #12
 8009dc0:	f8ca 3000 	str.w	r3, [sl]
 8009dc4:	89a3      	ldrh	r3, [r4, #12]
 8009dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dca:	81a3      	strh	r3, [r4, #12]
 8009dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd0:	e7e9      	b.n	8009da6 <__ssputs_r+0x8a>
	...

08009dd4 <_svfiprintf_r>:
 8009dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd8:	4698      	mov	r8, r3
 8009dda:	898b      	ldrh	r3, [r1, #12]
 8009ddc:	061b      	lsls	r3, r3, #24
 8009dde:	b09d      	sub	sp, #116	@ 0x74
 8009de0:	4607      	mov	r7, r0
 8009de2:	460d      	mov	r5, r1
 8009de4:	4614      	mov	r4, r2
 8009de6:	d510      	bpl.n	8009e0a <_svfiprintf_r+0x36>
 8009de8:	690b      	ldr	r3, [r1, #16]
 8009dea:	b973      	cbnz	r3, 8009e0a <_svfiprintf_r+0x36>
 8009dec:	2140      	movs	r1, #64	@ 0x40
 8009dee:	f7fe fbd3 	bl	8008598 <_malloc_r>
 8009df2:	6028      	str	r0, [r5, #0]
 8009df4:	6128      	str	r0, [r5, #16]
 8009df6:	b930      	cbnz	r0, 8009e06 <_svfiprintf_r+0x32>
 8009df8:	230c      	movs	r3, #12
 8009dfa:	603b      	str	r3, [r7, #0]
 8009dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009e00:	b01d      	add	sp, #116	@ 0x74
 8009e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e06:	2340      	movs	r3, #64	@ 0x40
 8009e08:	616b      	str	r3, [r5, #20]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e0e:	2320      	movs	r3, #32
 8009e10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e18:	2330      	movs	r3, #48	@ 0x30
 8009e1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009fb8 <_svfiprintf_r+0x1e4>
 8009e1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e22:	f04f 0901 	mov.w	r9, #1
 8009e26:	4623      	mov	r3, r4
 8009e28:	469a      	mov	sl, r3
 8009e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e2e:	b10a      	cbz	r2, 8009e34 <_svfiprintf_r+0x60>
 8009e30:	2a25      	cmp	r2, #37	@ 0x25
 8009e32:	d1f9      	bne.n	8009e28 <_svfiprintf_r+0x54>
 8009e34:	ebba 0b04 	subs.w	fp, sl, r4
 8009e38:	d00b      	beq.n	8009e52 <_svfiprintf_r+0x7e>
 8009e3a:	465b      	mov	r3, fp
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	4629      	mov	r1, r5
 8009e40:	4638      	mov	r0, r7
 8009e42:	f7ff ff6b 	bl	8009d1c <__ssputs_r>
 8009e46:	3001      	adds	r0, #1
 8009e48:	f000 80a7 	beq.w	8009f9a <_svfiprintf_r+0x1c6>
 8009e4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e4e:	445a      	add	r2, fp
 8009e50:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e52:	f89a 3000 	ldrb.w	r3, [sl]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	f000 809f 	beq.w	8009f9a <_svfiprintf_r+0x1c6>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e66:	f10a 0a01 	add.w	sl, sl, #1
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	9307      	str	r3, [sp, #28]
 8009e6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e72:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e74:	4654      	mov	r4, sl
 8009e76:	2205      	movs	r2, #5
 8009e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e7c:	484e      	ldr	r0, [pc, #312]	@ (8009fb8 <_svfiprintf_r+0x1e4>)
 8009e7e:	f7f6 f9a7 	bl	80001d0 <memchr>
 8009e82:	9a04      	ldr	r2, [sp, #16]
 8009e84:	b9d8      	cbnz	r0, 8009ebe <_svfiprintf_r+0xea>
 8009e86:	06d0      	lsls	r0, r2, #27
 8009e88:	bf44      	itt	mi
 8009e8a:	2320      	movmi	r3, #32
 8009e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e90:	0711      	lsls	r1, r2, #28
 8009e92:	bf44      	itt	mi
 8009e94:	232b      	movmi	r3, #43	@ 0x2b
 8009e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ea0:	d015      	beq.n	8009ece <_svfiprintf_r+0xfa>
 8009ea2:	9a07      	ldr	r2, [sp, #28]
 8009ea4:	4654      	mov	r4, sl
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	f04f 0c0a 	mov.w	ip, #10
 8009eac:	4621      	mov	r1, r4
 8009eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eb2:	3b30      	subs	r3, #48	@ 0x30
 8009eb4:	2b09      	cmp	r3, #9
 8009eb6:	d94b      	bls.n	8009f50 <_svfiprintf_r+0x17c>
 8009eb8:	b1b0      	cbz	r0, 8009ee8 <_svfiprintf_r+0x114>
 8009eba:	9207      	str	r2, [sp, #28]
 8009ebc:	e014      	b.n	8009ee8 <_svfiprintf_r+0x114>
 8009ebe:	eba0 0308 	sub.w	r3, r0, r8
 8009ec2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	9304      	str	r3, [sp, #16]
 8009eca:	46a2      	mov	sl, r4
 8009ecc:	e7d2      	b.n	8009e74 <_svfiprintf_r+0xa0>
 8009ece:	9b03      	ldr	r3, [sp, #12]
 8009ed0:	1d19      	adds	r1, r3, #4
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	9103      	str	r1, [sp, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	bfbb      	ittet	lt
 8009eda:	425b      	neglt	r3, r3
 8009edc:	f042 0202 	orrlt.w	r2, r2, #2
 8009ee0:	9307      	strge	r3, [sp, #28]
 8009ee2:	9307      	strlt	r3, [sp, #28]
 8009ee4:	bfb8      	it	lt
 8009ee6:	9204      	strlt	r2, [sp, #16]
 8009ee8:	7823      	ldrb	r3, [r4, #0]
 8009eea:	2b2e      	cmp	r3, #46	@ 0x2e
 8009eec:	d10a      	bne.n	8009f04 <_svfiprintf_r+0x130>
 8009eee:	7863      	ldrb	r3, [r4, #1]
 8009ef0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ef2:	d132      	bne.n	8009f5a <_svfiprintf_r+0x186>
 8009ef4:	9b03      	ldr	r3, [sp, #12]
 8009ef6:	1d1a      	adds	r2, r3, #4
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	9203      	str	r2, [sp, #12]
 8009efc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f00:	3402      	adds	r4, #2
 8009f02:	9305      	str	r3, [sp, #20]
 8009f04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009fc8 <_svfiprintf_r+0x1f4>
 8009f08:	7821      	ldrb	r1, [r4, #0]
 8009f0a:	2203      	movs	r2, #3
 8009f0c:	4650      	mov	r0, sl
 8009f0e:	f7f6 f95f 	bl	80001d0 <memchr>
 8009f12:	b138      	cbz	r0, 8009f24 <_svfiprintf_r+0x150>
 8009f14:	9b04      	ldr	r3, [sp, #16]
 8009f16:	eba0 000a 	sub.w	r0, r0, sl
 8009f1a:	2240      	movs	r2, #64	@ 0x40
 8009f1c:	4082      	lsls	r2, r0
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	3401      	adds	r4, #1
 8009f22:	9304      	str	r3, [sp, #16]
 8009f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f28:	4824      	ldr	r0, [pc, #144]	@ (8009fbc <_svfiprintf_r+0x1e8>)
 8009f2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f2e:	2206      	movs	r2, #6
 8009f30:	f7f6 f94e 	bl	80001d0 <memchr>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d036      	beq.n	8009fa6 <_svfiprintf_r+0x1d2>
 8009f38:	4b21      	ldr	r3, [pc, #132]	@ (8009fc0 <_svfiprintf_r+0x1ec>)
 8009f3a:	bb1b      	cbnz	r3, 8009f84 <_svfiprintf_r+0x1b0>
 8009f3c:	9b03      	ldr	r3, [sp, #12]
 8009f3e:	3307      	adds	r3, #7
 8009f40:	f023 0307 	bic.w	r3, r3, #7
 8009f44:	3308      	adds	r3, #8
 8009f46:	9303      	str	r3, [sp, #12]
 8009f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f4a:	4433      	add	r3, r6
 8009f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f4e:	e76a      	b.n	8009e26 <_svfiprintf_r+0x52>
 8009f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f54:	460c      	mov	r4, r1
 8009f56:	2001      	movs	r0, #1
 8009f58:	e7a8      	b.n	8009eac <_svfiprintf_r+0xd8>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	3401      	adds	r4, #1
 8009f5e:	9305      	str	r3, [sp, #20]
 8009f60:	4619      	mov	r1, r3
 8009f62:	f04f 0c0a 	mov.w	ip, #10
 8009f66:	4620      	mov	r0, r4
 8009f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f6c:	3a30      	subs	r2, #48	@ 0x30
 8009f6e:	2a09      	cmp	r2, #9
 8009f70:	d903      	bls.n	8009f7a <_svfiprintf_r+0x1a6>
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d0c6      	beq.n	8009f04 <_svfiprintf_r+0x130>
 8009f76:	9105      	str	r1, [sp, #20]
 8009f78:	e7c4      	b.n	8009f04 <_svfiprintf_r+0x130>
 8009f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f7e:	4604      	mov	r4, r0
 8009f80:	2301      	movs	r3, #1
 8009f82:	e7f0      	b.n	8009f66 <_svfiprintf_r+0x192>
 8009f84:	ab03      	add	r3, sp, #12
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	462a      	mov	r2, r5
 8009f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8009fc4 <_svfiprintf_r+0x1f0>)
 8009f8c:	a904      	add	r1, sp, #16
 8009f8e:	4638      	mov	r0, r7
 8009f90:	f7fc fcb8 	bl	8006904 <_printf_float>
 8009f94:	1c42      	adds	r2, r0, #1
 8009f96:	4606      	mov	r6, r0
 8009f98:	d1d6      	bne.n	8009f48 <_svfiprintf_r+0x174>
 8009f9a:	89ab      	ldrh	r3, [r5, #12]
 8009f9c:	065b      	lsls	r3, r3, #25
 8009f9e:	f53f af2d 	bmi.w	8009dfc <_svfiprintf_r+0x28>
 8009fa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fa4:	e72c      	b.n	8009e00 <_svfiprintf_r+0x2c>
 8009fa6:	ab03      	add	r3, sp, #12
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	462a      	mov	r2, r5
 8009fac:	4b05      	ldr	r3, [pc, #20]	@ (8009fc4 <_svfiprintf_r+0x1f0>)
 8009fae:	a904      	add	r1, sp, #16
 8009fb0:	4638      	mov	r0, r7
 8009fb2:	f7fc ff3f 	bl	8006e34 <_printf_i>
 8009fb6:	e7ed      	b.n	8009f94 <_svfiprintf_r+0x1c0>
 8009fb8:	0800b991 	.word	0x0800b991
 8009fbc:	0800b99b 	.word	0x0800b99b
 8009fc0:	08006905 	.word	0x08006905
 8009fc4:	08009d1d 	.word	0x08009d1d
 8009fc8:	0800b997 	.word	0x0800b997

08009fcc <__sfputc_r>:
 8009fcc:	6893      	ldr	r3, [r2, #8]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	b410      	push	{r4}
 8009fd4:	6093      	str	r3, [r2, #8]
 8009fd6:	da08      	bge.n	8009fea <__sfputc_r+0x1e>
 8009fd8:	6994      	ldr	r4, [r2, #24]
 8009fda:	42a3      	cmp	r3, r4
 8009fdc:	db01      	blt.n	8009fe2 <__sfputc_r+0x16>
 8009fde:	290a      	cmp	r1, #10
 8009fe0:	d103      	bne.n	8009fea <__sfputc_r+0x1e>
 8009fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fe6:	f000 b9df 	b.w	800a3a8 <__swbuf_r>
 8009fea:	6813      	ldr	r3, [r2, #0]
 8009fec:	1c58      	adds	r0, r3, #1
 8009fee:	6010      	str	r0, [r2, #0]
 8009ff0:	7019      	strb	r1, [r3, #0]
 8009ff2:	4608      	mov	r0, r1
 8009ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ff8:	4770      	bx	lr

08009ffa <__sfputs_r>:
 8009ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffc:	4606      	mov	r6, r0
 8009ffe:	460f      	mov	r7, r1
 800a000:	4614      	mov	r4, r2
 800a002:	18d5      	adds	r5, r2, r3
 800a004:	42ac      	cmp	r4, r5
 800a006:	d101      	bne.n	800a00c <__sfputs_r+0x12>
 800a008:	2000      	movs	r0, #0
 800a00a:	e007      	b.n	800a01c <__sfputs_r+0x22>
 800a00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a010:	463a      	mov	r2, r7
 800a012:	4630      	mov	r0, r6
 800a014:	f7ff ffda 	bl	8009fcc <__sfputc_r>
 800a018:	1c43      	adds	r3, r0, #1
 800a01a:	d1f3      	bne.n	800a004 <__sfputs_r+0xa>
 800a01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a020 <_vfiprintf_r>:
 800a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a024:	460d      	mov	r5, r1
 800a026:	b09d      	sub	sp, #116	@ 0x74
 800a028:	4614      	mov	r4, r2
 800a02a:	4698      	mov	r8, r3
 800a02c:	4606      	mov	r6, r0
 800a02e:	b118      	cbz	r0, 800a038 <_vfiprintf_r+0x18>
 800a030:	6a03      	ldr	r3, [r0, #32]
 800a032:	b90b      	cbnz	r3, 800a038 <_vfiprintf_r+0x18>
 800a034:	f7fd fabe 	bl	80075b4 <__sinit>
 800a038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a03a:	07d9      	lsls	r1, r3, #31
 800a03c:	d405      	bmi.n	800a04a <_vfiprintf_r+0x2a>
 800a03e:	89ab      	ldrh	r3, [r5, #12]
 800a040:	059a      	lsls	r2, r3, #22
 800a042:	d402      	bmi.n	800a04a <_vfiprintf_r+0x2a>
 800a044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a046:	f7fd fbde 	bl	8007806 <__retarget_lock_acquire_recursive>
 800a04a:	89ab      	ldrh	r3, [r5, #12]
 800a04c:	071b      	lsls	r3, r3, #28
 800a04e:	d501      	bpl.n	800a054 <_vfiprintf_r+0x34>
 800a050:	692b      	ldr	r3, [r5, #16]
 800a052:	b99b      	cbnz	r3, 800a07c <_vfiprintf_r+0x5c>
 800a054:	4629      	mov	r1, r5
 800a056:	4630      	mov	r0, r6
 800a058:	f000 f9e4 	bl	800a424 <__swsetup_r>
 800a05c:	b170      	cbz	r0, 800a07c <_vfiprintf_r+0x5c>
 800a05e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a060:	07dc      	lsls	r4, r3, #31
 800a062:	d504      	bpl.n	800a06e <_vfiprintf_r+0x4e>
 800a064:	f04f 30ff 	mov.w	r0, #4294967295
 800a068:	b01d      	add	sp, #116	@ 0x74
 800a06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06e:	89ab      	ldrh	r3, [r5, #12]
 800a070:	0598      	lsls	r0, r3, #22
 800a072:	d4f7      	bmi.n	800a064 <_vfiprintf_r+0x44>
 800a074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a076:	f7fd fbc7 	bl	8007808 <__retarget_lock_release_recursive>
 800a07a:	e7f3      	b.n	800a064 <_vfiprintf_r+0x44>
 800a07c:	2300      	movs	r3, #0
 800a07e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a080:	2320      	movs	r3, #32
 800a082:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a086:	f8cd 800c 	str.w	r8, [sp, #12]
 800a08a:	2330      	movs	r3, #48	@ 0x30
 800a08c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a23c <_vfiprintf_r+0x21c>
 800a090:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a094:	f04f 0901 	mov.w	r9, #1
 800a098:	4623      	mov	r3, r4
 800a09a:	469a      	mov	sl, r3
 800a09c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0a0:	b10a      	cbz	r2, 800a0a6 <_vfiprintf_r+0x86>
 800a0a2:	2a25      	cmp	r2, #37	@ 0x25
 800a0a4:	d1f9      	bne.n	800a09a <_vfiprintf_r+0x7a>
 800a0a6:	ebba 0b04 	subs.w	fp, sl, r4
 800a0aa:	d00b      	beq.n	800a0c4 <_vfiprintf_r+0xa4>
 800a0ac:	465b      	mov	r3, fp
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f7ff ffa1 	bl	8009ffa <__sfputs_r>
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	f000 80a7 	beq.w	800a20c <_vfiprintf_r+0x1ec>
 800a0be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0c0:	445a      	add	r2, fp
 800a0c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 809f 	beq.w	800a20c <_vfiprintf_r+0x1ec>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0d8:	f10a 0a01 	add.w	sl, sl, #1
 800a0dc:	9304      	str	r3, [sp, #16]
 800a0de:	9307      	str	r3, [sp, #28]
 800a0e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0e6:	4654      	mov	r4, sl
 800a0e8:	2205      	movs	r2, #5
 800a0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ee:	4853      	ldr	r0, [pc, #332]	@ (800a23c <_vfiprintf_r+0x21c>)
 800a0f0:	f7f6 f86e 	bl	80001d0 <memchr>
 800a0f4:	9a04      	ldr	r2, [sp, #16]
 800a0f6:	b9d8      	cbnz	r0, 800a130 <_vfiprintf_r+0x110>
 800a0f8:	06d1      	lsls	r1, r2, #27
 800a0fa:	bf44      	itt	mi
 800a0fc:	2320      	movmi	r3, #32
 800a0fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a102:	0713      	lsls	r3, r2, #28
 800a104:	bf44      	itt	mi
 800a106:	232b      	movmi	r3, #43	@ 0x2b
 800a108:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a10c:	f89a 3000 	ldrb.w	r3, [sl]
 800a110:	2b2a      	cmp	r3, #42	@ 0x2a
 800a112:	d015      	beq.n	800a140 <_vfiprintf_r+0x120>
 800a114:	9a07      	ldr	r2, [sp, #28]
 800a116:	4654      	mov	r4, sl
 800a118:	2000      	movs	r0, #0
 800a11a:	f04f 0c0a 	mov.w	ip, #10
 800a11e:	4621      	mov	r1, r4
 800a120:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a124:	3b30      	subs	r3, #48	@ 0x30
 800a126:	2b09      	cmp	r3, #9
 800a128:	d94b      	bls.n	800a1c2 <_vfiprintf_r+0x1a2>
 800a12a:	b1b0      	cbz	r0, 800a15a <_vfiprintf_r+0x13a>
 800a12c:	9207      	str	r2, [sp, #28]
 800a12e:	e014      	b.n	800a15a <_vfiprintf_r+0x13a>
 800a130:	eba0 0308 	sub.w	r3, r0, r8
 800a134:	fa09 f303 	lsl.w	r3, r9, r3
 800a138:	4313      	orrs	r3, r2
 800a13a:	9304      	str	r3, [sp, #16]
 800a13c:	46a2      	mov	sl, r4
 800a13e:	e7d2      	b.n	800a0e6 <_vfiprintf_r+0xc6>
 800a140:	9b03      	ldr	r3, [sp, #12]
 800a142:	1d19      	adds	r1, r3, #4
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	9103      	str	r1, [sp, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	bfbb      	ittet	lt
 800a14c:	425b      	neglt	r3, r3
 800a14e:	f042 0202 	orrlt.w	r2, r2, #2
 800a152:	9307      	strge	r3, [sp, #28]
 800a154:	9307      	strlt	r3, [sp, #28]
 800a156:	bfb8      	it	lt
 800a158:	9204      	strlt	r2, [sp, #16]
 800a15a:	7823      	ldrb	r3, [r4, #0]
 800a15c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a15e:	d10a      	bne.n	800a176 <_vfiprintf_r+0x156>
 800a160:	7863      	ldrb	r3, [r4, #1]
 800a162:	2b2a      	cmp	r3, #42	@ 0x2a
 800a164:	d132      	bne.n	800a1cc <_vfiprintf_r+0x1ac>
 800a166:	9b03      	ldr	r3, [sp, #12]
 800a168:	1d1a      	adds	r2, r3, #4
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	9203      	str	r2, [sp, #12]
 800a16e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a172:	3402      	adds	r4, #2
 800a174:	9305      	str	r3, [sp, #20]
 800a176:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a24c <_vfiprintf_r+0x22c>
 800a17a:	7821      	ldrb	r1, [r4, #0]
 800a17c:	2203      	movs	r2, #3
 800a17e:	4650      	mov	r0, sl
 800a180:	f7f6 f826 	bl	80001d0 <memchr>
 800a184:	b138      	cbz	r0, 800a196 <_vfiprintf_r+0x176>
 800a186:	9b04      	ldr	r3, [sp, #16]
 800a188:	eba0 000a 	sub.w	r0, r0, sl
 800a18c:	2240      	movs	r2, #64	@ 0x40
 800a18e:	4082      	lsls	r2, r0
 800a190:	4313      	orrs	r3, r2
 800a192:	3401      	adds	r4, #1
 800a194:	9304      	str	r3, [sp, #16]
 800a196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a19a:	4829      	ldr	r0, [pc, #164]	@ (800a240 <_vfiprintf_r+0x220>)
 800a19c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a1a0:	2206      	movs	r2, #6
 800a1a2:	f7f6 f815 	bl	80001d0 <memchr>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	d03f      	beq.n	800a22a <_vfiprintf_r+0x20a>
 800a1aa:	4b26      	ldr	r3, [pc, #152]	@ (800a244 <_vfiprintf_r+0x224>)
 800a1ac:	bb1b      	cbnz	r3, 800a1f6 <_vfiprintf_r+0x1d6>
 800a1ae:	9b03      	ldr	r3, [sp, #12]
 800a1b0:	3307      	adds	r3, #7
 800a1b2:	f023 0307 	bic.w	r3, r3, #7
 800a1b6:	3308      	adds	r3, #8
 800a1b8:	9303      	str	r3, [sp, #12]
 800a1ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1bc:	443b      	add	r3, r7
 800a1be:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1c0:	e76a      	b.n	800a098 <_vfiprintf_r+0x78>
 800a1c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	e7a8      	b.n	800a11e <_vfiprintf_r+0xfe>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	3401      	adds	r4, #1
 800a1d0:	9305      	str	r3, [sp, #20]
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	f04f 0c0a 	mov.w	ip, #10
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1de:	3a30      	subs	r2, #48	@ 0x30
 800a1e0:	2a09      	cmp	r2, #9
 800a1e2:	d903      	bls.n	800a1ec <_vfiprintf_r+0x1cc>
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d0c6      	beq.n	800a176 <_vfiprintf_r+0x156>
 800a1e8:	9105      	str	r1, [sp, #20]
 800a1ea:	e7c4      	b.n	800a176 <_vfiprintf_r+0x156>
 800a1ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e7f0      	b.n	800a1d8 <_vfiprintf_r+0x1b8>
 800a1f6:	ab03      	add	r3, sp, #12
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	4b12      	ldr	r3, [pc, #72]	@ (800a248 <_vfiprintf_r+0x228>)
 800a1fe:	a904      	add	r1, sp, #16
 800a200:	4630      	mov	r0, r6
 800a202:	f7fc fb7f 	bl	8006904 <_printf_float>
 800a206:	4607      	mov	r7, r0
 800a208:	1c78      	adds	r0, r7, #1
 800a20a:	d1d6      	bne.n	800a1ba <_vfiprintf_r+0x19a>
 800a20c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a20e:	07d9      	lsls	r1, r3, #31
 800a210:	d405      	bmi.n	800a21e <_vfiprintf_r+0x1fe>
 800a212:	89ab      	ldrh	r3, [r5, #12]
 800a214:	059a      	lsls	r2, r3, #22
 800a216:	d402      	bmi.n	800a21e <_vfiprintf_r+0x1fe>
 800a218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a21a:	f7fd faf5 	bl	8007808 <__retarget_lock_release_recursive>
 800a21e:	89ab      	ldrh	r3, [r5, #12]
 800a220:	065b      	lsls	r3, r3, #25
 800a222:	f53f af1f 	bmi.w	800a064 <_vfiprintf_r+0x44>
 800a226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a228:	e71e      	b.n	800a068 <_vfiprintf_r+0x48>
 800a22a:	ab03      	add	r3, sp, #12
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	462a      	mov	r2, r5
 800a230:	4b05      	ldr	r3, [pc, #20]	@ (800a248 <_vfiprintf_r+0x228>)
 800a232:	a904      	add	r1, sp, #16
 800a234:	4630      	mov	r0, r6
 800a236:	f7fc fdfd 	bl	8006e34 <_printf_i>
 800a23a:	e7e4      	b.n	800a206 <_vfiprintf_r+0x1e6>
 800a23c:	0800b991 	.word	0x0800b991
 800a240:	0800b99b 	.word	0x0800b99b
 800a244:	08006905 	.word	0x08006905
 800a248:	08009ffb 	.word	0x08009ffb
 800a24c:	0800b997 	.word	0x0800b997

0800a250 <__sflush_r>:
 800a250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a258:	0716      	lsls	r6, r2, #28
 800a25a:	4605      	mov	r5, r0
 800a25c:	460c      	mov	r4, r1
 800a25e:	d454      	bmi.n	800a30a <__sflush_r+0xba>
 800a260:	684b      	ldr	r3, [r1, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	dc02      	bgt.n	800a26c <__sflush_r+0x1c>
 800a266:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a268:	2b00      	cmp	r3, #0
 800a26a:	dd48      	ble.n	800a2fe <__sflush_r+0xae>
 800a26c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a26e:	2e00      	cmp	r6, #0
 800a270:	d045      	beq.n	800a2fe <__sflush_r+0xae>
 800a272:	2300      	movs	r3, #0
 800a274:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a278:	682f      	ldr	r7, [r5, #0]
 800a27a:	6a21      	ldr	r1, [r4, #32]
 800a27c:	602b      	str	r3, [r5, #0]
 800a27e:	d030      	beq.n	800a2e2 <__sflush_r+0x92>
 800a280:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a282:	89a3      	ldrh	r3, [r4, #12]
 800a284:	0759      	lsls	r1, r3, #29
 800a286:	d505      	bpl.n	800a294 <__sflush_r+0x44>
 800a288:	6863      	ldr	r3, [r4, #4]
 800a28a:	1ad2      	subs	r2, r2, r3
 800a28c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a28e:	b10b      	cbz	r3, 800a294 <__sflush_r+0x44>
 800a290:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a292:	1ad2      	subs	r2, r2, r3
 800a294:	2300      	movs	r3, #0
 800a296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a298:	6a21      	ldr	r1, [r4, #32]
 800a29a:	4628      	mov	r0, r5
 800a29c:	47b0      	blx	r6
 800a29e:	1c43      	adds	r3, r0, #1
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	d106      	bne.n	800a2b2 <__sflush_r+0x62>
 800a2a4:	6829      	ldr	r1, [r5, #0]
 800a2a6:	291d      	cmp	r1, #29
 800a2a8:	d82b      	bhi.n	800a302 <__sflush_r+0xb2>
 800a2aa:	4a2a      	ldr	r2, [pc, #168]	@ (800a354 <__sflush_r+0x104>)
 800a2ac:	410a      	asrs	r2, r1
 800a2ae:	07d6      	lsls	r6, r2, #31
 800a2b0:	d427      	bmi.n	800a302 <__sflush_r+0xb2>
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	6062      	str	r2, [r4, #4]
 800a2b6:	04d9      	lsls	r1, r3, #19
 800a2b8:	6922      	ldr	r2, [r4, #16]
 800a2ba:	6022      	str	r2, [r4, #0]
 800a2bc:	d504      	bpl.n	800a2c8 <__sflush_r+0x78>
 800a2be:	1c42      	adds	r2, r0, #1
 800a2c0:	d101      	bne.n	800a2c6 <__sflush_r+0x76>
 800a2c2:	682b      	ldr	r3, [r5, #0]
 800a2c4:	b903      	cbnz	r3, 800a2c8 <__sflush_r+0x78>
 800a2c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a2c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2ca:	602f      	str	r7, [r5, #0]
 800a2cc:	b1b9      	cbz	r1, 800a2fe <__sflush_r+0xae>
 800a2ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2d2:	4299      	cmp	r1, r3
 800a2d4:	d002      	beq.n	800a2dc <__sflush_r+0x8c>
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f7fe f8ea 	bl	80084b0 <_free_r>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2e0:	e00d      	b.n	800a2fe <__sflush_r+0xae>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	47b0      	blx	r6
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	1c50      	adds	r0, r2, #1
 800a2ec:	d1c9      	bne.n	800a282 <__sflush_r+0x32>
 800a2ee:	682b      	ldr	r3, [r5, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d0c6      	beq.n	800a282 <__sflush_r+0x32>
 800a2f4:	2b1d      	cmp	r3, #29
 800a2f6:	d001      	beq.n	800a2fc <__sflush_r+0xac>
 800a2f8:	2b16      	cmp	r3, #22
 800a2fa:	d11e      	bne.n	800a33a <__sflush_r+0xea>
 800a2fc:	602f      	str	r7, [r5, #0]
 800a2fe:	2000      	movs	r0, #0
 800a300:	e022      	b.n	800a348 <__sflush_r+0xf8>
 800a302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a306:	b21b      	sxth	r3, r3
 800a308:	e01b      	b.n	800a342 <__sflush_r+0xf2>
 800a30a:	690f      	ldr	r7, [r1, #16]
 800a30c:	2f00      	cmp	r7, #0
 800a30e:	d0f6      	beq.n	800a2fe <__sflush_r+0xae>
 800a310:	0793      	lsls	r3, r2, #30
 800a312:	680e      	ldr	r6, [r1, #0]
 800a314:	bf08      	it	eq
 800a316:	694b      	ldreq	r3, [r1, #20]
 800a318:	600f      	str	r7, [r1, #0]
 800a31a:	bf18      	it	ne
 800a31c:	2300      	movne	r3, #0
 800a31e:	eba6 0807 	sub.w	r8, r6, r7
 800a322:	608b      	str	r3, [r1, #8]
 800a324:	f1b8 0f00 	cmp.w	r8, #0
 800a328:	dde9      	ble.n	800a2fe <__sflush_r+0xae>
 800a32a:	6a21      	ldr	r1, [r4, #32]
 800a32c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a32e:	4643      	mov	r3, r8
 800a330:	463a      	mov	r2, r7
 800a332:	4628      	mov	r0, r5
 800a334:	47b0      	blx	r6
 800a336:	2800      	cmp	r0, #0
 800a338:	dc08      	bgt.n	800a34c <__sflush_r+0xfc>
 800a33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a33e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a342:	81a3      	strh	r3, [r4, #12]
 800a344:	f04f 30ff 	mov.w	r0, #4294967295
 800a348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a34c:	4407      	add	r7, r0
 800a34e:	eba8 0800 	sub.w	r8, r8, r0
 800a352:	e7e7      	b.n	800a324 <__sflush_r+0xd4>
 800a354:	dfbffffe 	.word	0xdfbffffe

0800a358 <_fflush_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	690b      	ldr	r3, [r1, #16]
 800a35c:	4605      	mov	r5, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	b913      	cbnz	r3, 800a368 <_fflush_r+0x10>
 800a362:	2500      	movs	r5, #0
 800a364:	4628      	mov	r0, r5
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	b118      	cbz	r0, 800a372 <_fflush_r+0x1a>
 800a36a:	6a03      	ldr	r3, [r0, #32]
 800a36c:	b90b      	cbnz	r3, 800a372 <_fflush_r+0x1a>
 800a36e:	f7fd f921 	bl	80075b4 <__sinit>
 800a372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d0f3      	beq.n	800a362 <_fflush_r+0xa>
 800a37a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a37c:	07d0      	lsls	r0, r2, #31
 800a37e:	d404      	bmi.n	800a38a <_fflush_r+0x32>
 800a380:	0599      	lsls	r1, r3, #22
 800a382:	d402      	bmi.n	800a38a <_fflush_r+0x32>
 800a384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a386:	f7fd fa3e 	bl	8007806 <__retarget_lock_acquire_recursive>
 800a38a:	4628      	mov	r0, r5
 800a38c:	4621      	mov	r1, r4
 800a38e:	f7ff ff5f 	bl	800a250 <__sflush_r>
 800a392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a394:	07da      	lsls	r2, r3, #31
 800a396:	4605      	mov	r5, r0
 800a398:	d4e4      	bmi.n	800a364 <_fflush_r+0xc>
 800a39a:	89a3      	ldrh	r3, [r4, #12]
 800a39c:	059b      	lsls	r3, r3, #22
 800a39e:	d4e1      	bmi.n	800a364 <_fflush_r+0xc>
 800a3a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3a2:	f7fd fa31 	bl	8007808 <__retarget_lock_release_recursive>
 800a3a6:	e7dd      	b.n	800a364 <_fflush_r+0xc>

0800a3a8 <__swbuf_r>:
 800a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3aa:	460e      	mov	r6, r1
 800a3ac:	4614      	mov	r4, r2
 800a3ae:	4605      	mov	r5, r0
 800a3b0:	b118      	cbz	r0, 800a3ba <__swbuf_r+0x12>
 800a3b2:	6a03      	ldr	r3, [r0, #32]
 800a3b4:	b90b      	cbnz	r3, 800a3ba <__swbuf_r+0x12>
 800a3b6:	f7fd f8fd 	bl	80075b4 <__sinit>
 800a3ba:	69a3      	ldr	r3, [r4, #24]
 800a3bc:	60a3      	str	r3, [r4, #8]
 800a3be:	89a3      	ldrh	r3, [r4, #12]
 800a3c0:	071a      	lsls	r2, r3, #28
 800a3c2:	d501      	bpl.n	800a3c8 <__swbuf_r+0x20>
 800a3c4:	6923      	ldr	r3, [r4, #16]
 800a3c6:	b943      	cbnz	r3, 800a3da <__swbuf_r+0x32>
 800a3c8:	4621      	mov	r1, r4
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f000 f82a 	bl	800a424 <__swsetup_r>
 800a3d0:	b118      	cbz	r0, 800a3da <__swbuf_r+0x32>
 800a3d2:	f04f 37ff 	mov.w	r7, #4294967295
 800a3d6:	4638      	mov	r0, r7
 800a3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	6922      	ldr	r2, [r4, #16]
 800a3de:	1a98      	subs	r0, r3, r2
 800a3e0:	6963      	ldr	r3, [r4, #20]
 800a3e2:	b2f6      	uxtb	r6, r6
 800a3e4:	4283      	cmp	r3, r0
 800a3e6:	4637      	mov	r7, r6
 800a3e8:	dc05      	bgt.n	800a3f6 <__swbuf_r+0x4e>
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	f7ff ffb3 	bl	800a358 <_fflush_r>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d1ed      	bne.n	800a3d2 <__swbuf_r+0x2a>
 800a3f6:	68a3      	ldr	r3, [r4, #8]
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	60a3      	str	r3, [r4, #8]
 800a3fc:	6823      	ldr	r3, [r4, #0]
 800a3fe:	1c5a      	adds	r2, r3, #1
 800a400:	6022      	str	r2, [r4, #0]
 800a402:	701e      	strb	r6, [r3, #0]
 800a404:	6962      	ldr	r2, [r4, #20]
 800a406:	1c43      	adds	r3, r0, #1
 800a408:	429a      	cmp	r2, r3
 800a40a:	d004      	beq.n	800a416 <__swbuf_r+0x6e>
 800a40c:	89a3      	ldrh	r3, [r4, #12]
 800a40e:	07db      	lsls	r3, r3, #31
 800a410:	d5e1      	bpl.n	800a3d6 <__swbuf_r+0x2e>
 800a412:	2e0a      	cmp	r6, #10
 800a414:	d1df      	bne.n	800a3d6 <__swbuf_r+0x2e>
 800a416:	4621      	mov	r1, r4
 800a418:	4628      	mov	r0, r5
 800a41a:	f7ff ff9d 	bl	800a358 <_fflush_r>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d0d9      	beq.n	800a3d6 <__swbuf_r+0x2e>
 800a422:	e7d6      	b.n	800a3d2 <__swbuf_r+0x2a>

0800a424 <__swsetup_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	4b29      	ldr	r3, [pc, #164]	@ (800a4cc <__swsetup_r+0xa8>)
 800a428:	4605      	mov	r5, r0
 800a42a:	6818      	ldr	r0, [r3, #0]
 800a42c:	460c      	mov	r4, r1
 800a42e:	b118      	cbz	r0, 800a438 <__swsetup_r+0x14>
 800a430:	6a03      	ldr	r3, [r0, #32]
 800a432:	b90b      	cbnz	r3, 800a438 <__swsetup_r+0x14>
 800a434:	f7fd f8be 	bl	80075b4 <__sinit>
 800a438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a43c:	0719      	lsls	r1, r3, #28
 800a43e:	d422      	bmi.n	800a486 <__swsetup_r+0x62>
 800a440:	06da      	lsls	r2, r3, #27
 800a442:	d407      	bmi.n	800a454 <__swsetup_r+0x30>
 800a444:	2209      	movs	r2, #9
 800a446:	602a      	str	r2, [r5, #0]
 800a448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a44c:	81a3      	strh	r3, [r4, #12]
 800a44e:	f04f 30ff 	mov.w	r0, #4294967295
 800a452:	e033      	b.n	800a4bc <__swsetup_r+0x98>
 800a454:	0758      	lsls	r0, r3, #29
 800a456:	d512      	bpl.n	800a47e <__swsetup_r+0x5a>
 800a458:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a45a:	b141      	cbz	r1, 800a46e <__swsetup_r+0x4a>
 800a45c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a460:	4299      	cmp	r1, r3
 800a462:	d002      	beq.n	800a46a <__swsetup_r+0x46>
 800a464:	4628      	mov	r0, r5
 800a466:	f7fe f823 	bl	80084b0 <_free_r>
 800a46a:	2300      	movs	r3, #0
 800a46c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a46e:	89a3      	ldrh	r3, [r4, #12]
 800a470:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a474:	81a3      	strh	r3, [r4, #12]
 800a476:	2300      	movs	r3, #0
 800a478:	6063      	str	r3, [r4, #4]
 800a47a:	6923      	ldr	r3, [r4, #16]
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	89a3      	ldrh	r3, [r4, #12]
 800a480:	f043 0308 	orr.w	r3, r3, #8
 800a484:	81a3      	strh	r3, [r4, #12]
 800a486:	6923      	ldr	r3, [r4, #16]
 800a488:	b94b      	cbnz	r3, 800a49e <__swsetup_r+0x7a>
 800a48a:	89a3      	ldrh	r3, [r4, #12]
 800a48c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a494:	d003      	beq.n	800a49e <__swsetup_r+0x7a>
 800a496:	4621      	mov	r1, r4
 800a498:	4628      	mov	r0, r5
 800a49a:	f000 fc5d 	bl	800ad58 <__smakebuf_r>
 800a49e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4a2:	f013 0201 	ands.w	r2, r3, #1
 800a4a6:	d00a      	beq.n	800a4be <__swsetup_r+0x9a>
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	60a2      	str	r2, [r4, #8]
 800a4ac:	6962      	ldr	r2, [r4, #20]
 800a4ae:	4252      	negs	r2, r2
 800a4b0:	61a2      	str	r2, [r4, #24]
 800a4b2:	6922      	ldr	r2, [r4, #16]
 800a4b4:	b942      	cbnz	r2, 800a4c8 <__swsetup_r+0xa4>
 800a4b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a4ba:	d1c5      	bne.n	800a448 <__swsetup_r+0x24>
 800a4bc:	bd38      	pop	{r3, r4, r5, pc}
 800a4be:	0799      	lsls	r1, r3, #30
 800a4c0:	bf58      	it	pl
 800a4c2:	6962      	ldrpl	r2, [r4, #20]
 800a4c4:	60a2      	str	r2, [r4, #8]
 800a4c6:	e7f4      	b.n	800a4b2 <__swsetup_r+0x8e>
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	e7f7      	b.n	800a4bc <__swsetup_r+0x98>
 800a4cc:	20000024 	.word	0x20000024

0800a4d0 <memmove>:
 800a4d0:	4288      	cmp	r0, r1
 800a4d2:	b510      	push	{r4, lr}
 800a4d4:	eb01 0402 	add.w	r4, r1, r2
 800a4d8:	d902      	bls.n	800a4e0 <memmove+0x10>
 800a4da:	4284      	cmp	r4, r0
 800a4dc:	4623      	mov	r3, r4
 800a4de:	d807      	bhi.n	800a4f0 <memmove+0x20>
 800a4e0:	1e43      	subs	r3, r0, #1
 800a4e2:	42a1      	cmp	r1, r4
 800a4e4:	d008      	beq.n	800a4f8 <memmove+0x28>
 800a4e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4ee:	e7f8      	b.n	800a4e2 <memmove+0x12>
 800a4f0:	4402      	add	r2, r0
 800a4f2:	4601      	mov	r1, r0
 800a4f4:	428a      	cmp	r2, r1
 800a4f6:	d100      	bne.n	800a4fa <memmove+0x2a>
 800a4f8:	bd10      	pop	{r4, pc}
 800a4fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a502:	e7f7      	b.n	800a4f4 <memmove+0x24>

0800a504 <strncmp>:
 800a504:	b510      	push	{r4, lr}
 800a506:	b16a      	cbz	r2, 800a524 <strncmp+0x20>
 800a508:	3901      	subs	r1, #1
 800a50a:	1884      	adds	r4, r0, r2
 800a50c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a510:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a514:	429a      	cmp	r2, r3
 800a516:	d103      	bne.n	800a520 <strncmp+0x1c>
 800a518:	42a0      	cmp	r0, r4
 800a51a:	d001      	beq.n	800a520 <strncmp+0x1c>
 800a51c:	2a00      	cmp	r2, #0
 800a51e:	d1f5      	bne.n	800a50c <strncmp+0x8>
 800a520:	1ad0      	subs	r0, r2, r3
 800a522:	bd10      	pop	{r4, pc}
 800a524:	4610      	mov	r0, r2
 800a526:	e7fc      	b.n	800a522 <strncmp+0x1e>

0800a528 <_sbrk_r>:
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	4d06      	ldr	r5, [pc, #24]	@ (800a544 <_sbrk_r+0x1c>)
 800a52c:	2300      	movs	r3, #0
 800a52e:	4604      	mov	r4, r0
 800a530:	4608      	mov	r0, r1
 800a532:	602b      	str	r3, [r5, #0]
 800a534:	f7f8 f9d2 	bl	80028dc <_sbrk>
 800a538:	1c43      	adds	r3, r0, #1
 800a53a:	d102      	bne.n	800a542 <_sbrk_r+0x1a>
 800a53c:	682b      	ldr	r3, [r5, #0]
 800a53e:	b103      	cbz	r3, 800a542 <_sbrk_r+0x1a>
 800a540:	6023      	str	r3, [r4, #0]
 800a542:	bd38      	pop	{r3, r4, r5, pc}
 800a544:	200004fc 	.word	0x200004fc

0800a548 <memcpy>:
 800a548:	440a      	add	r2, r1
 800a54a:	4291      	cmp	r1, r2
 800a54c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a550:	d100      	bne.n	800a554 <memcpy+0xc>
 800a552:	4770      	bx	lr
 800a554:	b510      	push	{r4, lr}
 800a556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a55a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a55e:	4291      	cmp	r1, r2
 800a560:	d1f9      	bne.n	800a556 <memcpy+0xe>
 800a562:	bd10      	pop	{r4, pc}
 800a564:	0000      	movs	r0, r0
	...

0800a568 <nan>:
 800a568:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a570 <nan+0x8>
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	00000000 	.word	0x00000000
 800a574:	7ff80000 	.word	0x7ff80000

0800a578 <__assert_func>:
 800a578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a57a:	4614      	mov	r4, r2
 800a57c:	461a      	mov	r2, r3
 800a57e:	4b09      	ldr	r3, [pc, #36]	@ (800a5a4 <__assert_func+0x2c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4605      	mov	r5, r0
 800a584:	68d8      	ldr	r0, [r3, #12]
 800a586:	b954      	cbnz	r4, 800a59e <__assert_func+0x26>
 800a588:	4b07      	ldr	r3, [pc, #28]	@ (800a5a8 <__assert_func+0x30>)
 800a58a:	461c      	mov	r4, r3
 800a58c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a590:	9100      	str	r1, [sp, #0]
 800a592:	462b      	mov	r3, r5
 800a594:	4905      	ldr	r1, [pc, #20]	@ (800a5ac <__assert_func+0x34>)
 800a596:	f000 fba7 	bl	800ace8 <fiprintf>
 800a59a:	f000 fc3b 	bl	800ae14 <abort>
 800a59e:	4b04      	ldr	r3, [pc, #16]	@ (800a5b0 <__assert_func+0x38>)
 800a5a0:	e7f4      	b.n	800a58c <__assert_func+0x14>
 800a5a2:	bf00      	nop
 800a5a4:	20000024 	.word	0x20000024
 800a5a8:	0800b9e5 	.word	0x0800b9e5
 800a5ac:	0800b9b7 	.word	0x0800b9b7
 800a5b0:	0800b9aa 	.word	0x0800b9aa

0800a5b4 <_calloc_r>:
 800a5b4:	b570      	push	{r4, r5, r6, lr}
 800a5b6:	fba1 5402 	umull	r5, r4, r1, r2
 800a5ba:	b93c      	cbnz	r4, 800a5cc <_calloc_r+0x18>
 800a5bc:	4629      	mov	r1, r5
 800a5be:	f7fd ffeb 	bl	8008598 <_malloc_r>
 800a5c2:	4606      	mov	r6, r0
 800a5c4:	b928      	cbnz	r0, 800a5d2 <_calloc_r+0x1e>
 800a5c6:	2600      	movs	r6, #0
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	bd70      	pop	{r4, r5, r6, pc}
 800a5cc:	220c      	movs	r2, #12
 800a5ce:	6002      	str	r2, [r0, #0]
 800a5d0:	e7f9      	b.n	800a5c6 <_calloc_r+0x12>
 800a5d2:	462a      	mov	r2, r5
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	f7fd f898 	bl	800770a <memset>
 800a5da:	e7f5      	b.n	800a5c8 <_calloc_r+0x14>

0800a5dc <rshift>:
 800a5dc:	6903      	ldr	r3, [r0, #16]
 800a5de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a5e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a5ea:	f100 0414 	add.w	r4, r0, #20
 800a5ee:	dd45      	ble.n	800a67c <rshift+0xa0>
 800a5f0:	f011 011f 	ands.w	r1, r1, #31
 800a5f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a5f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a5fc:	d10c      	bne.n	800a618 <rshift+0x3c>
 800a5fe:	f100 0710 	add.w	r7, r0, #16
 800a602:	4629      	mov	r1, r5
 800a604:	42b1      	cmp	r1, r6
 800a606:	d334      	bcc.n	800a672 <rshift+0x96>
 800a608:	1a9b      	subs	r3, r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	1eea      	subs	r2, r5, #3
 800a60e:	4296      	cmp	r6, r2
 800a610:	bf38      	it	cc
 800a612:	2300      	movcc	r3, #0
 800a614:	4423      	add	r3, r4
 800a616:	e015      	b.n	800a644 <rshift+0x68>
 800a618:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a61c:	f1c1 0820 	rsb	r8, r1, #32
 800a620:	40cf      	lsrs	r7, r1
 800a622:	f105 0e04 	add.w	lr, r5, #4
 800a626:	46a1      	mov	r9, r4
 800a628:	4576      	cmp	r6, lr
 800a62a:	46f4      	mov	ip, lr
 800a62c:	d815      	bhi.n	800a65a <rshift+0x7e>
 800a62e:	1a9a      	subs	r2, r3, r2
 800a630:	0092      	lsls	r2, r2, #2
 800a632:	3a04      	subs	r2, #4
 800a634:	3501      	adds	r5, #1
 800a636:	42ae      	cmp	r6, r5
 800a638:	bf38      	it	cc
 800a63a:	2200      	movcc	r2, #0
 800a63c:	18a3      	adds	r3, r4, r2
 800a63e:	50a7      	str	r7, [r4, r2]
 800a640:	b107      	cbz	r7, 800a644 <rshift+0x68>
 800a642:	3304      	adds	r3, #4
 800a644:	1b1a      	subs	r2, r3, r4
 800a646:	42a3      	cmp	r3, r4
 800a648:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a64c:	bf08      	it	eq
 800a64e:	2300      	moveq	r3, #0
 800a650:	6102      	str	r2, [r0, #16]
 800a652:	bf08      	it	eq
 800a654:	6143      	streq	r3, [r0, #20]
 800a656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a65a:	f8dc c000 	ldr.w	ip, [ip]
 800a65e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a662:	ea4c 0707 	orr.w	r7, ip, r7
 800a666:	f849 7b04 	str.w	r7, [r9], #4
 800a66a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a66e:	40cf      	lsrs	r7, r1
 800a670:	e7da      	b.n	800a628 <rshift+0x4c>
 800a672:	f851 cb04 	ldr.w	ip, [r1], #4
 800a676:	f847 cf04 	str.w	ip, [r7, #4]!
 800a67a:	e7c3      	b.n	800a604 <rshift+0x28>
 800a67c:	4623      	mov	r3, r4
 800a67e:	e7e1      	b.n	800a644 <rshift+0x68>

0800a680 <__hexdig_fun>:
 800a680:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a684:	2b09      	cmp	r3, #9
 800a686:	d802      	bhi.n	800a68e <__hexdig_fun+0xe>
 800a688:	3820      	subs	r0, #32
 800a68a:	b2c0      	uxtb	r0, r0
 800a68c:	4770      	bx	lr
 800a68e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a692:	2b05      	cmp	r3, #5
 800a694:	d801      	bhi.n	800a69a <__hexdig_fun+0x1a>
 800a696:	3847      	subs	r0, #71	@ 0x47
 800a698:	e7f7      	b.n	800a68a <__hexdig_fun+0xa>
 800a69a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a69e:	2b05      	cmp	r3, #5
 800a6a0:	d801      	bhi.n	800a6a6 <__hexdig_fun+0x26>
 800a6a2:	3827      	subs	r0, #39	@ 0x27
 800a6a4:	e7f1      	b.n	800a68a <__hexdig_fun+0xa>
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	4770      	bx	lr
	...

0800a6ac <__gethex>:
 800a6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b0:	b085      	sub	sp, #20
 800a6b2:	468a      	mov	sl, r1
 800a6b4:	9302      	str	r3, [sp, #8]
 800a6b6:	680b      	ldr	r3, [r1, #0]
 800a6b8:	9001      	str	r0, [sp, #4]
 800a6ba:	4690      	mov	r8, r2
 800a6bc:	1c9c      	adds	r4, r3, #2
 800a6be:	46a1      	mov	r9, r4
 800a6c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a6c4:	2830      	cmp	r0, #48	@ 0x30
 800a6c6:	d0fa      	beq.n	800a6be <__gethex+0x12>
 800a6c8:	eba9 0303 	sub.w	r3, r9, r3
 800a6cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800a6d0:	f7ff ffd6 	bl	800a680 <__hexdig_fun>
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d168      	bne.n	800a7ac <__gethex+0x100>
 800a6da:	49a0      	ldr	r1, [pc, #640]	@ (800a95c <__gethex+0x2b0>)
 800a6dc:	2201      	movs	r2, #1
 800a6de:	4648      	mov	r0, r9
 800a6e0:	f7ff ff10 	bl	800a504 <strncmp>
 800a6e4:	4607      	mov	r7, r0
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	d167      	bne.n	800a7ba <__gethex+0x10e>
 800a6ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a6ee:	4626      	mov	r6, r4
 800a6f0:	f7ff ffc6 	bl	800a680 <__hexdig_fun>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d062      	beq.n	800a7be <__gethex+0x112>
 800a6f8:	4623      	mov	r3, r4
 800a6fa:	7818      	ldrb	r0, [r3, #0]
 800a6fc:	2830      	cmp	r0, #48	@ 0x30
 800a6fe:	4699      	mov	r9, r3
 800a700:	f103 0301 	add.w	r3, r3, #1
 800a704:	d0f9      	beq.n	800a6fa <__gethex+0x4e>
 800a706:	f7ff ffbb 	bl	800a680 <__hexdig_fun>
 800a70a:	fab0 f580 	clz	r5, r0
 800a70e:	096d      	lsrs	r5, r5, #5
 800a710:	f04f 0b01 	mov.w	fp, #1
 800a714:	464a      	mov	r2, r9
 800a716:	4616      	mov	r6, r2
 800a718:	3201      	adds	r2, #1
 800a71a:	7830      	ldrb	r0, [r6, #0]
 800a71c:	f7ff ffb0 	bl	800a680 <__hexdig_fun>
 800a720:	2800      	cmp	r0, #0
 800a722:	d1f8      	bne.n	800a716 <__gethex+0x6a>
 800a724:	498d      	ldr	r1, [pc, #564]	@ (800a95c <__gethex+0x2b0>)
 800a726:	2201      	movs	r2, #1
 800a728:	4630      	mov	r0, r6
 800a72a:	f7ff feeb 	bl	800a504 <strncmp>
 800a72e:	2800      	cmp	r0, #0
 800a730:	d13f      	bne.n	800a7b2 <__gethex+0x106>
 800a732:	b944      	cbnz	r4, 800a746 <__gethex+0x9a>
 800a734:	1c74      	adds	r4, r6, #1
 800a736:	4622      	mov	r2, r4
 800a738:	4616      	mov	r6, r2
 800a73a:	3201      	adds	r2, #1
 800a73c:	7830      	ldrb	r0, [r6, #0]
 800a73e:	f7ff ff9f 	bl	800a680 <__hexdig_fun>
 800a742:	2800      	cmp	r0, #0
 800a744:	d1f8      	bne.n	800a738 <__gethex+0x8c>
 800a746:	1ba4      	subs	r4, r4, r6
 800a748:	00a7      	lsls	r7, r4, #2
 800a74a:	7833      	ldrb	r3, [r6, #0]
 800a74c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a750:	2b50      	cmp	r3, #80	@ 0x50
 800a752:	d13e      	bne.n	800a7d2 <__gethex+0x126>
 800a754:	7873      	ldrb	r3, [r6, #1]
 800a756:	2b2b      	cmp	r3, #43	@ 0x2b
 800a758:	d033      	beq.n	800a7c2 <__gethex+0x116>
 800a75a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a75c:	d034      	beq.n	800a7c8 <__gethex+0x11c>
 800a75e:	1c71      	adds	r1, r6, #1
 800a760:	2400      	movs	r4, #0
 800a762:	7808      	ldrb	r0, [r1, #0]
 800a764:	f7ff ff8c 	bl	800a680 <__hexdig_fun>
 800a768:	1e43      	subs	r3, r0, #1
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b18      	cmp	r3, #24
 800a76e:	d830      	bhi.n	800a7d2 <__gethex+0x126>
 800a770:	f1a0 0210 	sub.w	r2, r0, #16
 800a774:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a778:	f7ff ff82 	bl	800a680 <__hexdig_fun>
 800a77c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a780:	fa5f fc8c 	uxtb.w	ip, ip
 800a784:	f1bc 0f18 	cmp.w	ip, #24
 800a788:	f04f 030a 	mov.w	r3, #10
 800a78c:	d91e      	bls.n	800a7cc <__gethex+0x120>
 800a78e:	b104      	cbz	r4, 800a792 <__gethex+0xe6>
 800a790:	4252      	negs	r2, r2
 800a792:	4417      	add	r7, r2
 800a794:	f8ca 1000 	str.w	r1, [sl]
 800a798:	b1ed      	cbz	r5, 800a7d6 <__gethex+0x12a>
 800a79a:	f1bb 0f00 	cmp.w	fp, #0
 800a79e:	bf0c      	ite	eq
 800a7a0:	2506      	moveq	r5, #6
 800a7a2:	2500      	movne	r5, #0
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	b005      	add	sp, #20
 800a7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ac:	2500      	movs	r5, #0
 800a7ae:	462c      	mov	r4, r5
 800a7b0:	e7b0      	b.n	800a714 <__gethex+0x68>
 800a7b2:	2c00      	cmp	r4, #0
 800a7b4:	d1c7      	bne.n	800a746 <__gethex+0x9a>
 800a7b6:	4627      	mov	r7, r4
 800a7b8:	e7c7      	b.n	800a74a <__gethex+0x9e>
 800a7ba:	464e      	mov	r6, r9
 800a7bc:	462f      	mov	r7, r5
 800a7be:	2501      	movs	r5, #1
 800a7c0:	e7c3      	b.n	800a74a <__gethex+0x9e>
 800a7c2:	2400      	movs	r4, #0
 800a7c4:	1cb1      	adds	r1, r6, #2
 800a7c6:	e7cc      	b.n	800a762 <__gethex+0xb6>
 800a7c8:	2401      	movs	r4, #1
 800a7ca:	e7fb      	b.n	800a7c4 <__gethex+0x118>
 800a7cc:	fb03 0002 	mla	r0, r3, r2, r0
 800a7d0:	e7ce      	b.n	800a770 <__gethex+0xc4>
 800a7d2:	4631      	mov	r1, r6
 800a7d4:	e7de      	b.n	800a794 <__gethex+0xe8>
 800a7d6:	eba6 0309 	sub.w	r3, r6, r9
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	4629      	mov	r1, r5
 800a7de:	2b07      	cmp	r3, #7
 800a7e0:	dc0a      	bgt.n	800a7f8 <__gethex+0x14c>
 800a7e2:	9801      	ldr	r0, [sp, #4]
 800a7e4:	f7fd ff64 	bl	80086b0 <_Balloc>
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	b940      	cbnz	r0, 800a7fe <__gethex+0x152>
 800a7ec:	4b5c      	ldr	r3, [pc, #368]	@ (800a960 <__gethex+0x2b4>)
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	21e4      	movs	r1, #228	@ 0xe4
 800a7f2:	485c      	ldr	r0, [pc, #368]	@ (800a964 <__gethex+0x2b8>)
 800a7f4:	f7ff fec0 	bl	800a578 <__assert_func>
 800a7f8:	3101      	adds	r1, #1
 800a7fa:	105b      	asrs	r3, r3, #1
 800a7fc:	e7ef      	b.n	800a7de <__gethex+0x132>
 800a7fe:	f100 0a14 	add.w	sl, r0, #20
 800a802:	2300      	movs	r3, #0
 800a804:	4655      	mov	r5, sl
 800a806:	469b      	mov	fp, r3
 800a808:	45b1      	cmp	r9, r6
 800a80a:	d337      	bcc.n	800a87c <__gethex+0x1d0>
 800a80c:	f845 bb04 	str.w	fp, [r5], #4
 800a810:	eba5 050a 	sub.w	r5, r5, sl
 800a814:	10ad      	asrs	r5, r5, #2
 800a816:	6125      	str	r5, [r4, #16]
 800a818:	4658      	mov	r0, fp
 800a81a:	f7fe f83b 	bl	8008894 <__hi0bits>
 800a81e:	016d      	lsls	r5, r5, #5
 800a820:	f8d8 6000 	ldr.w	r6, [r8]
 800a824:	1a2d      	subs	r5, r5, r0
 800a826:	42b5      	cmp	r5, r6
 800a828:	dd54      	ble.n	800a8d4 <__gethex+0x228>
 800a82a:	1bad      	subs	r5, r5, r6
 800a82c:	4629      	mov	r1, r5
 800a82e:	4620      	mov	r0, r4
 800a830:	f7fe fbcf 	bl	8008fd2 <__any_on>
 800a834:	4681      	mov	r9, r0
 800a836:	b178      	cbz	r0, 800a858 <__gethex+0x1ac>
 800a838:	1e6b      	subs	r3, r5, #1
 800a83a:	1159      	asrs	r1, r3, #5
 800a83c:	f003 021f 	and.w	r2, r3, #31
 800a840:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a844:	f04f 0901 	mov.w	r9, #1
 800a848:	fa09 f202 	lsl.w	r2, r9, r2
 800a84c:	420a      	tst	r2, r1
 800a84e:	d003      	beq.n	800a858 <__gethex+0x1ac>
 800a850:	454b      	cmp	r3, r9
 800a852:	dc36      	bgt.n	800a8c2 <__gethex+0x216>
 800a854:	f04f 0902 	mov.w	r9, #2
 800a858:	4629      	mov	r1, r5
 800a85a:	4620      	mov	r0, r4
 800a85c:	f7ff febe 	bl	800a5dc <rshift>
 800a860:	442f      	add	r7, r5
 800a862:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a866:	42bb      	cmp	r3, r7
 800a868:	da42      	bge.n	800a8f0 <__gethex+0x244>
 800a86a:	9801      	ldr	r0, [sp, #4]
 800a86c:	4621      	mov	r1, r4
 800a86e:	f7fd ff5f 	bl	8008730 <_Bfree>
 800a872:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a874:	2300      	movs	r3, #0
 800a876:	6013      	str	r3, [r2, #0]
 800a878:	25a3      	movs	r5, #163	@ 0xa3
 800a87a:	e793      	b.n	800a7a4 <__gethex+0xf8>
 800a87c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a880:	2a2e      	cmp	r2, #46	@ 0x2e
 800a882:	d012      	beq.n	800a8aa <__gethex+0x1fe>
 800a884:	2b20      	cmp	r3, #32
 800a886:	d104      	bne.n	800a892 <__gethex+0x1e6>
 800a888:	f845 bb04 	str.w	fp, [r5], #4
 800a88c:	f04f 0b00 	mov.w	fp, #0
 800a890:	465b      	mov	r3, fp
 800a892:	7830      	ldrb	r0, [r6, #0]
 800a894:	9303      	str	r3, [sp, #12]
 800a896:	f7ff fef3 	bl	800a680 <__hexdig_fun>
 800a89a:	9b03      	ldr	r3, [sp, #12]
 800a89c:	f000 000f 	and.w	r0, r0, #15
 800a8a0:	4098      	lsls	r0, r3
 800a8a2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a8a6:	3304      	adds	r3, #4
 800a8a8:	e7ae      	b.n	800a808 <__gethex+0x15c>
 800a8aa:	45b1      	cmp	r9, r6
 800a8ac:	d8ea      	bhi.n	800a884 <__gethex+0x1d8>
 800a8ae:	492b      	ldr	r1, [pc, #172]	@ (800a95c <__gethex+0x2b0>)
 800a8b0:	9303      	str	r3, [sp, #12]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	f7ff fe25 	bl	800a504 <strncmp>
 800a8ba:	9b03      	ldr	r3, [sp, #12]
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d1e1      	bne.n	800a884 <__gethex+0x1d8>
 800a8c0:	e7a2      	b.n	800a808 <__gethex+0x15c>
 800a8c2:	1ea9      	subs	r1, r5, #2
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f7fe fb84 	bl	8008fd2 <__any_on>
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d0c2      	beq.n	800a854 <__gethex+0x1a8>
 800a8ce:	f04f 0903 	mov.w	r9, #3
 800a8d2:	e7c1      	b.n	800a858 <__gethex+0x1ac>
 800a8d4:	da09      	bge.n	800a8ea <__gethex+0x23e>
 800a8d6:	1b75      	subs	r5, r6, r5
 800a8d8:	4621      	mov	r1, r4
 800a8da:	9801      	ldr	r0, [sp, #4]
 800a8dc:	462a      	mov	r2, r5
 800a8de:	f7fe f93f 	bl	8008b60 <__lshift>
 800a8e2:	1b7f      	subs	r7, r7, r5
 800a8e4:	4604      	mov	r4, r0
 800a8e6:	f100 0a14 	add.w	sl, r0, #20
 800a8ea:	f04f 0900 	mov.w	r9, #0
 800a8ee:	e7b8      	b.n	800a862 <__gethex+0x1b6>
 800a8f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a8f4:	42bd      	cmp	r5, r7
 800a8f6:	dd6f      	ble.n	800a9d8 <__gethex+0x32c>
 800a8f8:	1bed      	subs	r5, r5, r7
 800a8fa:	42ae      	cmp	r6, r5
 800a8fc:	dc34      	bgt.n	800a968 <__gethex+0x2bc>
 800a8fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a902:	2b02      	cmp	r3, #2
 800a904:	d022      	beq.n	800a94c <__gethex+0x2a0>
 800a906:	2b03      	cmp	r3, #3
 800a908:	d024      	beq.n	800a954 <__gethex+0x2a8>
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d115      	bne.n	800a93a <__gethex+0x28e>
 800a90e:	42ae      	cmp	r6, r5
 800a910:	d113      	bne.n	800a93a <__gethex+0x28e>
 800a912:	2e01      	cmp	r6, #1
 800a914:	d10b      	bne.n	800a92e <__gethex+0x282>
 800a916:	9a02      	ldr	r2, [sp, #8]
 800a918:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a91c:	6013      	str	r3, [r2, #0]
 800a91e:	2301      	movs	r3, #1
 800a920:	6123      	str	r3, [r4, #16]
 800a922:	f8ca 3000 	str.w	r3, [sl]
 800a926:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a928:	2562      	movs	r5, #98	@ 0x62
 800a92a:	601c      	str	r4, [r3, #0]
 800a92c:	e73a      	b.n	800a7a4 <__gethex+0xf8>
 800a92e:	1e71      	subs	r1, r6, #1
 800a930:	4620      	mov	r0, r4
 800a932:	f7fe fb4e 	bl	8008fd2 <__any_on>
 800a936:	2800      	cmp	r0, #0
 800a938:	d1ed      	bne.n	800a916 <__gethex+0x26a>
 800a93a:	9801      	ldr	r0, [sp, #4]
 800a93c:	4621      	mov	r1, r4
 800a93e:	f7fd fef7 	bl	8008730 <_Bfree>
 800a942:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a944:	2300      	movs	r3, #0
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	2550      	movs	r5, #80	@ 0x50
 800a94a:	e72b      	b.n	800a7a4 <__gethex+0xf8>
 800a94c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1f3      	bne.n	800a93a <__gethex+0x28e>
 800a952:	e7e0      	b.n	800a916 <__gethex+0x26a>
 800a954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1dd      	bne.n	800a916 <__gethex+0x26a>
 800a95a:	e7ee      	b.n	800a93a <__gethex+0x28e>
 800a95c:	0800b838 	.word	0x0800b838
 800a960:	0800b6cd 	.word	0x0800b6cd
 800a964:	0800b9e6 	.word	0x0800b9e6
 800a968:	1e6f      	subs	r7, r5, #1
 800a96a:	f1b9 0f00 	cmp.w	r9, #0
 800a96e:	d130      	bne.n	800a9d2 <__gethex+0x326>
 800a970:	b127      	cbz	r7, 800a97c <__gethex+0x2d0>
 800a972:	4639      	mov	r1, r7
 800a974:	4620      	mov	r0, r4
 800a976:	f7fe fb2c 	bl	8008fd2 <__any_on>
 800a97a:	4681      	mov	r9, r0
 800a97c:	117a      	asrs	r2, r7, #5
 800a97e:	2301      	movs	r3, #1
 800a980:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a984:	f007 071f 	and.w	r7, r7, #31
 800a988:	40bb      	lsls	r3, r7
 800a98a:	4213      	tst	r3, r2
 800a98c:	4629      	mov	r1, r5
 800a98e:	4620      	mov	r0, r4
 800a990:	bf18      	it	ne
 800a992:	f049 0902 	orrne.w	r9, r9, #2
 800a996:	f7ff fe21 	bl	800a5dc <rshift>
 800a99a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a99e:	1b76      	subs	r6, r6, r5
 800a9a0:	2502      	movs	r5, #2
 800a9a2:	f1b9 0f00 	cmp.w	r9, #0
 800a9a6:	d047      	beq.n	800aa38 <__gethex+0x38c>
 800a9a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d015      	beq.n	800a9dc <__gethex+0x330>
 800a9b0:	2b03      	cmp	r3, #3
 800a9b2:	d017      	beq.n	800a9e4 <__gethex+0x338>
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d109      	bne.n	800a9cc <__gethex+0x320>
 800a9b8:	f019 0f02 	tst.w	r9, #2
 800a9bc:	d006      	beq.n	800a9cc <__gethex+0x320>
 800a9be:	f8da 3000 	ldr.w	r3, [sl]
 800a9c2:	ea49 0903 	orr.w	r9, r9, r3
 800a9c6:	f019 0f01 	tst.w	r9, #1
 800a9ca:	d10e      	bne.n	800a9ea <__gethex+0x33e>
 800a9cc:	f045 0510 	orr.w	r5, r5, #16
 800a9d0:	e032      	b.n	800aa38 <__gethex+0x38c>
 800a9d2:	f04f 0901 	mov.w	r9, #1
 800a9d6:	e7d1      	b.n	800a97c <__gethex+0x2d0>
 800a9d8:	2501      	movs	r5, #1
 800a9da:	e7e2      	b.n	800a9a2 <__gethex+0x2f6>
 800a9dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9de:	f1c3 0301 	rsb	r3, r3, #1
 800a9e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a9e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d0f0      	beq.n	800a9cc <__gethex+0x320>
 800a9ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a9ee:	f104 0314 	add.w	r3, r4, #20
 800a9f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a9f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a9fa:	f04f 0c00 	mov.w	ip, #0
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa04:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aa08:	d01b      	beq.n	800aa42 <__gethex+0x396>
 800aa0a:	3201      	adds	r2, #1
 800aa0c:	6002      	str	r2, [r0, #0]
 800aa0e:	2d02      	cmp	r5, #2
 800aa10:	f104 0314 	add.w	r3, r4, #20
 800aa14:	d13c      	bne.n	800aa90 <__gethex+0x3e4>
 800aa16:	f8d8 2000 	ldr.w	r2, [r8]
 800aa1a:	3a01      	subs	r2, #1
 800aa1c:	42b2      	cmp	r2, r6
 800aa1e:	d109      	bne.n	800aa34 <__gethex+0x388>
 800aa20:	1171      	asrs	r1, r6, #5
 800aa22:	2201      	movs	r2, #1
 800aa24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa28:	f006 061f 	and.w	r6, r6, #31
 800aa2c:	fa02 f606 	lsl.w	r6, r2, r6
 800aa30:	421e      	tst	r6, r3
 800aa32:	d13a      	bne.n	800aaaa <__gethex+0x3fe>
 800aa34:	f045 0520 	orr.w	r5, r5, #32
 800aa38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa3a:	601c      	str	r4, [r3, #0]
 800aa3c:	9b02      	ldr	r3, [sp, #8]
 800aa3e:	601f      	str	r7, [r3, #0]
 800aa40:	e6b0      	b.n	800a7a4 <__gethex+0xf8>
 800aa42:	4299      	cmp	r1, r3
 800aa44:	f843 cc04 	str.w	ip, [r3, #-4]
 800aa48:	d8d9      	bhi.n	800a9fe <__gethex+0x352>
 800aa4a:	68a3      	ldr	r3, [r4, #8]
 800aa4c:	459b      	cmp	fp, r3
 800aa4e:	db17      	blt.n	800aa80 <__gethex+0x3d4>
 800aa50:	6861      	ldr	r1, [r4, #4]
 800aa52:	9801      	ldr	r0, [sp, #4]
 800aa54:	3101      	adds	r1, #1
 800aa56:	f7fd fe2b 	bl	80086b0 <_Balloc>
 800aa5a:	4681      	mov	r9, r0
 800aa5c:	b918      	cbnz	r0, 800aa66 <__gethex+0x3ba>
 800aa5e:	4b1a      	ldr	r3, [pc, #104]	@ (800aac8 <__gethex+0x41c>)
 800aa60:	4602      	mov	r2, r0
 800aa62:	2184      	movs	r1, #132	@ 0x84
 800aa64:	e6c5      	b.n	800a7f2 <__gethex+0x146>
 800aa66:	6922      	ldr	r2, [r4, #16]
 800aa68:	3202      	adds	r2, #2
 800aa6a:	f104 010c 	add.w	r1, r4, #12
 800aa6e:	0092      	lsls	r2, r2, #2
 800aa70:	300c      	adds	r0, #12
 800aa72:	f7ff fd69 	bl	800a548 <memcpy>
 800aa76:	4621      	mov	r1, r4
 800aa78:	9801      	ldr	r0, [sp, #4]
 800aa7a:	f7fd fe59 	bl	8008730 <_Bfree>
 800aa7e:	464c      	mov	r4, r9
 800aa80:	6923      	ldr	r3, [r4, #16]
 800aa82:	1c5a      	adds	r2, r3, #1
 800aa84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa88:	6122      	str	r2, [r4, #16]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	615a      	str	r2, [r3, #20]
 800aa8e:	e7be      	b.n	800aa0e <__gethex+0x362>
 800aa90:	6922      	ldr	r2, [r4, #16]
 800aa92:	455a      	cmp	r2, fp
 800aa94:	dd0b      	ble.n	800aaae <__gethex+0x402>
 800aa96:	2101      	movs	r1, #1
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f7ff fd9f 	bl	800a5dc <rshift>
 800aa9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aaa2:	3701      	adds	r7, #1
 800aaa4:	42bb      	cmp	r3, r7
 800aaa6:	f6ff aee0 	blt.w	800a86a <__gethex+0x1be>
 800aaaa:	2501      	movs	r5, #1
 800aaac:	e7c2      	b.n	800aa34 <__gethex+0x388>
 800aaae:	f016 061f 	ands.w	r6, r6, #31
 800aab2:	d0fa      	beq.n	800aaaa <__gethex+0x3fe>
 800aab4:	4453      	add	r3, sl
 800aab6:	f1c6 0620 	rsb	r6, r6, #32
 800aaba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aabe:	f7fd fee9 	bl	8008894 <__hi0bits>
 800aac2:	42b0      	cmp	r0, r6
 800aac4:	dbe7      	blt.n	800aa96 <__gethex+0x3ea>
 800aac6:	e7f0      	b.n	800aaaa <__gethex+0x3fe>
 800aac8:	0800b6cd 	.word	0x0800b6cd

0800aacc <L_shift>:
 800aacc:	f1c2 0208 	rsb	r2, r2, #8
 800aad0:	0092      	lsls	r2, r2, #2
 800aad2:	b570      	push	{r4, r5, r6, lr}
 800aad4:	f1c2 0620 	rsb	r6, r2, #32
 800aad8:	6843      	ldr	r3, [r0, #4]
 800aada:	6804      	ldr	r4, [r0, #0]
 800aadc:	fa03 f506 	lsl.w	r5, r3, r6
 800aae0:	432c      	orrs	r4, r5
 800aae2:	40d3      	lsrs	r3, r2
 800aae4:	6004      	str	r4, [r0, #0]
 800aae6:	f840 3f04 	str.w	r3, [r0, #4]!
 800aaea:	4288      	cmp	r0, r1
 800aaec:	d3f4      	bcc.n	800aad8 <L_shift+0xc>
 800aaee:	bd70      	pop	{r4, r5, r6, pc}

0800aaf0 <__match>:
 800aaf0:	b530      	push	{r4, r5, lr}
 800aaf2:	6803      	ldr	r3, [r0, #0]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aafa:	b914      	cbnz	r4, 800ab02 <__match+0x12>
 800aafc:	6003      	str	r3, [r0, #0]
 800aafe:	2001      	movs	r0, #1
 800ab00:	bd30      	pop	{r4, r5, pc}
 800ab02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab06:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ab0a:	2d19      	cmp	r5, #25
 800ab0c:	bf98      	it	ls
 800ab0e:	3220      	addls	r2, #32
 800ab10:	42a2      	cmp	r2, r4
 800ab12:	d0f0      	beq.n	800aaf6 <__match+0x6>
 800ab14:	2000      	movs	r0, #0
 800ab16:	e7f3      	b.n	800ab00 <__match+0x10>

0800ab18 <__hexnan>:
 800ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	680b      	ldr	r3, [r1, #0]
 800ab1e:	6801      	ldr	r1, [r0, #0]
 800ab20:	115e      	asrs	r6, r3, #5
 800ab22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ab26:	f013 031f 	ands.w	r3, r3, #31
 800ab2a:	b087      	sub	sp, #28
 800ab2c:	bf18      	it	ne
 800ab2e:	3604      	addne	r6, #4
 800ab30:	2500      	movs	r5, #0
 800ab32:	1f37      	subs	r7, r6, #4
 800ab34:	4682      	mov	sl, r0
 800ab36:	4690      	mov	r8, r2
 800ab38:	9301      	str	r3, [sp, #4]
 800ab3a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ab3e:	46b9      	mov	r9, r7
 800ab40:	463c      	mov	r4, r7
 800ab42:	9502      	str	r5, [sp, #8]
 800ab44:	46ab      	mov	fp, r5
 800ab46:	784a      	ldrb	r2, [r1, #1]
 800ab48:	1c4b      	adds	r3, r1, #1
 800ab4a:	9303      	str	r3, [sp, #12]
 800ab4c:	b342      	cbz	r2, 800aba0 <__hexnan+0x88>
 800ab4e:	4610      	mov	r0, r2
 800ab50:	9105      	str	r1, [sp, #20]
 800ab52:	9204      	str	r2, [sp, #16]
 800ab54:	f7ff fd94 	bl	800a680 <__hexdig_fun>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d151      	bne.n	800ac00 <__hexnan+0xe8>
 800ab5c:	9a04      	ldr	r2, [sp, #16]
 800ab5e:	9905      	ldr	r1, [sp, #20]
 800ab60:	2a20      	cmp	r2, #32
 800ab62:	d818      	bhi.n	800ab96 <__hexnan+0x7e>
 800ab64:	9b02      	ldr	r3, [sp, #8]
 800ab66:	459b      	cmp	fp, r3
 800ab68:	dd13      	ble.n	800ab92 <__hexnan+0x7a>
 800ab6a:	454c      	cmp	r4, r9
 800ab6c:	d206      	bcs.n	800ab7c <__hexnan+0x64>
 800ab6e:	2d07      	cmp	r5, #7
 800ab70:	dc04      	bgt.n	800ab7c <__hexnan+0x64>
 800ab72:	462a      	mov	r2, r5
 800ab74:	4649      	mov	r1, r9
 800ab76:	4620      	mov	r0, r4
 800ab78:	f7ff ffa8 	bl	800aacc <L_shift>
 800ab7c:	4544      	cmp	r4, r8
 800ab7e:	d952      	bls.n	800ac26 <__hexnan+0x10e>
 800ab80:	2300      	movs	r3, #0
 800ab82:	f1a4 0904 	sub.w	r9, r4, #4
 800ab86:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab8a:	f8cd b008 	str.w	fp, [sp, #8]
 800ab8e:	464c      	mov	r4, r9
 800ab90:	461d      	mov	r5, r3
 800ab92:	9903      	ldr	r1, [sp, #12]
 800ab94:	e7d7      	b.n	800ab46 <__hexnan+0x2e>
 800ab96:	2a29      	cmp	r2, #41	@ 0x29
 800ab98:	d157      	bne.n	800ac4a <__hexnan+0x132>
 800ab9a:	3102      	adds	r1, #2
 800ab9c:	f8ca 1000 	str.w	r1, [sl]
 800aba0:	f1bb 0f00 	cmp.w	fp, #0
 800aba4:	d051      	beq.n	800ac4a <__hexnan+0x132>
 800aba6:	454c      	cmp	r4, r9
 800aba8:	d206      	bcs.n	800abb8 <__hexnan+0xa0>
 800abaa:	2d07      	cmp	r5, #7
 800abac:	dc04      	bgt.n	800abb8 <__hexnan+0xa0>
 800abae:	462a      	mov	r2, r5
 800abb0:	4649      	mov	r1, r9
 800abb2:	4620      	mov	r0, r4
 800abb4:	f7ff ff8a 	bl	800aacc <L_shift>
 800abb8:	4544      	cmp	r4, r8
 800abba:	d936      	bls.n	800ac2a <__hexnan+0x112>
 800abbc:	f1a8 0204 	sub.w	r2, r8, #4
 800abc0:	4623      	mov	r3, r4
 800abc2:	f853 1b04 	ldr.w	r1, [r3], #4
 800abc6:	f842 1f04 	str.w	r1, [r2, #4]!
 800abca:	429f      	cmp	r7, r3
 800abcc:	d2f9      	bcs.n	800abc2 <__hexnan+0xaa>
 800abce:	1b3b      	subs	r3, r7, r4
 800abd0:	f023 0303 	bic.w	r3, r3, #3
 800abd4:	3304      	adds	r3, #4
 800abd6:	3401      	adds	r4, #1
 800abd8:	3e03      	subs	r6, #3
 800abda:	42b4      	cmp	r4, r6
 800abdc:	bf88      	it	hi
 800abde:	2304      	movhi	r3, #4
 800abe0:	4443      	add	r3, r8
 800abe2:	2200      	movs	r2, #0
 800abe4:	f843 2b04 	str.w	r2, [r3], #4
 800abe8:	429f      	cmp	r7, r3
 800abea:	d2fb      	bcs.n	800abe4 <__hexnan+0xcc>
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	b91b      	cbnz	r3, 800abf8 <__hexnan+0xe0>
 800abf0:	4547      	cmp	r7, r8
 800abf2:	d128      	bne.n	800ac46 <__hexnan+0x12e>
 800abf4:	2301      	movs	r3, #1
 800abf6:	603b      	str	r3, [r7, #0]
 800abf8:	2005      	movs	r0, #5
 800abfa:	b007      	add	sp, #28
 800abfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac00:	3501      	adds	r5, #1
 800ac02:	2d08      	cmp	r5, #8
 800ac04:	f10b 0b01 	add.w	fp, fp, #1
 800ac08:	dd06      	ble.n	800ac18 <__hexnan+0x100>
 800ac0a:	4544      	cmp	r4, r8
 800ac0c:	d9c1      	bls.n	800ab92 <__hexnan+0x7a>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac14:	2501      	movs	r5, #1
 800ac16:	3c04      	subs	r4, #4
 800ac18:	6822      	ldr	r2, [r4, #0]
 800ac1a:	f000 000f 	and.w	r0, r0, #15
 800ac1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ac22:	6020      	str	r0, [r4, #0]
 800ac24:	e7b5      	b.n	800ab92 <__hexnan+0x7a>
 800ac26:	2508      	movs	r5, #8
 800ac28:	e7b3      	b.n	800ab92 <__hexnan+0x7a>
 800ac2a:	9b01      	ldr	r3, [sp, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d0dd      	beq.n	800abec <__hexnan+0xd4>
 800ac30:	f1c3 0320 	rsb	r3, r3, #32
 800ac34:	f04f 32ff 	mov.w	r2, #4294967295
 800ac38:	40da      	lsrs	r2, r3
 800ac3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ac3e:	4013      	ands	r3, r2
 800ac40:	f846 3c04 	str.w	r3, [r6, #-4]
 800ac44:	e7d2      	b.n	800abec <__hexnan+0xd4>
 800ac46:	3f04      	subs	r7, #4
 800ac48:	e7d0      	b.n	800abec <__hexnan+0xd4>
 800ac4a:	2004      	movs	r0, #4
 800ac4c:	e7d5      	b.n	800abfa <__hexnan+0xe2>

0800ac4e <__ascii_mbtowc>:
 800ac4e:	b082      	sub	sp, #8
 800ac50:	b901      	cbnz	r1, 800ac54 <__ascii_mbtowc+0x6>
 800ac52:	a901      	add	r1, sp, #4
 800ac54:	b142      	cbz	r2, 800ac68 <__ascii_mbtowc+0x1a>
 800ac56:	b14b      	cbz	r3, 800ac6c <__ascii_mbtowc+0x1e>
 800ac58:	7813      	ldrb	r3, [r2, #0]
 800ac5a:	600b      	str	r3, [r1, #0]
 800ac5c:	7812      	ldrb	r2, [r2, #0]
 800ac5e:	1e10      	subs	r0, r2, #0
 800ac60:	bf18      	it	ne
 800ac62:	2001      	movne	r0, #1
 800ac64:	b002      	add	sp, #8
 800ac66:	4770      	bx	lr
 800ac68:	4610      	mov	r0, r2
 800ac6a:	e7fb      	b.n	800ac64 <__ascii_mbtowc+0x16>
 800ac6c:	f06f 0001 	mvn.w	r0, #1
 800ac70:	e7f8      	b.n	800ac64 <__ascii_mbtowc+0x16>

0800ac72 <_realloc_r>:
 800ac72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac76:	4680      	mov	r8, r0
 800ac78:	4615      	mov	r5, r2
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	b921      	cbnz	r1, 800ac88 <_realloc_r+0x16>
 800ac7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac82:	4611      	mov	r1, r2
 800ac84:	f7fd bc88 	b.w	8008598 <_malloc_r>
 800ac88:	b92a      	cbnz	r2, 800ac96 <_realloc_r+0x24>
 800ac8a:	f7fd fc11 	bl	80084b0 <_free_r>
 800ac8e:	2400      	movs	r4, #0
 800ac90:	4620      	mov	r0, r4
 800ac92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac96:	f000 f8c4 	bl	800ae22 <_malloc_usable_size_r>
 800ac9a:	4285      	cmp	r5, r0
 800ac9c:	4606      	mov	r6, r0
 800ac9e:	d802      	bhi.n	800aca6 <_realloc_r+0x34>
 800aca0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aca4:	d8f4      	bhi.n	800ac90 <_realloc_r+0x1e>
 800aca6:	4629      	mov	r1, r5
 800aca8:	4640      	mov	r0, r8
 800acaa:	f7fd fc75 	bl	8008598 <_malloc_r>
 800acae:	4607      	mov	r7, r0
 800acb0:	2800      	cmp	r0, #0
 800acb2:	d0ec      	beq.n	800ac8e <_realloc_r+0x1c>
 800acb4:	42b5      	cmp	r5, r6
 800acb6:	462a      	mov	r2, r5
 800acb8:	4621      	mov	r1, r4
 800acba:	bf28      	it	cs
 800acbc:	4632      	movcs	r2, r6
 800acbe:	f7ff fc43 	bl	800a548 <memcpy>
 800acc2:	4621      	mov	r1, r4
 800acc4:	4640      	mov	r0, r8
 800acc6:	f7fd fbf3 	bl	80084b0 <_free_r>
 800acca:	463c      	mov	r4, r7
 800accc:	e7e0      	b.n	800ac90 <_realloc_r+0x1e>

0800acce <__ascii_wctomb>:
 800acce:	4603      	mov	r3, r0
 800acd0:	4608      	mov	r0, r1
 800acd2:	b141      	cbz	r1, 800ace6 <__ascii_wctomb+0x18>
 800acd4:	2aff      	cmp	r2, #255	@ 0xff
 800acd6:	d904      	bls.n	800ace2 <__ascii_wctomb+0x14>
 800acd8:	228a      	movs	r2, #138	@ 0x8a
 800acda:	601a      	str	r2, [r3, #0]
 800acdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ace0:	4770      	bx	lr
 800ace2:	700a      	strb	r2, [r1, #0]
 800ace4:	2001      	movs	r0, #1
 800ace6:	4770      	bx	lr

0800ace8 <fiprintf>:
 800ace8:	b40e      	push	{r1, r2, r3}
 800acea:	b503      	push	{r0, r1, lr}
 800acec:	4601      	mov	r1, r0
 800acee:	ab03      	add	r3, sp, #12
 800acf0:	4805      	ldr	r0, [pc, #20]	@ (800ad08 <fiprintf+0x20>)
 800acf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800acf6:	6800      	ldr	r0, [r0, #0]
 800acf8:	9301      	str	r3, [sp, #4]
 800acfa:	f7ff f991 	bl	800a020 <_vfiprintf_r>
 800acfe:	b002      	add	sp, #8
 800ad00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad04:	b003      	add	sp, #12
 800ad06:	4770      	bx	lr
 800ad08:	20000024 	.word	0x20000024

0800ad0c <__swhatbuf_r>:
 800ad0c:	b570      	push	{r4, r5, r6, lr}
 800ad0e:	460c      	mov	r4, r1
 800ad10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad14:	2900      	cmp	r1, #0
 800ad16:	b096      	sub	sp, #88	@ 0x58
 800ad18:	4615      	mov	r5, r2
 800ad1a:	461e      	mov	r6, r3
 800ad1c:	da0d      	bge.n	800ad3a <__swhatbuf_r+0x2e>
 800ad1e:	89a3      	ldrh	r3, [r4, #12]
 800ad20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad24:	f04f 0100 	mov.w	r1, #0
 800ad28:	bf14      	ite	ne
 800ad2a:	2340      	movne	r3, #64	@ 0x40
 800ad2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad30:	2000      	movs	r0, #0
 800ad32:	6031      	str	r1, [r6, #0]
 800ad34:	602b      	str	r3, [r5, #0]
 800ad36:	b016      	add	sp, #88	@ 0x58
 800ad38:	bd70      	pop	{r4, r5, r6, pc}
 800ad3a:	466a      	mov	r2, sp
 800ad3c:	f000 f848 	bl	800add0 <_fstat_r>
 800ad40:	2800      	cmp	r0, #0
 800ad42:	dbec      	blt.n	800ad1e <__swhatbuf_r+0x12>
 800ad44:	9901      	ldr	r1, [sp, #4]
 800ad46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad4e:	4259      	negs	r1, r3
 800ad50:	4159      	adcs	r1, r3
 800ad52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad56:	e7eb      	b.n	800ad30 <__swhatbuf_r+0x24>

0800ad58 <__smakebuf_r>:
 800ad58:	898b      	ldrh	r3, [r1, #12]
 800ad5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad5c:	079d      	lsls	r5, r3, #30
 800ad5e:	4606      	mov	r6, r0
 800ad60:	460c      	mov	r4, r1
 800ad62:	d507      	bpl.n	800ad74 <__smakebuf_r+0x1c>
 800ad64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ad68:	6023      	str	r3, [r4, #0]
 800ad6a:	6123      	str	r3, [r4, #16]
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	6163      	str	r3, [r4, #20]
 800ad70:	b003      	add	sp, #12
 800ad72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad74:	ab01      	add	r3, sp, #4
 800ad76:	466a      	mov	r2, sp
 800ad78:	f7ff ffc8 	bl	800ad0c <__swhatbuf_r>
 800ad7c:	9f00      	ldr	r7, [sp, #0]
 800ad7e:	4605      	mov	r5, r0
 800ad80:	4639      	mov	r1, r7
 800ad82:	4630      	mov	r0, r6
 800ad84:	f7fd fc08 	bl	8008598 <_malloc_r>
 800ad88:	b948      	cbnz	r0, 800ad9e <__smakebuf_r+0x46>
 800ad8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad8e:	059a      	lsls	r2, r3, #22
 800ad90:	d4ee      	bmi.n	800ad70 <__smakebuf_r+0x18>
 800ad92:	f023 0303 	bic.w	r3, r3, #3
 800ad96:	f043 0302 	orr.w	r3, r3, #2
 800ad9a:	81a3      	strh	r3, [r4, #12]
 800ad9c:	e7e2      	b.n	800ad64 <__smakebuf_r+0xc>
 800ad9e:	89a3      	ldrh	r3, [r4, #12]
 800ada0:	6020      	str	r0, [r4, #0]
 800ada2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ada6:	81a3      	strh	r3, [r4, #12]
 800ada8:	9b01      	ldr	r3, [sp, #4]
 800adaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800adae:	b15b      	cbz	r3, 800adc8 <__smakebuf_r+0x70>
 800adb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adb4:	4630      	mov	r0, r6
 800adb6:	f000 f81d 	bl	800adf4 <_isatty_r>
 800adba:	b128      	cbz	r0, 800adc8 <__smakebuf_r+0x70>
 800adbc:	89a3      	ldrh	r3, [r4, #12]
 800adbe:	f023 0303 	bic.w	r3, r3, #3
 800adc2:	f043 0301 	orr.w	r3, r3, #1
 800adc6:	81a3      	strh	r3, [r4, #12]
 800adc8:	89a3      	ldrh	r3, [r4, #12]
 800adca:	431d      	orrs	r5, r3
 800adcc:	81a5      	strh	r5, [r4, #12]
 800adce:	e7cf      	b.n	800ad70 <__smakebuf_r+0x18>

0800add0 <_fstat_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	4d07      	ldr	r5, [pc, #28]	@ (800adf0 <_fstat_r+0x20>)
 800add4:	2300      	movs	r3, #0
 800add6:	4604      	mov	r4, r0
 800add8:	4608      	mov	r0, r1
 800adda:	4611      	mov	r1, r2
 800addc:	602b      	str	r3, [r5, #0]
 800adde:	f7f7 fd55 	bl	800288c <_fstat>
 800ade2:	1c43      	adds	r3, r0, #1
 800ade4:	d102      	bne.n	800adec <_fstat_r+0x1c>
 800ade6:	682b      	ldr	r3, [r5, #0]
 800ade8:	b103      	cbz	r3, 800adec <_fstat_r+0x1c>
 800adea:	6023      	str	r3, [r4, #0]
 800adec:	bd38      	pop	{r3, r4, r5, pc}
 800adee:	bf00      	nop
 800adf0:	200004fc 	.word	0x200004fc

0800adf4 <_isatty_r>:
 800adf4:	b538      	push	{r3, r4, r5, lr}
 800adf6:	4d06      	ldr	r5, [pc, #24]	@ (800ae10 <_isatty_r+0x1c>)
 800adf8:	2300      	movs	r3, #0
 800adfa:	4604      	mov	r4, r0
 800adfc:	4608      	mov	r0, r1
 800adfe:	602b      	str	r3, [r5, #0]
 800ae00:	f7f7 fd54 	bl	80028ac <_isatty>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d102      	bne.n	800ae0e <_isatty_r+0x1a>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	b103      	cbz	r3, 800ae0e <_isatty_r+0x1a>
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	200004fc 	.word	0x200004fc

0800ae14 <abort>:
 800ae14:	b508      	push	{r3, lr}
 800ae16:	2006      	movs	r0, #6
 800ae18:	f000 f834 	bl	800ae84 <raise>
 800ae1c:	2001      	movs	r0, #1
 800ae1e:	f7f7 fce5 	bl	80027ec <_exit>

0800ae22 <_malloc_usable_size_r>:
 800ae22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae26:	1f18      	subs	r0, r3, #4
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	bfbc      	itt	lt
 800ae2c:	580b      	ldrlt	r3, [r1, r0]
 800ae2e:	18c0      	addlt	r0, r0, r3
 800ae30:	4770      	bx	lr

0800ae32 <_raise_r>:
 800ae32:	291f      	cmp	r1, #31
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	4605      	mov	r5, r0
 800ae38:	460c      	mov	r4, r1
 800ae3a:	d904      	bls.n	800ae46 <_raise_r+0x14>
 800ae3c:	2316      	movs	r3, #22
 800ae3e:	6003      	str	r3, [r0, #0]
 800ae40:	f04f 30ff 	mov.w	r0, #4294967295
 800ae44:	bd38      	pop	{r3, r4, r5, pc}
 800ae46:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae48:	b112      	cbz	r2, 800ae50 <_raise_r+0x1e>
 800ae4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae4e:	b94b      	cbnz	r3, 800ae64 <_raise_r+0x32>
 800ae50:	4628      	mov	r0, r5
 800ae52:	f000 f831 	bl	800aeb8 <_getpid_r>
 800ae56:	4622      	mov	r2, r4
 800ae58:	4601      	mov	r1, r0
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae60:	f000 b818 	b.w	800ae94 <_kill_r>
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d00a      	beq.n	800ae7e <_raise_r+0x4c>
 800ae68:	1c59      	adds	r1, r3, #1
 800ae6a:	d103      	bne.n	800ae74 <_raise_r+0x42>
 800ae6c:	2316      	movs	r3, #22
 800ae6e:	6003      	str	r3, [r0, #0]
 800ae70:	2001      	movs	r0, #1
 800ae72:	e7e7      	b.n	800ae44 <_raise_r+0x12>
 800ae74:	2100      	movs	r1, #0
 800ae76:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	4798      	blx	r3
 800ae7e:	2000      	movs	r0, #0
 800ae80:	e7e0      	b.n	800ae44 <_raise_r+0x12>
	...

0800ae84 <raise>:
 800ae84:	4b02      	ldr	r3, [pc, #8]	@ (800ae90 <raise+0xc>)
 800ae86:	4601      	mov	r1, r0
 800ae88:	6818      	ldr	r0, [r3, #0]
 800ae8a:	f7ff bfd2 	b.w	800ae32 <_raise_r>
 800ae8e:	bf00      	nop
 800ae90:	20000024 	.word	0x20000024

0800ae94 <_kill_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	4d07      	ldr	r5, [pc, #28]	@ (800aeb4 <_kill_r+0x20>)
 800ae98:	2300      	movs	r3, #0
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	4608      	mov	r0, r1
 800ae9e:	4611      	mov	r1, r2
 800aea0:	602b      	str	r3, [r5, #0]
 800aea2:	f7f7 fc93 	bl	80027cc <_kill>
 800aea6:	1c43      	adds	r3, r0, #1
 800aea8:	d102      	bne.n	800aeb0 <_kill_r+0x1c>
 800aeaa:	682b      	ldr	r3, [r5, #0]
 800aeac:	b103      	cbz	r3, 800aeb0 <_kill_r+0x1c>
 800aeae:	6023      	str	r3, [r4, #0]
 800aeb0:	bd38      	pop	{r3, r4, r5, pc}
 800aeb2:	bf00      	nop
 800aeb4:	200004fc 	.word	0x200004fc

0800aeb8 <_getpid_r>:
 800aeb8:	f7f7 bc80 	b.w	80027bc <_getpid>

0800aebc <_init>:
 800aebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aebe:	bf00      	nop
 800aec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aec2:	bc08      	pop	{r3}
 800aec4:	469e      	mov	lr, r3
 800aec6:	4770      	bx	lr

0800aec8 <_fini>:
 800aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeca:	bf00      	nop
 800aecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aece:	bc08      	pop	{r3}
 800aed0:	469e      	mov	lr, r3
 800aed2:	4770      	bx	lr
